<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xen | Mctrain's Blog]]></title>
  <link href="http://ytliu.github.io/blog/categories/xen/atom.xml" rel="self"/>
  <link href="http://ytliu.github.io/"/>
  <updated>2016-12-15T11:12:49+08:00</updated>
  <id>http://ytliu.github.io/</id>
  <author>
    <name><![CDATA[Liu Yutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xen的启动之内存相关实现]]></title>
    <link href="http://ytliu.github.io/blog/2015/07/30/xende-qi-dong-zhi-nei-cun-xiang-guan-shi-xian/"/>
    <updated>2015-07-30T21:36:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/07/30/xende-qi-dong-zhi-nei-cun-xiang-guan-shi-xian</id>
    <content type="html"><![CDATA[<p><a href="http://ytliu.info/blog/2015/07/28/xende-nei-cun-bu-ju/">上篇博客</a>介绍了Xen的整体内存分布情况，这篇博文主要从Xen的启动入手，介绍Xen在启动的时候是如何初始化它的内存，包括如何分配内存区域，如何初始化页表，以及如何在不同阶段初始化不同的内存分配器等等。</p>

<!-- more -->


<p>这篇博文借鉴了一些<a href="http://bbs.chinacloud.cn/attachment.aspx?attachmentid=397">这篇文章</a>的内容，不过主要介绍的是最新版本的Xen在64位机器下的内存相关实现。</p>

<p>好，现在开始进入正题！</p>

<h3>Xen的启动</h3>

<p>在介绍Xen启动的内存实现之前，先大致介绍下Xen的启动的整个流程（参考<a href="http://bbs.chinacloud.cn/attachment.aspx?attachmentid=397">这里</a>)：</p>

<h4>汇编部分：</h4>

<p>汇编部分代码都在<code>xen-source/xen/arch/x86/boot/</code>目录下</p>

<p><code>head.S</code>，这个是整个Xen的入口：<code>ENTRY(start)</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ENTRY</span><span class="p">(</span><span class="n">start</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">jmp</span>     <span class="n">__start</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>里面主要做了下面几件事：</p>

<ul>
<li>装入GDT (trampoline_gdt)：</li>
</ul>


<table>
<thead>
<tr>
<th align="left">GDT项 </th>
<th align="left"> 说明 </th>
<th align="left"> 段选择子</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">1 </td>
<td align="left"> ring0 code, 32-bit mode </td>
<td align="left"> BOOT_CS32 (0x0008)</td>
</tr>
<tr>
<td align="left">2 </td>
<td align="left"> ring0 code, 64-bit mode </td>
<td align="left"> BOOT_CS64 (0x0010)</td>
</tr>
<tr>
<td align="left">3 </td>
<td align="left"> ring0 data </td>
<td align="left"> BOOT_DS (0x0018)</td>
</tr>
<tr>
<td align="left">4 </td>
<td align="left"> real-mode code </td>
<td align="left"> BOOT_PSEUDORM_CS (0x0020)</td>
</tr>
<tr>
<td align="left">5 </td>
<td align="left"> real-mode data </td>
<td align="left"> BOOT_PSEUDORM_DS (0x0028)</td>
</tr>
</tbody>
</table>


<ul>
<li>获取Multiboot相关的信息，放置在某段内存空间，之后启动的时候会被用到；</li>
<li>初始化BSS；</li>
<li>初始化最早期的页表<code>l3_bootmap</code>和<code>l2_bootmap</code>，注意这个时候还没有开启分页功能。这个部分会在后面进行详细介绍；</li>
<li>解析早期命令行参数；</li>
<li>调整<code>trampoline.S</code>代码的内存位置,移动到 BOOT_TRAMPOLINE(0x8c00处);</li>
<li>跳转到 trampoline_boot_cpu_entry。</li>
</ul>


<p><code>trampoline.S</code>，主要工作为：</p>

<ul>
<li>进入实模式,读取内存,磁盘,视频信息；</li>
<li>进入保护模式，将页表基地址<code>idle_pg_table</code>载入CR3，<code>idle_pg_table</code>会在之后进行详细的介绍；</li>
<li>开启EFER（Extended Feature Enable Register）；</li>
<li>开启分页模式，同时将<code>CR0</code>中的<code>PG, AM, WP, NE, ET, MP, PE</code>位都设上；</li>
<li>进入<code>__high_start</code>，即<code>x86_64.S</code>的代码。</li>
</ul>


<p><code>x86_64.S</code>，主要工作为：</p>

<ul>
<li>重新载入GDT (gdt_descr)：</li>
</ul>


<table>
<thead>
<tr>
<th align="left">GDT项 </th>
<th align="left"> 说明 </th>
<th align="left"> 段选择子</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">0xe001 </td>
<td align="left"> ring0 code, 64-bit mode </td>
<td align="left"> __HYPERVISOR_CS64 (0xe008)</td>
</tr>
<tr>
<td align="left">0xe002 </td>
<td align="left"> ring0 data </td>
<td align="left"> __HYPERVISOR_DS32 (0xe010)</td>
</tr>
<tr>
<td align="left">0xe003 </td>
<td align="left"> reserved </td>
<td align="left"> -</td>
</tr>
<tr>
<td align="left">0xe004 </td>
<td align="left"> ring 3 code, compatibility </td>
<td align="left"> FLAT_RING3_CS32 (0xe023)</td>
</tr>
<tr>
<td align="left">0xe005 </td>
<td align="left"> ring 3 data </td>
<td align="left"> FLAT_RING3_DS32 (0xe02b)</td>
</tr>
<tr>
<td align="left">0xe006 </td>
<td align="left"> ring 3 code, 64-bit mode </td>
<td align="left"> FLAT_RING3_CS64 (0xe033)</td>
</tr>
<tr>
<td align="left">0xe007 </td>
<td align="left"> ring 0 code, compatibility </td>
<td align="left"> __HYPERVISOR_CS32 (0xe038)</td>
</tr>
<tr>
<td align="left">0xe008~0xe009 </td>
<td align="left"> TSS </td>
<td align="left"> -</td>
</tr>
<tr>
<td align="left">0xe00a~0xe00b </td>
<td align="left"> LDT </td>
<td align="left"> -</td>
</tr>
<tr>
<td align="left">0xe00c </td>
<td align="left"> per-cpu entry </td>
<td align="left"> -</td>
</tr>
</tbody>
</table>


<ul>
<li>装入堆栈指针：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mov</span> <span class="n">stack_start</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">rsp</span>
</span><span class='line'><span class="n">or</span>  <span class="err">$</span><span class="p">(</span><span class="n">STACK_SIZE</span><span class="o">-</span><span class="n">CPUINFO_sizeof</span><span class="p">),</span><span class="o">%</span><span class="n">rsp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意，Xen会通过<code>or $(STACK_SIZE-CPUINFO_sizeof),%rsp</code>方式在栈顶预留一个<code>cpu_info</code>结构，这个结构包含很多重要的成员：</p>

<pre><code>1. 客户系统的切换上下文 
2. 当前运行的`vcpu`指针
3. 物理处理器编号
...
</code></pre>

<ul>
<li>跳转到<code>__start_xen</code>。</li>
</ul>


<h4>C部分：</h4>

<p>即<code>xen-source/xen/arch/x86/setup.c</code>文件中的<code>__start_xen</code>函数，主要逻辑如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">start_xen</span><span class="p">(</span><span class="n">multiboot_info_t</span> <span class="o">*</span><span class="n">mbi</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 注意,默认的情况下,参数 mbi 将从堆栈传递,这个值是前面汇编代码中的ebx值</span>
</span><span class='line'>  <span class="c1">// 初始化IDT table</span>
</span><span class='line'>  <span class="c1">// 初始化系统相关table和描述符，包括TSS，GDT，LDT，TR等</span>
</span><span class='line'>  <span class="c1">// 解析命令行</span>
</span><span class='line'>  <span class="c1">// 初始化 console</span>
</span><span class='line'>  <span class="c1">// 内存初始化，这些是这篇博文的重点</span>
</span><span class='line'>  <span class="c1">// 其它的一些设备初始化</span>
</span><span class='line'>  <span class="c1">// trap_init,初始化 IDT</span>
</span><span class='line'>  <span class="c1">// CPU的初始化</span>
</span><span class='line'>  <span class="c1">// 创建domaim-0，下一篇博文的重点</span>
</span><span class='line'>  <span class="c1">// &lt;code&gt;domain_unpause_by_systemcontroller(dom0)&lt;/code&gt;,调度domain-0</span>
</span><span class='line'>  <span class="c1">// &lt;code&gt;reset_stack_and_jump(init_done)&lt;/code&gt;，Xen进入idle循环</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<h3>内存初始化</h3>

<p>在介绍完Xen大致的的启动流程之后，我们就要开始来重点介绍和内存相关的具体实现了。以下的内容主要回答下面几个问题：</p>

<ul>
<li>Xen是如何从实模式启动，然后进入保护模式，并开启分页模式的？</li>
<li>Xen的页表是如何建立的？即如何建立虚拟内存到物理内存的映射？</li>
<li>Xen在启动过程中是如何进行内存分配的？</li>
<li>整个系统运行起来之后，Xen是如何管理自己的内存的？</li>
</ul>


<p>对于第一个问题，简单来说，Xen在启动的时候是处于实模式的，也就是可以直接访问物理内存，通过预先定义的ENTRY地址<code>start</code>开始执行最初的汇编代码。在开启分页机制之前，Xen会先初始化一段最基本的页表，即在页表中映射物理内存的0~16M地址空间，其中包括了Xen所需的最基本的代码和数据，然后通过设置<code>CR0</code>中的某些位开启分页机制。</p>

<p>为了回答余下的三个问题，我们先来看看Xen页表的组织结构：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xen/arch/x86/boot/x86_64.S </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">__page_tables_start</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">......</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Top</span><span class="o">-</span><span class="n">level</span> <span class="n">master</span> <span class="p">(</span><span class="n">and</span> <span class="n">idle</span><span class="o">-</span><span class="n">domain</span><span class="p">)</span> <span class="n">page</span> <span class="n">directory</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">idle_pg_table</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l3_bootmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="n">idx</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="n">L4_PAGETABLE_ENTRIES</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">l4_table_offset</span><span class="p">(</span><span class="n">DIRECTMAP_VIRT_START</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l3_identmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="p">.</span><span class="n">elseif</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">l4_table_offset</span><span class="p">(</span><span class="n">XEN_VIRT_START</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l3_xenmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="p">.</span><span class="k">else</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endif</span>
</span><span class='line'>    <span class="n">idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">idle_pg_table</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">idle_pg_table</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">GLOBAL</span><span class="p">(</span><span class="n">__page_tables_end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>idle_pg_table</code>是页表的基地址，也就是第四级页表l4的地址，会在<code>trampoline.S</code>里，在开启分页机制之前被载入cr3：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>trampoline.S </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/* Load pagetable base register. */</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="err">$</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">idle_pg_table</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>    <span class="n">add</span>     <span class="n">bootsym_rel</span><span class="p">(</span><span class="n">trampoline_xen_phys_start</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">cr3</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到，它的第0项是<code>l3_bootmap</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>x86_64.S </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">idle_pg_table</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l3_bootmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>l3_bootmap</code>和<code>l2_bootmap</code>在<code>head.S</code>启动代码里面被初始化了：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/* Initialise L2 boot-map page table entries (16MB). */</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="err">$</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_bootmap</span><span class="p">),</span><span class="o">%</span><span class="n">edx</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="err">$</span><span class="n">PAGE_HYPERVISOR</span><span class="o">|</span><span class="n">_PAGE_PSE</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="err">$</span><span class="mi">8</span><span class="p">,</span><span class="o">%</span><span class="n">ecx</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">:</span>      <span class="n">mov</span>     <span class="o">%</span><span class="n">eax</span><span class="p">,(</span><span class="o">%</span><span class="n">edx</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">add</span>     <span class="err">$</span><span class="mi">8</span><span class="p">,</span><span class="o">%</span><span class="n">edx</span>
</span><span class='line'>    <span class="n">add</span>     <span class="err">$</span><span class="p">(</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L2_PAGETABLE_SHIFT</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>    <span class="n">loop</span>    <span class="mi">1</span><span class="n">b</span>
</span><span class='line'>    <span class="cm">/* Initialise L3 boot-map page directory entry. */</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="err">$</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_bootmap</span><span class="p">)</span><span class="o">+</span><span class="n">__PAGE_HYPERVISOR</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">l3_bootmap</span><span class="p">)</span> <span class="o">+</span> <span class="mi">0</span><span class="o">*</span><span class="mi">8</span>
</span><span class='line'>    <span class="cm">/* Hook 4kB mappings of first 2MB of memory into L2. */</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="err">$</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">l1_identmap</span><span class="p">)</span><span class="o">+</span><span class="n">__PAGE_HYPERVISOR</span><span class="p">,</span><span class="o">%</span><span class="n">edi</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="o">%</span><span class="n">edi</span><span class="p">,</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_xenmap</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mov</span>     <span class="o">%</span><span class="n">edi</span><span class="p">,</span><span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_bootmap</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到，<code>l3_bootmap</code>的第0项是<code>l2_bootmap</code>的地址，而<code>l2_bootmap</code>第0项是<code>l1_identmap</code>，它会以4K的页的方式映射0~2M的物理内存地址空间，而1~7项则是以7个2M的大页映射了2~16M的物理内存。而在这0~16M的物理内存中，存放了Xen的代码、数据的信息，需要在启动的时候被用到，所以需要在最初始的阶段映射到虚拟地址空间中。</p>

<p>继续看<code>idle_page_table</code>，如果<code>idx</code>为<code>l4_table_offset(XEN_VIRT_START)</code>，即第261项，则在该项填上<code>l3_xenmap</code>的地址；如果<code>idx</code>为<code>l4_table_offset(DIRECTMAP_VIRT_START)</code>，即第262项，则在该项上填上<code>l3_identmap</code>的地址，其余的地址在这个时候都被设置为0。</p>

<p>接下来我们来看看<code>l3_xenmap</code>和<code>l3_identmap</code>分别是什么：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">l2_xenmap</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="mi">8</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">__image_base__</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L2_PAGETABLE_SHIFT</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">PAGE_HYPERVISOR</span> <span class="o">|</span> <span class="n">_PAGE_PSE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fill</span> <span class="n">L2_PAGETABLE_ENTRIES</span> <span class="o">-</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">l2_xenmap</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">l2_xenmap</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">l3_xenmap</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="n">L3_PAGETABLE_ENTRIES</span>
</span><span class='line'>    <span class="p">.</span><span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">l3_table_offset</span><span class="p">(</span><span class="n">XEN_VIRT_START</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_xenmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="p">.</span><span class="n">elseif</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">l3_table_offset</span><span class="p">(</span><span class="n">FIXADDR_TOP</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_fixmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="p">.</span><span class="k">else</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endif</span>
</span><span class='line'>    <span class="n">idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">l3_xenmap</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">l3_xenmap</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们这里只需要关注这个<code>l2_xenmap</code>，也就是<code>l3_xenmap</code>的第322项（l3_table_offset(XEN_VIRT_START)），里面0~7项以2M大页的方式映射了<code>__image_base__</code>的内容：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>     <span class="p">((</span><span class="n">sym</span><span class="p">)</span> <span class="o">-</span> <span class="n">__XEN_VIRT_START</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">image_base</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L2_PAGETABLE_SHIFT</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">PAGE_HYPERVISOR</span> <span class="o">|</span> <span class="n">_PAGE_PSE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们可以从<code>xen/arch/x86/xen.lds.S</code>文件中看到：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">XEN_VIRT_START</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">image_base__</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>也就是说，<code>__image_base__</code>即为<code>__XEN_VIRT_START</code>的地址，所以，<code>l2_xenmap</code>映射的内存也是0~16M的物理内存。</p>

<p>再来看<code>l3_identmap</code>，可以从下面的代码看出来，<code>l3_identmap</code>的0~3项映射了4个连续的第二级页表页，以<code>l2_identmap</code>作为起始地址。而<code>l2_identmap</code>和<code>l2_bootmap</code>一样，也是第0项映射了一个L1的页表页<code>l1_identmap</code>，第1~7项以7个2M大页的形式映射了2~16M的物理内存。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Mapping</span> <span class="n">of</span> <span class="n">first</span> <span class="mi">16</span> <span class="n">megabytes</span> <span class="n">of</span> <span class="n">memory</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">l2_identmap</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l1_identmap</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="n">pfn</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="mi">7</span>
</span><span class='line'>    <span class="n">pfn</span> <span class="o">=</span> <span class="n">pfn</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGETABLE_ORDER</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="p">(</span><span class="n">pfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">|</span> <span class="n">PAGE_HYPERVISOR</span> <span class="o">|</span> <span class="n">_PAGE_PSE</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fill</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">L2_PAGETABLE_ENTRIES</span> <span class="o">-</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">l2_identmap</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">l2_identmap</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">GLOBAL</span><span class="p">(</span><span class="n">l3_identmap</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_identmap</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="n">idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fill</span> <span class="n">L3_PAGETABLE_ENTRIES</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">l3_identmap</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">l3_identmap</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最后我们来看<code>l1_identmap</code>，它位于<code>xen/arch/x86/boot/head.S</code>文件中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Mapping</span> <span class="n">of</span> <span class="n">first</span> <span class="mi">2</span> <span class="n">megabytes</span> <span class="n">of</span> <span class="n">memory</span><span class="p">.</span> <span class="n">This</span> <span class="n">is</span> <span class="n">mapped</span> <span class="n">with</span> <span class="mi">4</span><span class="n">kB</span> <span class="n">mappings</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">avoid</span> <span class="n">type</span> <span class="n">conflicts</span> <span class="n">with</span> <span class="n">fixed</span><span class="o">-</span><span class="n">range</span> <span class="n">MTRRs</span> <span class="n">covering</span> <span class="n">the</span> <span class="n">lowest</span> <span class="n">megabyte</span>
</span><span class='line'> <span class="o">*</span> <span class="n">of</span> <span class="n">physical</span> <span class="n">memory</span><span class="p">.</span> <span class="n">In</span> <span class="n">any</span> <span class="k">case</span> <span class="n">the</span> <span class="n">VGA</span> <span class="n">hole</span> <span class="n">should</span> <span class="n">be</span> <span class="n">mapped</span> <span class="n">with</span> <span class="n">type</span> <span class="n">UC</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">l1_identmap</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">pfn</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="n">L1_PAGETABLE_ENTRIES</span>
</span><span class='line'>    <span class="cm">/* VGA hole (0xa0000-0xc0000) should be mapped UC. */</span>
</span><span class='line'>    <span class="p">.</span><span class="k">if</span> <span class="n">pfn</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mh">0xa0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">pfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mh">0xc0</span>
</span><span class='line'>    <span class="p">.</span><span class="kt">long</span> <span class="p">(</span><span class="n">pfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">|</span> <span class="n">PAGE_HYPERVISOR_NOCACHE</span> <span class="o">|</span> <span class="n">MAP_SMALL_PAGES</span>
</span><span class='line'>    <span class="p">.</span><span class="k">else</span>
</span><span class='line'>    <span class="p">.</span><span class="kt">long</span> <span class="p">(</span><span class="n">pfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">|</span> <span class="n">PAGE_HYPERVISOR</span> <span class="o">|</span> <span class="n">MAP_SMALL_PAGES</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endif</span>
</span><span class='line'>    <span class="p">.</span><span class="kt">long</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">pfn</span> <span class="o">=</span> <span class="n">pfn</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">l1_identmap</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">l1_identmap</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到它其实就是以4K的正常页的方式映射了0~2M的物理内存地址空间。</p>

<p>到此为止，我们可以画一张最基本的页表分布图：</p>

<p><img src="http://ytliu.info/images/2015-07-30-1.png" title="xen boot pagetable 1" alt="xen boot pagetable 1" /></p>

<hr />

<p>好了，到现在为止，我们介绍了在进入<code>__start_xen</code>之前，页表是如何初始化的，在这个过程中，0~16M（即Xen的代码和数据）的物理内存被映射在了三段虚拟内存空间中，它们分别是：</p>

<ul>
<li>0~16M的的虚拟地址空间；</li>
<li>XEN_VIRT_STAET ~ XEN_VIRT_START + 16M，即0xffff82d080000000~0xffff82d081000000的虚拟地址空间中；</li>
<li>DIRECTMAP_VIRT_START ~ DIRECTMAP_VIRT_START + 16M，即0xffff830000000000~0xffff830001000000的虚拟地址空间中</li>
</ul>


<p>接下来，在<code>__start_xen</code>的代码中将对这段虚拟内存空间进行一次调整，并且将其他物理内存映射到相应的虚拟内存空间中，同时在不同的阶段初始化不同的内存分配器。具体来说，它将完成以下几个内存相关的步骤：</p>

<ul>
<li>获取E820物理内存分布；</li>
<li>将16M~4G的内存空间进行大页的映射，同时将0~16M的地址空间映射到更高的虚拟地址空间中；</li>
<li>计算modules（kernel和initrd）的地址，并且预留内存空间给它们；</li>
<li>遍历所有的物理内存，将它们映射到虚拟地址空间中，对于16M~4G的内存，会把原来的小页（4K page）也进行映射，并且通过<code>init_boot_pages</code>创建boot内存分配器，对于4G以上的内存，直接映射（1G，2M或者4K）的页；</li>
<li>将modules的内存映射到Xen的虚拟地址空间中；</li>
<li>初始化frametable；</li>
<li>end_boot_allocator，并且初始化堆分配器；</li>
<li>创建页表中其它虚拟地址空间的映射；</li>
<li>初始化Domain-0的内存</li>
</ul>


<p>除了最后一个步骤，其它步骤都会在接下来的部分进行介绍。</p>

<h4>获取E820物理内存分布</h4>

<p>什么是E820？其实就是BIOS的一个中断（具体来说是<code>int 0x15</code>），在触发这个中断时如果<code>EAX</code>是<code>0xe820</code>，那么BIOS就能返回系统的物理内存布局。由于系统内存会有很多段，而且每段的类型属性也不一样，所以我们得到的E820内存分布也被分成了很多个不同类型的内存段。</p>

<p>在Xen的<code>__start_xen</code>代码里，会通过下列代码来打印出当前系统物理内存的分段情况：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* Sanitise the raw E820 map to produce a final clean version. */</span>
</span><span class='line'><span class="n">max_page</span> <span class="o">=</span> <span class="n">raw_max_page</span> <span class="o">=</span> <span class="n">init_e820</span><span class="p">(</span><span class="n">memmap_type</span><span class="p">,</span> <span class="n">e820_raw</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">e820_raw_nr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Create a temporary copy of the E820 map. */</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">boot_e820</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">e820</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">e820</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>通过命令：</p>

<pre><code>$ xl dmesg
</code></pre>

<p>可以看到系统E820的分布情况，比如我的E820是这样的：</p>

<p><img src="http://ytliu.info/images/2015-07-30-2.png" title="xen e820" alt="xen e820" /></p>

<p>这是我在自己计算机上启动Xen所得到的数据，其中usable的区间就是实际被映射到物理内存上的地址空间，可以看到在我的例子中有七个可用的物理地址区间，大约32GB：</p>

<pre><code>0000000000000000 - 0000000000058000 (usable) ~352K
0000000000059000 - 00000000000a0000 (usable) ~156K
0000000000100000 - 00000000a63d9000 (usable) ~2659M
00000000a63e0000 - 00000000a7404000 (usable) ~4M
00000000a7961000 - 00000000b9f97000 (usable) ~295M
00000000bafff000 - 00000000bb000000 (usable) ~4K
0000000100000000 - 000000083f600000 (usable) ~29686M
</code></pre>

<p>其它几个选项代表不同的意思，如下所示（参考<a href="http://deltamaster.is-programmer.com/posts/37297.html">这里</a>）：</p>

<ul>
<li>Usable：已经被映射到物理内存的物理地址；</li>
<li>Reserved：这些区间是没有被映射到任何地方，不能当作RAM来使用，但是kernel可以决定将这些区间映射到其他地方，比如PCI设备。通过检查<code>/proc/iomem</code>这个虚拟文件，就可以知道这些reserved的空间，是如何进一步分配给不同的设备来使用了。</li>
<li>ACPI data：映射到用来存放ACPI数据的RAM空间，操作系统应该将ACPI Table读入到这个区间内。</li>
<li>ACPI NVS：映射到用来存放ACPI数据的非易失性存储空间，操作系统不能使用。</li>
<li>Unusable：表示检测到发生错误的物理内存。这个在上面例子里没有，因为比较少见。</li>
</ul>


<p>得到这些物理内存的分布之后，我们就需要将可用（usable）的那些映射到对应的虚拟地址空间中了。</p>

<h4>第一轮映射</h4>

<p>在第一轮映射中，主要是将16M~4G的物理内存以大页（2M page）的形式映射到对应的虚拟地址空间，同时将0~16M的地址空间从原来的0~16M的虚拟地址空间映射到更高的虚拟地址空间中，这是由于一些兼容性的原因，因为大部分系统0~16M虚拟地址空间是有其它作用的。</p>

<p>这一段代码非常复杂，这里就不详细说明了，主要是要注意以下几点：</p>

<ul>
<li>这里有两个阈值：<code>BOOTSTRAP_MAP_BASE</code>和<code>limit</code>：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">BOOTSTRAP_MAP_BASE</span> <span class="p">(</span><span class="mi">16UL</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">20</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">limit</span> <span class="o">=</span> <span class="n">ARRAY_SIZE</span><span class="p">(</span><span class="n">l2_identmap</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L2_PAGETABLE_SHIFT</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>它们最后的取值分别是16M和4G。当物理内存地址位于16M~4G时，且是usable的时候，会通过<code>map_pages_to_xen</code>函数将它们map到对应的虚拟内存中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">s</span> <span class="o">=</span> <span class="n">max_t</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">BOOTSTRAP_MAP_BASE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">boot_e820</span><span class="p">.</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">type</span> <span class="o">!=</span> <span class="n">E820_RAM</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">e</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">limit</span><span class="p">);</span>
</span><span class='line'>        <span class="n">set_pdx_range</span><span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">end</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'>        <span class="n">map_pages_to_xen</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">__va</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span>
</span><span class='line'>                         <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>正如在<a href="http://ytliu.info/blog/2015/07/28/xende-nei-cun-bu-ju/">上篇博客</a>提到过的，这里<code>__va(s)</code>即将物理地址s映射在direct map的那一段内存中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">__maddr_to_virt</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ma</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ASSERT</span><span class="p">(</span><span class="n">pfn_to_pdx</span><span class="p">(</span><span class="n">ma</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">DIRECTMAP_SIZE</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">));</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">DIRECTMAP_VIRT_START</span> <span class="o">+</span>
</span><span class='line'>                <span class="p">((</span><span class="n">ma</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">ma_va_bottom_mask</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>                 <span class="p">((</span><span class="n">ma</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">ma_top_mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">pfn_pdx_hole_shift</span><span class="p">)));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">maddr_to_virt</span><span class="p">(</span><span class="n">ma</span><span class="p">)</span>   <span class="n">__maddr_to_virt</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)(</span><span class="n">ma</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">__va</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>             <span class="p">(</span><span class="n">maddr_to_virt</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以所有16M~4G的物理内存<code>s</code>都被映射在了<code>s+DIRECTMAP_VIRT_START</code>的那段虚拟内存中，比如物理内存<code>0x1000000</code>(16M)被映射在了<code>0xffff830001000000</code>虚拟地址上。</p>

<ul>
<li>另外一点需要注意的是，在这个过程中，并不需要分配新的页表，而且在这个阶段并没有初始化任何内存分配器，所以也无法分配新的内存页来作为页表。那么它是如何做到这点的呢？</li>
</ul>


<p>如果对之前提到的页表有印象的话，应该还记得，我们在<code>l3_identmap</code>中创建了4个<code>l2_identmap</code>页表项：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">l3_identmap</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">rept</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">.</span><span class="n">quad</span> <span class="n">sym_phys</span><span class="p">(</span><span class="n">l2_identmap</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">+</span> <span class="n">__PAGE_HYPERVISOR</span>
</span><span class='line'>    <span class="n">idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>    <span class="p">.</span><span class="n">fill</span> <span class="n">L3_PAGETABLE_ENTRIES</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">.</span><span class="n">size</span> <span class="n">l3_identmap</span><span class="p">,</span> <span class="p">.</span> <span class="o">-</span> <span class="n">l3_identmap</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中只有第一个<code>l2_identmap</code>的前8项（0~16M）被初始化了，而其余的并没有初始化。一个常识是，每一个L3页表项代表了1个G的内存，那么我们有4个L3的页表项，那么就代表了4G的内存！而且所有这些页表项指向的L2的页表也已经存在了，所以说不需要重新分配新的页表页，就能够处理4G以内的所有以大页形式描述的内存了。</p>

<ul>
<li>最后一个问题，也就是如何将0~16M的物理内存映射到更高的虚拟地址空间中？</li>
</ul>


<p>在这里我就不具体说它是如何重映射的了，无非就是找到一个连续的地址空间，然后将内存从0~16M拷贝到新的地址空间，并且将原来的page table entries的内容拷贝到新的page table entries。这里来说下它是如何选择这块新的虚拟地址空间的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">reloc_size</span> <span class="p">((</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_pa</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span><span class="p">)</span> <span class="o">+</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">mask</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="cm">/* Is the region suitable for relocating Xen? */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">xen_phys_start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">e</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">limit</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Don&#39;t overlap with modules. */</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">consider_modules</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">reloc_size</span> <span class="o">+</span> <span class="n">mask</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">mod</span><span class="p">,</span> <span class="n">mbi</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mods_count</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="o">~</span><span class="n">mask</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">end</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">s</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">l4_pgentry_t</span> <span class="o">*</span><span class="n">pl4e</span><span class="p">;</span>
</span><span class='line'>        <span class="n">l3_pgentry_t</span> <span class="o">*</span><span class="n">pl3e</span><span class="p">;</span>
</span><span class='line'>        <span class="n">l2_pgentry_t</span> <span class="o">*</span><span class="n">pl2e</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">uint64_t</span> <span class="n">load_start</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Select relocation address. */</span>
</span><span class='line'>        <span class="n">e</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">reloc_size</span><span class="p">;</span>
</span><span class='line'>        <span class="n">xen_phys_start</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">load_start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">_start</span> <span class="o">-</span> <span class="n">XEN_VIRT_START</span><span class="p">;</span>
</span><span class='line'>        <span class="n">barrier</span><span class="p">();</span>
</span><span class='line'>        <span class="n">move_memory</span><span class="p">(</span><span class="n">e</span> <span class="o">+</span> <span class="n">load_start</span><span class="p">,</span> <span class="n">load_start</span><span class="p">,</span> <span class="n">_end</span> <span class="o">-</span> <span class="n">_start</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="c1">// update page tables and reload cr3 to invalidate TLB.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里有几个重要的变量：<code>end</code>，<code>reloc_size</code>。</p>

<p>对于<code>end</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="n">end</span> <span class="o">=</span> <span class="n">consider_modules</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">reloc_size</span> <span class="o">+</span> <span class="n">mask</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">mod</span><span class="p">,</span> <span class="n">mbi</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mods_count</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们暂且不需要知道<code>consider_modules</code>是如何计算的，这个步骤主要是要得出在0~4G的物理地址空间中，最大的那个usable的，并且是2M对其的那个地址。从E820可以看出，4G之内最大的那个地址段是<code>00000000a7961000 - 00000000b9f97000</code>，而里面最大的2M对齐的地址即为<code>0xb9e00000</code>。</p>

<p>而对于<code>reloc_size</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">reloc_size</span> <span class="p">((</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_pa</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span><span class="p">)</span> <span class="o">+</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">mask</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>_end</code>是Xen的代码和数据段的结束的地址，它在<code>xen.lds.S</code>中定义，它表示的是xen的所有代码和数据的最大的内存地址。所以<code>reloc_size</code>即表示xen的代码和数据段所占的内存空间有多大（最后会被1M向上对齐）。在我的系统中，它是0x400000，即4M的大小。</p>

<p>所以，这段需要被relocate的地址<code>xen_phys_start</code>即为<code>end - reloc_size</code>，所以说，Xen的代码和数据段最后被重映射到了4G内存之内的最大的地址空间中。可以看到，Xen先通过<code>move_memory</code>将内容拷贝到高地址，然后再更新页表。</p>

<h4>第二轮映射</h4>

<p>在第二轮映射中，它会遍历所有的物理内存（包括小于16M和大于4G的内存），将它们映射到虚拟地址空间中。对于0~4G的内存，会把原来未映射的小页（4K page）也进行映射，而对于4G以上的内存，则直接映射（1G，2M或者4K）的页。并且它还通过<code>init_boot_pages</code>将所有可用的物理页加入数据结构<code>bootmem_region_list</code>中，建立boot内存分配器，用于在boot阶段分配内存。</p>

<p>这是这段代码的主体部分。在这段代码中有好多个条件判断，主要作用就是将需要映射的物理内存的地址范围做一个划分，我们通过注释来说明这个过程。</p>

<p>首先通过一张图来更好地解释其划分的依据：</p>

<p><img src="http://ytliu.info/images/2015-07-30-3.png" title="xen memory mapping helper" alt="xen memory mapping helper" /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">boot_e820</span><span class="p">.</span><span class="n">nr_map</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint64_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">PAGE_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="cm">/* 最小对齐为4K页粒度 */</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">boot_e820</span><span class="p">.</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">addr</span> <span class="o">+</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">mask</span><span class="p">;</span> <span class="cm">/* 起始地址4K向上对齐 */</span>
</span><span class='line'>    <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">boot_e820</span><span class="p">.</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">addr</span> <span class="o">+</span> <span class="n">boot_e820</span><span class="p">.</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">mask</span><span class="p">;</span> <span class="cm">/* 尾地址4K向下对齐 */</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">max_t</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">20</span><span class="p">);</span> <span class="cm">/* 1M地址以内的不进行考虑 */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">boot_e820</span><span class="p">.</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">type</span> <span class="o">!=</span> <span class="n">E820_RAM</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">e</span><span class="p">)</span> <span class="p">)</span> <span class="cm">/* 只考虑usable的内存 */</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">set_pdx_range</span><span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">e</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span> <span class="cm">/* 设置pdx_range，之后具体介绍 */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 以下开始对内存范围进行划分，划分的两个重要依据是图中的A点（16M）和B点（4G） */</span>
</span><span class='line'>    <span class="n">map_s</span> <span class="o">=</span> <span class="n">max_t</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">BOOTSTRAP_MAP_BASE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">map_e</span> <span class="o">=</span> <span class="n">min_t</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">ARRAY_SIZE</span><span class="p">(</span><span class="n">l2_identmap</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L2_PAGETABLE_SHIFT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init_boot_pages</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">min</span><span class="p">(</span><span class="n">map_s</span><span class="p">,</span> <span class="n">e</span><span class="p">));</span> <span class="cm">/* 先将A点以下的内存区域加入boot分配器 */</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">map_s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">map_e</span> <span class="p">)</span> <span class="cm">/* 将A点到e或者B点（如果e大于B点）的大页内存区域加入boot分配器 */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">uint64_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L2_PAGETABLE_SHIFT</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">map_s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">mask</span><span class="p">;</span> <span class="cm">/* 首地址2M向上对齐 */</span>
</span><span class='line'>        <span class="n">map_e</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="o">~</span><span class="n">mask</span><span class="p">;</span> <span class="cm">/* 尾地址2M向下对齐 */</span>
</span><span class='line'>        <span class="n">init_boot_pages</span><span class="p">(</span><span class="n">map_s</span><span class="p">,</span> <span class="n">map_e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">map_s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">map_e</span> <span class="p">)</span> <span class="cm">/* 如果内存范围在A点之内，则这个过程结束 */</span>
</span><span class='line'>        <span class="n">map_s</span> <span class="o">=</span> <span class="n">map_e</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">map_e</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">e</span> <span class="p">)</span>  <span class="cm">/* 如果e位在B点之上 */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">uint64_t</span> <span class="n">limit</span> <span class="o">=</span> <span class="n">__pa</span><span class="p">(</span><span class="n">HYPERVISOR_VIRT_END</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">uint64_t</span> <span class="n">end</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">limit</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">map_e</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span> <span class="p">)</span> <span class="cm">/* 先映射B点到HYPERVISOR_VIRT_END的地址空间，并且将其加入boot内存分配器 */</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">map_pages_to_xen</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">__va</span><span class="p">(</span><span class="n">map_e</span><span class="p">),</span> <span class="n">PFN_DOWN</span><span class="p">(</span><span class="n">map_e</span><span class="p">),</span>
</span><span class='line'>                             <span class="n">PFN_DOWN</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">map_e</span><span class="p">),</span> <span class="n">PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'>            <span class="n">init_boot_pages</span><span class="p">(</span><span class="n">map_e</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>            <span class="n">map_e</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">map_e</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">e</span> <span class="p">)</span> <span class="cm">/* 映射HYPERVISOR_VIRT_END到e的地址空间 */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* This range must not be passed to the boot allocator and</span>
</span><span class='line'><span class="cm">         * must also not be mapped with _PAGE_GLOBAL. */</span>
</span><span class='line'>        <span class="n">map_pages_to_xen</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">__va</span><span class="p">(</span><span class="n">map_e</span><span class="p">),</span> <span class="n">PFN_DOWN</span><span class="p">(</span><span class="n">map_e</span><span class="p">),</span>
</span><span class='line'>                         <span class="n">PFN_DOWN</span><span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">map_e</span><span class="p">),</span> <span class="n">__PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">map_s</span> <span class="p">)</span> <span class="cm">/* 将A点到B点的4K页内存区域进行映射，并且加入boot分配器 */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">map_pages_to_xen</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">__va</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span>
</span><span class='line'>                         <span class="p">(</span><span class="n">map_s</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'>        <span class="n">init_boot_pages</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">map_s</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以这就是划分不同的内存段进行映射，并且将可用的内存加入boot分配器。由于0~4G的内存区域中的2M的大页已经在之前被映射了，所以在这个阶段主要就是把它们加入boot分配器，同时映射4G以上的内存区域。</p>

<p>下面我们来重点分析3个函数：</p>

<ul>
<li><code>set_pdx_range</code></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PDX_GROUP_SHIFT</span> <span class="n">L2_PAGETABLE_SHIFT</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PDX_GROUP_COUNT</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PDX_GROUP_SHIFT</span><span class="p">)</span> <span class="o">/</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                     <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">frame_table</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">frame_table</span><span class="p">)))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">set_pdx_range</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">smfn</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">emfn</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">idx</span><span class="p">,</span> <span class="n">eidx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">idx</span> <span class="o">=</span> <span class="n">pfn_to_pdx</span><span class="p">(</span><span class="n">smfn</span><span class="p">)</span> <span class="o">/</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">;</span>
</span><span class='line'><span class="n">eidx</span> <span class="o">=</span> <span class="p">(</span><span class="n">pfn_to_pdx</span><span class="p">(</span><span class="n">emfn</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">)</span> <span class="o">/</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">eidx</span><span class="p">;</span> <span class="o">++</span><span class="n">idx</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">__set_bit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">pdx_group_valid</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是啥意思呢？比较好理解的是，<code>PDX_GROUP_COUNT</code>表示的是在一个L2大页（2M）的内存中可以装多少个<code>frame_table</code>数据结构。这里有一个比较tricky的地方，就是这个<code>(sizeof(*frame_table) &amp; -sizeof(*frame_table))</code>。这里顺便普及一个知识：</p>

<blockquote><p>“x &amp; -x” means that the greatest power of 2 that is a factor of x.</p></blockquote>

<p>在我们这里，<code>sizeof(*frame_table)</code>的值是0x20，所以<code>PDX_GROUP_COUNT</code>即为<code>0x10000（64K）</code>。</p>

<p>另外如果跟进代码的话会发现，<code>pfn_to_pdx(pfn)</code>其实就是<code>pfn</code>，所以<code>set_pdx_range</code>即找到<code>smfn</code>到<code>emfn</code>所对应的那些2M的大页，并且把<code>pdx_group_valid</code>中对应的bit给设上，表示说这些内存空间对应的pdx是valid的，这在之后有用。</p>

<ul>
<li><code>init_boot_pages</code></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">bootmem_region_add</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">s</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">bootmem_region_list</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">e</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">bootmem_region_list</span> <span class="o">=</span> <span class="n">mfn_to_virt</span><span class="p">(</span><span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">e</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nr_bootmem_regions</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">bootmem_region_list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">e</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">memmove</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">bootmem_region_list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">bootmem_region_list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>
</span><span class='line'>        <span class="p">(</span><span class="n">nr_bootmem_regions</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">bootmem_region_list</span><span class="p">));</span>
</span><span class='line'><span class="n">bootmem_region_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">bootmem_region</span><span class="p">)</span> <span class="p">{</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span> <span class="p">};</span>
</span><span class='line'><span class="n">nr_bootmem_regions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">__init</span> <span class="n">init_boot_pages</span><span class="p">(</span><span class="n">paddr_t</span> <span class="n">ps</span><span class="p">,</span> <span class="n">paddr_t</span> <span class="n">pe</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ps</span> <span class="o">=</span> <span class="n">round_pgup</span><span class="p">(</span><span class="n">ps</span><span class="p">);</span>
</span><span class='line'><span class="n">pe</span> <span class="o">=</span> <span class="n">round_pgdown</span><span class="p">(</span><span class="n">pe</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">pe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">ps</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">bootmem_region_add</span><span class="p">(</span><span class="n">ps</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">pe</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这段代码非常简单，就是将ps到pe的内存空间给加到<code>bootmem_region_list</code>中，之后进行分配内存的时候会被用到。</p>

<ul>
<li><code>map_pages_to_xen</code></li>
</ul>


<p>这个函数特别复杂，也是Xen里面非常重要的一个函数：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">map_pages_to_xen</span><span class="p">(</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">virt</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">mfn</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nr_mfns</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里就不展开来说，它所做的就是将以<code>virt</code>开头的<code>nr_mfns</code>个页映射到<code>mfn</code>的物理地址空间中。它的做法就是从<code>idle_page_table</code>开始走页表，最后凑齐所有的龙珠，哦不，所有的页表，然后在最后一级页表对应的页表项上写上mfn及其相应的flags。需要注意的是，它会根据你的虚拟地址来判断是否要用大页，以及用多大的大页（1G or 2M）。当然，如果需要新建一个页表，在boot阶段会通过<code>alloc_boot_pages(nr_pfns, pfn_align)</code>来分配对应的内存页：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">__init</span> <span class="n">alloc_boot_pages</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nr_pfns</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">pfn_align</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nr_bootmem_regions</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">bootmem_region</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">bootmem_region_list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pg</span> <span class="o">=</span> <span class="p">(</span><span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e</span> <span class="o">-</span> <span class="n">nr_pfns</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="p">(</span><span class="n">pfn_align</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">pg</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_e</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e</span> <span class="o">=</span> <span class="n">pg</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bootmem_region_add</span><span class="p">(</span><span class="n">pg</span> <span class="o">+</span> <span class="n">nr_pfns</span><span class="p">,</span> <span class="n">_e</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pg</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOT_BUG_ON</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其实也就是从我们之前通过<code>init_boot_pages</code>加到<code>bootmem_region_list</code>的内存来获取相应的内存页。这里就不详述了。</p>

<h4>modules（kernel，initrd）的内存映射</h4>

<p>这个步骤非常简单，就是运行了下面这段代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mbi</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mods_count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">set_pdx_range</span><span class="p">(</span><span class="n">mod</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mod_start</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">mod</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mod_start</span> <span class="o">+</span> <span class="n">PFN_UP</span><span class="p">(</span><span class="n">mod</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mod_end</span><span class="p">));</span>
</span><span class='line'>    <span class="n">map_pages_to_xen</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">mfn_to_virt</span><span class="p">(</span><span class="n">mod</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mod_start</span><span class="p">),</span>
</span><span class='line'>                     <span class="n">mod</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mod_start</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">PFN_UP</span><span class="p">(</span><span class="n">mod</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mod_end</span><span class="p">),</span> <span class="n">PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这些函数之前都介绍过了，这里就不具体讲了。一般情况下，系统中会有两个modules，一个是kernel，还有一个是initrd，所以这个循环会进行两次，每次将不同的module映射到对应的地址空间。</p>

<h4><code>page_info</code>数据结构列表FrameTable的初始化</h4>

<p>这个过程对应的函数是<code>init_frametable</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">init_frametable_chunk</span><span class="p">(</span><span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">start</span><span class="p">,</span> <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">e</span><span class="p">;</span> <span class="n">s</span> <span class="o">+=</span> <span class="n">step</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">step</span> <span class="o">=</span> <span class="mi">1UL</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">cpu_has_page1gb</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                   <span class="o">!</span><span class="p">(</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">((</span><span class="mi">1UL</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">L3_PAGETABLE_SHIFT</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">?</span>
</span><span class='line'>                   <span class="n">L3_PAGETABLE_SHIFT</span> <span class="o">-</span> <span class="n">PAGE_SHIFT</span> <span class="o">:</span>
</span><span class='line'>                   <span class="n">L2_PAGETABLE_SHIFT</span> <span class="o">-</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">step</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">s</span> <span class="o">+</span> <span class="p">(</span><span class="n">step</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">e</span> <span class="o">+</span> <span class="p">(</span><span class="mi">4</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">step</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">PAGETABLE_ORDER</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mfn</span> <span class="o">=</span> <span class="n">alloc_boot_pages</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">step</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="n">mfn</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">step</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">PAGETABLE_ORDER</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">mfn</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">panic</span><span class="p">(</span><span class="s">&quot;Not enough memory for frame table&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">map_pages_to_xen</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">mfn</span><span class="p">,</span> <span class="n">step</span><span class="p">,</span> <span class="n">PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span> <span class="o">-</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">__init</span> <span class="n">init_frametable</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">max_idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">max_pdx</span> <span class="o">+</span> <span class="n">PDX_GROUP_COUNT</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="n">sidx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">;</span> <span class="n">sidx</span> <span class="o">=</span> <span class="n">nidx</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">eidx</span> <span class="o">=</span> <span class="n">find_next_zero_bit</span><span class="p">(</span><span class="n">pdx_group_valid</span><span class="p">,</span> <span class="n">max_idx</span><span class="p">,</span> <span class="n">sidx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">nidx</span> <span class="o">=</span> <span class="n">find_next_bit</span><span class="p">(</span><span class="n">pdx_group_valid</span><span class="p">,</span> <span class="n">max_idx</span><span class="p">,</span> <span class="n">eidx</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">nidx</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">max_idx</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">init_frametable_chunk</span><span class="p">(</span><span class="n">pdx_to_page</span><span class="p">(</span><span class="n">sidx</span> <span class="o">*</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">),</span>
</span><span class='line'>                          <span class="n">pdx_to_page</span><span class="p">(</span><span class="n">eidx</span> <span class="o">*</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">end_pg</span> <span class="o">=</span> <span class="n">pdx_to_page</span><span class="p">(</span><span class="n">max_pdx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">top_pg</span> <span class="o">=</span> <span class="n">mem_hotplug</span> <span class="o">?</span> <span class="n">pdx_to_page</span><span class="p">(</span><span class="n">max_idx</span> <span class="o">*</span> <span class="n">PDX_GROUP_COUNT</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                     <span class="o">:</span> <span class="n">end_pg</span><span class="p">;</span>
</span><span class='line'><span class="n">init_frametable_chunk</span><span class="p">(</span><span class="n">pdx_to_page</span><span class="p">(</span><span class="n">sidx</span> <span class="o">*</span> <span class="n">PDX_GROUP_COUNT</span><span class="p">),</span> <span class="n">top_pg</span><span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">end_pg</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">top_pg</span> <span class="o">-</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">end_pg</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在搞清楚这段代码之前，我们需要先有一个概念。frametable其实是位于<code>0xffff82e000000000 - 0xffff82ffffffffff</code>内存中的一堆<code>struct page_info</code>的数据结构，每一个<code>page_info</code>记录了一个物理页的相应的信息。另外，之前提到的那个<code>pdx</code>，全称为<code>page descriptor index</code>，在我的机器上，有大约32G的内存，也就是从<code>0x0~0x83f600000</code>。前面计算过<code>PDX_GROUP_COUNT</code>为<code>0x10000</code>，所以在我的机器中最大的pdx即为<code>0x83f600000 &gt;&gt; 12 &gt;&gt; 16 = 84</code>（向上对齐）。</p>

<p>所以这段代码就是找到从0到84中所有在之前通过<code>set_pdx_range</code>设上的pdx，然后将其映射到对应的<code>page_info</code>的内存上。在我的机器上，<code>0x0~0xc</code>，以及<code>0x10~0x84</code>是在之前通过<code>set_pdx_range</code>设上的pdx，所以通过<code>init_frametable_chunk</code>将它们对应的<code>page_info</code>映射到frametable的虚拟地址空间中。</p>

<ul>
<li>堆分配器的初始化</li>
</ul>


<p>在前面的所有操作完成之后，<code>__start_xen</code>会调用<code>end_boot_allocator()</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__init</span> <span class="nf">end_boot_allocator</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nr_bootmem_regions</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">bootmem_region</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">bootmem_region_list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">init_heap_pages</span><span class="p">(</span><span class="n">mfn_to_page</span><span class="p">(</span><span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">),</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">e</span> <span class="o">-</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">init_heap_pages</span><span class="p">(</span><span class="n">virt_to_page</span><span class="p">(</span><span class="n">bootmem_region_list</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>它会调用<code>init_heap_pages</code>初始化堆分配器。</p>

<p>堆分配器是Xen的主内存分配器,这是一个和Linux的内存分配器类似的分配器。这里就不对其进行介绍了，反正之后的内存分配都是依靠这个堆分配器了。</p>

<ul>
<li>其它虚拟地址空间在页表中的映射</li>
</ul>


<p>到此为止，变量<code>system_state</code>已经从<code>SYS_STATE_early_boot</code>变成了<code>SYS_STATE_boot</code>。之后所有的内存分配也从boot allocator变成了<code>alloc_xenheap_page()</code>或者<code>alloc_domheap_page()</code>。另外Xen已经将所有的物理内存都映射到了<code>DIRECTMAP_VIRT_START</code>到<code>DIRECTMAP_VIRT_END</code>之间。</p>

<p>接下来就是对虚拟地址空间中其它区域进行映射。在<a href="http://ytliu.info/blog/2015/07/28/xende-nei-cun-bu-ju/">上篇博客</a>里面提到在Xen的虚拟地址空间中还有好多其它区域，比如MPT，vmap等。这些区域也需要在xen启动的时候进行初始化，主要通过下面两个函数：</p>

<ul>
<li><code>vm_init()</code>：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">vm_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">nr</span><span class="p">;</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">va</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">vm_base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">VMAP_VIRT_START</span><span class="p">;</span>
</span><span class='line'> <span class="n">vm_end</span> <span class="o">=</span> <span class="n">PFN_DOWN</span><span class="p">(</span><span class="n">arch_vmap_virt_end</span><span class="p">()</span> <span class="o">-</span> <span class="n">vm_base</span><span class="p">);</span>
</span><span class='line'> <span class="n">vm_low</span> <span class="o">=</span> <span class="n">PFN_UP</span><span class="p">((</span><span class="n">vm_end</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'> <span class="n">nr</span> <span class="o">=</span> <span class="n">PFN_UP</span><span class="p">((</span><span class="n">vm_low</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'> <span class="n">vm_top</span> <span class="o">=</span> <span class="n">nr</span> <span class="o">*</span> <span class="n">PAGE_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">va</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">vm_bitmap</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nr</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="n">va</span> <span class="o">+=</span> <span class="n">PAGE_SIZE</span> <span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">struct</span> <span class="n">page_info</span> <span class="o">*</span><span class="n">pg</span> <span class="o">=</span> <span class="n">alloc_domheap_page</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">map_pages_to_xen</span><span class="p">(</span><span class="n">va</span><span class="p">,</span> <span class="n">page_to_mfn</span><span class="p">(</span><span class="n">pg</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">PAGE_HYPERVISOR</span><span class="p">);</span>
</span><span class='line'>     <span class="n">clear_page</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">va</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="n">bitmap_fill</span><span class="p">(</span><span class="n">vm_bitmap</span><span class="p">,</span> <span class="n">vm_low</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="cm">/* Populate page tables for the bitmap if necessary. */</span>
</span><span class='line'> <span class="n">map_pages_to_xen</span><span class="p">(</span><span class="n">va</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">vm_low</span> <span class="o">-</span> <span class="n">nr</span><span class="p">,</span> <span class="n">MAP_SMALL_PAGES</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>vm_init()</code>主要就是映射一部分物理内存到VMAP_VIRT_START开始的一段虚拟地址空间中。</p>

<ul>
<li><code>paging_init()</code></li>
</ul>


<p>这个函数复杂很多，它主要用来map好几个不同的machine-to-physical table (MPT)，这些MPT我目前为止还不太清楚用来做什么，之后慢慢补上，以及创建linear guest page table。这里就不详述了。</p>

<p>到目前为止，Xen启动阶段内存的虚拟化就告一段落了，接下来就要进行CPU、设备的初始化，以及Domain-0的创建了。关于Domain-0的创建会在下一篇博文中进行介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xen的内存布局]]></title>
    <link href="http://ytliu.github.io/blog/2015/07/28/xende-nei-cun-bu-ju/"/>
    <updated>2015-07-28T21:06:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/07/28/xende-nei-cun-bu-ju</id>
    <content type="html"><![CDATA[<p>我会在接下来几篇博客里面介绍Xen的memory。这些都是我在看了各种资料，并且研究了Xen的代码之后的个人总结。之所以写这个系列，是感觉现在网络上没有什么比较具体介绍Xen内存的资料，<a href="http://bbs.chinacloud.cn/attachment.aspx?attachmentid=397">这里</a>有一个，但是是比较老的版本，而且主要介绍的是32位的系统。而我现在看的是Xen最新的版本（4.6），然后介绍的主要是64位的系统，希望能把自己花时间学到的东西分享出去。如果有什么错误的，或者解释的不清楚的地方，也希望各位指出来，共同讨论。</p>

<p>我应该会从五个方面来介绍Xen的内存：</p>

<ul>
<li><a href="http://ytliu.info/blog/2015/07/28/xende-nei-cun-bu-ju/">Xen的内存布局总体概览</a></li>
<li><a href="http://ytliu.info/blog/2015/07/30/xende-qi-dong-zhi-nei-cun-xiang-guan-shi-xian/">Xen启动的内存相关实现</a></li>
<li>Domain-0启动的内存相关实现</li>
<li>Domain-U启动的内存相关实现</li>
<li>虚拟机运行时内存相关实现</li>
</ul>


<p>现在我也还在研究中，所以这些应该会随着我自己学习的深入慢慢的进行整理。</p>

<p>好啦，不说废话了，直接进入这篇博客的主题：Xen内存布局的总体概览。</p>

<!-- more -->


<p>一般情况下我们讨论一个虚拟化系统中的内存，我们主要考虑的是客户虚拟机的内存机制，所以我们会提到shadow page table（影子页表），或者硬件内存虚拟化机制EPT（for Intel）/NPT（for AMD）等。然而这些其实都是针对于客户虚拟机来说的，也就是说对于客户虚拟机来说，它所看到的内存是怎么样的。但是如果我们从Xen本身的角度来考虑的话，Xen所看到的内存又是怎么样的呢？另外，对于整个系统来说，它的内存又是如何分布的呢？</p>

<p>首先我们要搞清楚几个概念：</p>

<p>第一，Xen有一个自己的页表，它是Xen的虚拟地址到物理地址的映射，这也是我们今天主要介绍的内容；</p>

<p>第二，客户虚拟机也有一个自己的页表，但是这个页表是关于客户虚拟机客户虚拟地址到客户物理地址的映射，Xen帮其维护了一个客户物理地址到机器物理地址的映射，这个会在之后的系列进行详细介绍；</p>

<p>第三，特权级虚拟机（即Domain-0）的内存管理和普通的客户虚拟机的内存管理不同。这也会在之后进行介绍。</p>

<p>好了，大致了解了上述几个概念，我们开始介绍Xen的虚拟内存布局。换句话说，在Xen的内存实现中，不同的虚拟地址范围对应的都是什么物理地址？在第一点里提到的Xen的那个页表到底是如何对虚拟内存进行映射的？</p>

<p>在Xen源码的<code>xen/include/asm-x86/config.h</code>文件中描述了该映射：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Memory</span> <span class="n">layout</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x0000000000000000</span> <span class="o">-</span> <span class="mh">0x00007fffffffffff</span> <span class="p">[</span><span class="mi">128</span><span class="n">TB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">47</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">0</span><span class="o">-</span><span class="mi">255</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Guest</span><span class="o">-</span><span class="n">defined</span> <span class="n">use</span> <span class="p">(</span><span class="n">see</span> <span class="n">below</span> <span class="k">for</span> <span class="n">compatibility</span> <span class="n">mode</span> <span class="n">guests</span><span class="p">).</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x0000800000000000</span> <span class="o">-</span> <span class="mh">0xffff7fffffffffff</span> <span class="p">[</span><span class="mi">16</span><span class="n">EB</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Inaccessible</span><span class="o">:</span> <span class="n">current</span> <span class="n">arch</span> <span class="n">only</span> <span class="n">supports</span> <span class="mi">48</span><span class="o">-</span><span class="n">bit</span> <span class="n">sign</span><span class="o">-</span><span class="n">extended</span> <span class="n">VAs</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff800000000000</span> <span class="o">-</span> <span class="mh">0xffff803fffffffff</span> <span class="p">[</span><span class="mi">256</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">38</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">256</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Read</span><span class="o">-</span><span class="n">only</span> <span class="n">machine</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">phys</span> <span class="n">translation</span> <span class="n">table</span> <span class="p">(</span><span class="n">GUEST</span> <span class="n">ACCESSIBLE</span><span class="p">).</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff804000000000</span> <span class="o">-</span> <span class="mh">0xffff807fffffffff</span> <span class="p">[</span><span class="mi">256</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">38</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">256</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Reserved</span> <span class="k">for</span> <span class="n">future</span> <span class="n">shared</span> <span class="n">info</span> <span class="n">with</span> <span class="n">the</span> <span class="n">guest</span> <span class="n">OS</span> <span class="p">(</span><span class="n">GUEST</span> <span class="n">ACCESSIBLE</span><span class="p">).</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff808000000000</span> <span class="o">-</span> <span class="mh">0xffff80ffffffffff</span> <span class="p">[</span><span class="mi">512</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">257</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">ioremap</span> <span class="k">for</span> <span class="n">PCI</span> <span class="n">mmconfig</span> <span class="n">space</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff810000000000</span> <span class="o">-</span> <span class="mh">0xffff817fffffffff</span> <span class="p">[</span><span class="mi">512</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">258</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Guest</span> <span class="n">linear</span> <span class="n">page</span> <span class="n">table</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff818000000000</span> <span class="o">-</span> <span class="mh">0xffff81ffffffffff</span> <span class="p">[</span><span class="mi">512</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">259</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Shadow</span> <span class="n">linear</span> <span class="n">page</span> <span class="n">table</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff820000000000</span> <span class="o">-</span> <span class="mh">0xffff827fffffffff</span> <span class="p">[</span><span class="mi">512</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">260</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Per</span><span class="o">-</span><span class="n">domain</span> <span class="n">mappings</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="n">GDT</span><span class="p">,</span> <span class="n">LDT</span><span class="p">).</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff828000000000</span> <span class="o">-</span> <span class="mh">0xffff82bfffffffff</span> <span class="p">[</span><span class="mi">256</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">38</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Machine</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">phys</span> <span class="n">translation</span> <span class="n">table</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82c000000000</span> <span class="o">-</span> <span class="mh">0xffff82cfffffffff</span> <span class="p">[</span><span class="mi">64</span><span class="n">GB</span><span class="p">,</span>  <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">36</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">vmap</span><span class="p">()</span><span class="o">/</span><span class="n">ioremap</span><span class="p">()</span><span class="o">/</span><span class="n">fixmap</span> <span class="n">area</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82d000000000</span> <span class="o">-</span> <span class="mh">0xffff82d03fffffff</span> <span class="p">[</span><span class="mi">1</span><span class="n">GB</span><span class="p">,</span>   <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">30</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Compatibility</span> <span class="n">machine</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">phys</span> <span class="n">translation</span> <span class="n">table</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82d040000000</span> <span class="o">-</span> <span class="mh">0xffff82d07fffffff</span> <span class="p">[</span><span class="mi">1</span><span class="n">GB</span><span class="p">,</span>   <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">30</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">High</span> <span class="n">read</span><span class="o">-</span><span class="n">only</span> <span class="n">compatibility</span> <span class="n">machine</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">phys</span> <span class="n">translation</span> <span class="n">table</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82d080000000</span> <span class="o">-</span> <span class="mh">0xffff82d0bfffffff</span> <span class="p">[</span><span class="mi">1</span><span class="n">GB</span><span class="p">,</span>   <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">30</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Xen</span> <span class="n">text</span><span class="p">,</span> <span class="k">static</span> <span class="n">data</span><span class="p">,</span> <span class="n">bss</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82d0c0000000</span> <span class="o">-</span> <span class="mh">0xffff82dffbffffff</span> <span class="p">[</span><span class="mi">61</span><span class="n">GB</span> <span class="o">-</span> <span class="mi">64</span><span class="n">MB</span><span class="p">,</span>       <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Reserved</span> <span class="k">for</span> <span class="n">future</span> <span class="n">use</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82dffc000000</span> <span class="o">-</span> <span class="mh">0xffff82dfffffffff</span> <span class="p">[</span><span class="mi">64</span><span class="n">MB</span><span class="p">,</span>  <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">26</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Super</span><span class="o">-</span><span class="n">page</span> <span class="n">information</span> <span class="n">array</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff82e000000000</span> <span class="o">-</span> <span class="mh">0xffff82ffffffffff</span> <span class="p">[</span><span class="mi">128</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">37</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">261</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Page</span><span class="o">-</span><span class="n">frame</span> <span class="n">information</span> <span class="n">array</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff830000000000</span> <span class="o">-</span> <span class="mh">0xffff87ffffffffff</span> <span class="p">[</span><span class="mi">5</span><span class="n">TB</span><span class="p">,</span> <span class="mi">5</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">40</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">262</span><span class="o">-</span><span class="mi">271</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="mi">1</span><span class="o">:</span><span class="mi">1</span> <span class="n">direct</span> <span class="n">mapping</span> <span class="n">of</span> <span class="n">all</span> <span class="n">physical</span> <span class="n">memory</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff880000000000</span> <span class="o">-</span> <span class="mh">0xffffffffffffffff</span> <span class="p">[</span><span class="mi">120</span><span class="n">TB</span><span class="p">,</span>             <span class="n">PML4</span><span class="o">:</span><span class="mi">272</span><span class="o">-</span><span class="mi">511</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">PV</span><span class="o">:</span> <span class="n">Guest</span><span class="o">-</span><span class="n">defined</span> <span class="n">use</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffff880000000000</span> <span class="o">-</span> <span class="mh">0xffffff7fffffffff</span> <span class="p">[</span><span class="mf">119.5</span><span class="n">TB</span><span class="p">,</span>           <span class="n">PML4</span><span class="o">:</span><span class="mi">272</span><span class="o">-</span><span class="mi">510</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">HVM</span><span class="o">/</span><span class="n">idle</span><span class="o">:</span> <span class="n">continuation</span> <span class="n">of</span> <span class="mi">1</span><span class="o">:</span><span class="mi">1</span> <span class="n">mapping</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0xffffff8000000000</span> <span class="o">-</span> <span class="mh">0xffffffffffffffff</span> <span class="p">[</span><span class="mi">512</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span>  <span class="n">PML4</span><span class="o">:</span><span class="mi">511</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">HVM</span><span class="o">/</span><span class="n">idle</span><span class="o">:</span> <span class="n">unused</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Compatibility</span> <span class="n">guest</span> <span class="n">area</span> <span class="n">layout</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x0000000000000000</span> <span class="o">-</span> <span class="mh">0x00000000f57fffff</span> <span class="p">[</span><span class="mi">3928</span><span class="n">MB</span><span class="p">,</span>            <span class="n">PML4</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Guest</span><span class="o">-</span><span class="n">defined</span> <span class="n">use</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x00000000f5800000</span> <span class="o">-</span> <span class="mh">0x00000000ffffffff</span> <span class="p">[</span><span class="mi">168</span><span class="n">MB</span><span class="p">,</span>             <span class="n">PML4</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Read</span><span class="o">-</span><span class="n">only</span> <span class="n">machine</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">phys</span> <span class="n">translation</span> <span class="n">table</span> <span class="p">(</span><span class="n">GUEST</span> <span class="n">ACCESSIBLE</span><span class="p">).</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x0000000100000000</span> <span class="o">-</span> <span class="mh">0x0000007fffffffff</span> <span class="p">[</span><span class="mi">508</span><span class="n">GB</span><span class="p">,</span>             <span class="n">PML4</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Unused</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x0000008000000000</span> <span class="o">-</span> <span class="mh">0x000000ffffffffff</span> <span class="p">[</span><span class="mi">512</span><span class="n">GB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Hypercall</span> <span class="n">argument</span> <span class="n">translation</span> <span class="n">area</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>  <span class="mh">0x0000010000000000</span> <span class="o">-</span> <span class="mh">0x00007fffffffffff</span> <span class="p">[</span><span class="mi">127</span><span class="n">TB</span><span class="p">,</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">46</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">bytes</span><span class="p">,</span> <span class="n">PML4</span><span class="o">:</span><span class="mi">2</span><span class="o">-</span><span class="mi">255</span><span class="p">]</span>
</span><span class='line'> <span class="o">*</span>    <span class="n">Reserved</span> <span class="k">for</span> <span class="n">future</span> <span class="n">use</span><span class="p">.</span>
</span><span class='line'> <span class="err">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里有几个比较关键的地址空间（注：PML4:M-N表示该地址空间占用了第四级页表的第M到第N项）：</p>

<ul>
<li><code>0x0000000000000000 - 0x00007fffffffffff [128TB, PML4:0-255]</code>是为客户虚拟机准备的虚拟地址空间，这个会在之后的系列里面讨论，我现在也还不是很清楚它们是如何被使用的。</li>
<li><code>0xffff800000000000 - 0xffff803fffffffff [256GB, PML4:256]</code>是客户虚拟机只读的machine-to-physical table（MPT），MPT会在介绍客户虚拟机的时候进行介绍，现在只需要知道它是记录了HPA到GPA的映射的表。</li>
<li><code>0xffff804000000000 - 0xffff807fffffffff [256GB, PML4:256]</code>是Xen和虚拟机共享shared info信息的内存地址，shared info会在虚拟机启动的时候进行介绍，其主要是一些Xen需要让客户虚拟机启动时用到的一些信息。</li>
<li><code>0xffff810000000000 - 0xffff817fffffffff [512GB, PML4:258]</code>记录了每个客户虚拟机的page table，这个在客户虚拟机部分进行介绍，现在暂时还不清楚是用来干嘛的。</li>
<li><code>0xffff818000000000 - 0xffff81ffffffffff [512GB, PML4:259]</code>记录shadow page table的信息。</li>
<li><code>0xffff820000000000 - 0xffff827fffffffff [512GB, PML4:260]</code>这是记录每个虚拟机的(per-domain mapping)一些相关信息，包括一些GDT，LDT之类的，也是在之后客户虚拟机部分进行介绍。</li>
<li><code>0xffff828000000000 - 0xffff82bfffffffff [256GB, PML4:261]</code>这个也是MPT，但是客户虚拟机不可访问，现在我还不太清楚具体是做什么的，我猜它应该是P2M。</li>
<li><code>0xffff82c000000000 - 0xffff82cfffffffff [64GB, PML4:261]</code>用于vmap()/ioremap()/fixmap，现在还不清楚是做什么的。</li>
<li><code>0xffff82d080000000 - 0xffff82d0bfffffff [1GB, PML4:261]</code>这个最重要，映射了Xen的code和data，还包括bss之类的。这也是在Xen启动的时候会被最早映射到物理内存中的内容。</li>
<li><code>0xffff82dffc000000 - 0xffff82dfffffffff [64MB, PML4:261]</code>这个用于记录一些superpage相关的信息。</li>
<li><code>0xffff82e000000000 - 0xffff82ffffffffff [128GB, PML4:261]</code>这个也非常关键，Xen会为每个物理页都生成一个page frame的数据结构，里面记录了每个物理页相关的信息。</li>
<li><code>0xffff830000000000 - 0xffff87ffffffffff [5TB, PML4:262-271]</code>这个是一个一对一的直接映射，即每一个物理地址都会在这个地址空间中找到一个相应的虚拟地址的映射。在Xen的代码里面<code>__va()</code>这个宏就是对应了这个地址空间中的某个地址。</li>
<li><code>0xffff880000000000 - 0xffffffffffffffff [120TB, PML4:272-511]</code>用于PV的客户虚拟机，这个之后介绍，现在也不清楚要如何用。</li>
<li><code>0xffff880000000000 - 0xffffff7fffffffff [119.5TB, PML4:272-510]</code>用于HVM客户虚拟机。</li>
</ul>


<p>当然还有一些其它的，现在我也还暂时不清楚到底是用来做什么的，先在这里列出来吧：</p>

<ul>
<li><code>0xffff808000000000 - 0xffff80ffffffffff [512GB, PML4:257]</code>用于ioremap for PCI mmconfig space。</li>
<li><code>0xffff82d000000000 - 0xffff82d03fffffff [1GB, PML4:261]</code>又是一个MPT，叫做Compatibility MPT，现在不清楚是做什么的。</li>
<li><code>0xffff82d040000000 - 0xffff82d07fffffff [1GB, PML4:261]</code>又是一个MPT，叫做High read-only compatibility MPT。</li>
</ul>


<p>这里有几个点需要强调一下：</p>

<p>首先，上面所说的这个内存分布状况会被反映在Xen的页表中，同时某些信息也会被映射在虚拟机的内存空间中，至于有哪些我们在之后的系列慢慢介绍。</p>

<p>另外，所有虚拟内存到物理内存的映射都会在<code>[PML4:262-271]</code>，也就是direct map那里反映出来，如果我们看<code>__va()</code>的实现：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">__maddr_to_virt</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ma</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ASSERT</span><span class="p">(</span><span class="n">pfn_to_pdx</span><span class="p">(</span><span class="n">ma</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">DIRECTMAP_SIZE</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">));</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">DIRECTMAP_VIRT_START</span> <span class="o">+</span>
</span><span class='line'>                <span class="p">((</span><span class="n">ma</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">ma_va_bottom_mask</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>                 <span class="p">((</span><span class="n">ma</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">ma_top_mask</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">pfn_pdx_hole_shift</span><span class="p">)));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">maddr_to_virt</span><span class="p">(</span><span class="n">ma</span><span class="p">)</span>   <span class="n">__maddr_to_virt</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)(</span><span class="n">ma</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">__va</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>             <span class="p">(</span><span class="n">maddr_to_virt</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>DIRECTMAP_VIRT_START</code>就是direct map虚拟地址的首地址：<code>0xffff830000000000</code>。</p>

<p>另外，对于page frame，也即前面提到的，Xen会为每一个物理页生成一个对应的page_info数据结构：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">page_info</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">union</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">page_list_entry</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">paddr_t</span> <span class="n">up</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">page_sharing_info</span> <span class="o">*</span><span class="n">sharing</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">count_info</span><span class="p">;</span>
</span><span class='line'><span class="k">union</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">type_info</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">inuse</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">type</span><span class="o">:</span><span class="mi">5</span><span class="p">;</span>   <span class="cm">/* What kind of shadow is this? */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">pinned</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* Is the shadow pinned? */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">head</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span>   <span class="cm">/* Is this the first page of the shadow? */</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">count</span><span class="o">:</span><span class="mi">25</span><span class="p">;</span> <span class="cm">/* Reference count */</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">sh</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">bool_t</span> <span class="n">need_tlbflush</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">free</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">union</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__pdx_t</span> <span class="n">_domain</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">inuse</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__pdx_t</span> <span class="n">back</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">sh</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">free</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">union</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">u32</span> <span class="n">tlbflush_timestamp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">u16</span> <span class="n">nr_validated_ptes</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s8</span> <span class="n">partial_pte</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">u32</span> <span class="n">shadow_flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__pdx_t</span> <span class="n">next_shadow</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中主要记录了该页相关的一些信息，比如它是什么类型（normal page，或者是页表页，或者是free的）？被引用的次数（count_info）？以及和其它page之间的链表关系等。这些信息在相关page被回收或者分配的时候会被用到。</p>

<p>其它的内存映射的具体细节就需要在之后慢慢进行介绍了。</p>

<p>最后我们画一张图，来总体描述一下各个内存地址空间在整个页表中的分布情况：</p>

<p><img src="http://ytliu.info/images/2015-07-28-1.png" title="xen page table" alt="xen page table" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSM-FLASK学习笔记]]></title>
    <link href="http://ytliu.github.io/blog/2015/06/10/xsm-flaskxue-xi-bi-ji/"/>
    <updated>2015-06-10T10:40:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/06/10/xsm-flaskxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>XSM-FLASK全称为：<strong>X</strong>en <strong>S</strong>ecurity <strong>M</strong>odules - <strong>FL</strong>ux <strong>A</strong>dvanced <strong>S</strong>ecurity <strong>K</strong>ernel。这篇博文对其进行一个简单的介绍，资料主要翻译自<a href="http://wiki.xen.org/wiki/Xen_Security_Modules_:_XSM-FLASK">这里</a>。</p>

<p>XSM是Xen提供的一个安全框架，允许管理者对整个系统进行细粒度的控制，换句话说，即运行管理者定义一套规则来管理虚拟机之间，虚拟机与Xen之间的交互，以及对系统资源（memory，device）的访问。</p>

<p>FLASK是XSM中的一个模块实现，当然，之后可能还有其他的模块，那就是后话了。下面是一些例子，列举了XSM-FLASK可以做的几件事：</p>

<ul>
<li>禁止两台虚拟机之间通过event channel和grant table进行通信；</li>
<li>将一些需要特权级别的操作安全地grant给某些非特权级虚拟机；</li>
<li>控制哪些虚拟机能使用device passthrough；</li>
<li>限制或者审计特权虚拟机中进行的某些特定操作；</li>
<li>限制特权虚拟机对其他虚拟机的任意内存映射；</li>
<li>将hypervisor中的不同模块（比如qemu和xenstore）进行隔离，防止它们之间互相影响。</li>
</ul>


<p>以上是一些基本说明，下面会具体介绍如何使用FLASK，以及FLASK中规则的一些语法定义。</p>

<!-- more -->


<hr />

<h3>FLASK及其policy的编译流程</h3>

<p>在Xen 4.3之后的版本都对FLASK进行了比较全面的支持，如果要开启FLASK，需要在编译Xen之前修改<code>Config.mk</code>文件，将<code>XSM_ENABLE</code>和<code>FLASK_ENABLE</code>设成<code>y</code>，然后再开始编译。</p>

<p>编译完Xen之后，需要编译FLASK的policy，在这之前需要先安装checkpolicy：</p>

<pre><code>$ aptitude install checkpolicy
</code></pre>

<p>然后编译：</p>

<pre><code>$ cd $XEN
$ make -C tools/flask/policy
</code></pre>

<p>之后会在<code>$XEN/tools/flask/policy</code>目录下生成一个叫做<code>xenpolicy-$XEN_FULLVESION</code>的文件，这个就是生成的flask policy。</p>

<hr />

<h3>启动Xen（with FLASK）</h3>

<p>在重启机器之前，我们需要在grub的配置中加上flask的选项，修改<code>/etc/default/grub</code>文件：</p>

<pre><code>GRUB_CMDLINE_XEN_DEFAULT="flask=&lt;OPTION&gt;"
</code></pre>

<p>其中，OPTIONs包括：</p>

<ul>
<li><code>permissive</code>表示：如果在bootloader阶段找到了一个policy，则会被加载；如果没有，或者发生错误，错误报告会被写到一个buffer，但是不会阻止系统启动。该模式可以通过<code>xl setenforce</code>改为<code>enforcing</code>模式；</li>
<li><code>enforcing</code>表示：在创建domain0之前会强制要求提供一个policy，否则无法启动系统；</li>
<li><code>late</code>表示：在bootloader阶段不会load相关的policy，可以在系统启动之后通过<code>xl loadpolicy</code>加载相应的policy，一旦policy被加载则进入enforcing模式；</li>
<li><code>disabled</code>表示：XSM会被设成dummy module，该模块和没有编译XSM所产生的效果是一样的，另外，一旦采用这个模式之后，FLASK是无法被重新加载的。</li>
</ul>


<p>需要注意的一点是，FLASK的policy需要被放在一个grub可以访问的目录下，如<code>/boot/flask/</code>，否则FLASK不会开启。另外，该policy选项需要写入grub的配置中，放在multiboot下面，如下所示：</p>

<pre><code>multiboot /boot/xen-VERSION.gz dom0_mem=1024M,max:1024M flask=enforcing
module /boot/vmlinuz-X.Y-amd64 root=/dev/mapper/vg_system-root ro quiet
module /boot/initrd.img-X.Y
module /boot/flask/xenpolicy-VERSION
</code></pre>

<hr />

<h3>利用XSM security label创建虚拟机</h3>

<p>当通过上面所提到的方式启动Xen之后，FLASK也就开启了，那么我们在创建虚拟机的时候就需要在其配置中增加一个security label（安全标签），否则，该虚拟机会被标记为“unlabeled”，例子如下所示：</p>

<pre><code>seclabel='system_u:system_r:domU_t'
</code></pre>

<p>安全标签有<code>user</code>,<code>role</code>和<code>type</code>表示，这些会在之后进行介绍。另外我们需要在policy中对相应的主体进行正确的权限设置。对于“unlabeled”的虚拟机，如果FLASK并没进入enforcing模式，或者进入了enforcing模式但定义了相关标签的权限，则不会有问题，否则，在其调用某些操作的时候会被禁止。</p>

<p>通过<code>xl list -Z</code>命令可以查看当前虚拟机所具有的安全标签。</p>

<p>通过<code>xl dmesg | grep avc</code>命令可以查看FLASK相关的log记录。</p>

<hr />

<h3>FLASK policies</h3>

<h4>增加一个security module</h4>

<p>我们可以把<strong>security module（安全模块）</strong>当做将一系列规则进行封装所产生的集合，如果要增加一个自定义的安全模块，我们需要在<code>$XEN/tools/flask/policy/policy/modules.conf</code>文件中加一行：</p>

<pre><code>&lt;module_name&gt; = on
</code></pre>

<p>同时在<code>$XEN/tools/flask/policy/policy/modules/&lt;module_name&gt;</code>目录下增加两个文件：</p>

<pre><code>&lt;module_name&gt;.te
&lt;module_name&gt;.if
</code></pre>

<p>其中<code>.te</code>文件定义了相应规则的的描述，而<code>.if</code>文件定义了一系列在<code>.te</code>文件中会被用到的宏（macros）。</p>

<p>在XSM-FLASK中有一个默认的模块：xen。如果存在多个模块（比如用户自己定义了多个模块），那么这些模块中不能有重复的<code>type</code>和<code>role</code>的定义。当模块定义好之后，可以参照'FLASK policy的编译流程'进行编译，并将其放在目标目录中（如<code>/boot/flask</code>)，这样在xen启动的时候就会加载，或者通过<code>xl loadpolicy</code>进行手动加载。</p>

<h4>定义Types, roles, users和attributes</h4>

<p>在安全模块中会定义许多规则，对于一个特定的规则，说白了就是规定了某个主体（source subject）对另一个主体（target subject）进行的一系列访问和操作（如hypercall）的权限（deny or allow），比如规定：</p>

<pre><code>某个集合中的虚拟机（source）不能向（deny）虚拟机监控器Xen（target）调用某个hypercall（operation）
</code></pre>

<p>那么这些集合就需要通过一系列的层级进行定义，也就引入了接下来需要讨论的<code>type</code>, <code>role</code>, <code>users</code>和<code>attributes</code>。可以结合<code>$XEN/tools/flask/policy/policy/modules/xen.te</code>文件中的例子进行更具体的了解。</p>

<p><strong>Policy Attribute</strong></p>

<p><code>attribute</code>定义了一个抽象的属性，它可以被附属在接下来要介绍的<code>type</code>主体上，即表示某个<code>type</code>具备哪些<code>attributes</code>。</p>

<p><strong>Policy Type</strong></p>

<p><code>type</code>是整个policy定义规范中最低的一个主体级别，它可以被用来在某个规则中指定source和target的类型。定义<code>type</code>的方式是：</p>

<pre><code>type new_type_t &lt;attributes&gt;;
</code></pre>

<p>比如在示例文件中，定义了一个<code>type</code>：</p>

<pre><code>type xen_t, xen_type, mls_priv;
</code></pre>

<p>其中<code>xen_t</code>即为<code>type</code>的标示符，而后面的<code>xen_type</code>和<code>mls_priv</code>则是相应的<code>attribute</code>，也就是说每个<code>type</code>可能会带有多个不同的<code>attributes</code>。</p>

<p>当我们需要定义一个规则的时候，可以通过<code>type</code>来指定对应的源和目标主体。比如需要定义某个hypercall的调用是被允许的，可以这么写：</p>

<pre><code>allow &lt;source type&gt; &lt;target type&gt;:&lt;security class&gt; &lt;hypercall&gt;;
</code></pre>

<p>其中，<code>security class</code>会在之后介绍，简单来说，它定义了一系列具有相关性的hypercall的集合。一个具体的例子：</p>

<pre><code>allow dom0_t security_t:security check_context;
</code></pre>

<p>定义了<code>dom0_t</code> type的主体可以向<code>security_t</code> type主体调用<code>security class</code>中的<code>check_context</code> hypercall。</p>

<p>另外，如果同时定义多个同一个class中的hypercall，可以用<code>{}</code>将其括起来，例如：</p>

<pre><code>allow dom0_t dom0_t:resource { add remove };
</code></pre>

<p>除了用<code>type</code>表示的主体，我们也可以直接用<code>attribute</code>来表示主体，如：</p>

<pre><code>allow domain_type xen_t:xen tmem_op;
</code></pre>

<p>即表示所有具有domain_type属性的type主体都可以向<code>xen_t</code> type主体调用<code>xen class</code>中的<code>tmem_op</code> hypercall。</p>

<p><strong>Policy Role</strong></p>

<p><code>role</code>是处于<code>type</code>上一层级的主体级别，用户可以定义某个<code>role</code>由多个<code>types</code>组成，比如：</p>

<pre><code>role system_r
role system_r types { xen_type domain_type };
</code></pre>

<p>可以看到，<code>role</code>的<code>types</code>是采用<code>attribute</code>的方式定义的，即定义具有某个<code>attribute</code>的所有<code>types</code>都属于这个<code>role</code>。如果要定义具有某个<code>attribute</code>的除掉某个<code>type</code>的所有<code>types</code>，则通过在该<code>type</code>之前加上一个<code>-</code>进行标示，如：</p>

<pre><code>role vm_r
role vm_r types {domain_type -dom0_t };
</code></pre>

<p><strong>Policy Users</strong></p>

<p><code>user</code>作为policy中的最高层级的主体级别，它并不被定义在<code>.te</code>文件中，它们是被定义在<code>$XEN/tools/flask/policy/policy/users</code>文件中。因此我们可以跨安全模块共用同一个<code>user</code>。在默认情况下，FLASK定义了三个users：system_u, customer_t和customer_2。</p>

<h4>增加Policy constraints</h4>

<p>FLASK可以通过在<code>$XEN/tools/flask/policy/policy/constraints</code>文件中定义规则来限制某些操作。在默认的情况下，FLASK规则定义了两条constraints（限制规则）来防止不同用户之间event channel和grant table的交互。一条限制规则语法如下：</p>

<pre><code>constrain &lt;security class&gt; { &lt;hypercall&gt; } ( expression );
</code></pre>

<p>比如例子中的：</p>

<pre><code>constrain grant { map_read map_write copy } (
  u1 == system_u or
  u2 == system_u or
  u1 == u2
);
</code></pre>

<p>这条限制规则表示如果属于<code>grant class</code>的这些hypercall可以被执行，当且仅当expression中的条件成立。其中，expression可以包含之前定义好的所有<code>user</code>, <code>role</code>和<code>type</code>主体，其语法规则如下：</p>

<pre><code>expression : (expresion)
      | not expression
      | expression and expression
      | expression or expression
      | u1 op u2
      | r1 role_op r2
      | t1 op t2
      | u1 op names
      | u2 op names
      | r1 op names
      | r2 op names
      | t1 op names
      | t2 op names

op : == | !=
role_op : == | != | eq | dom | domby | incomp

names : name | { name_list }
name_list : name | name_list name
</code></pre>

<h3>Security classes</h3>

<p><code>security class</code>被定义在<code>$XEN/xen/xsm/flask/policy/access_vectors</code>文件中，每个hypercall被分配在了其中一个class中，需要注意的是，每一个class最多只能有32个hypercalls。下面简单介绍下默认的几个classes，相关的hypercall的描述可以直接看<a href="http://wiki.xen.org/wiki/Xen_Security_Modules_:_XSM-FLASK#Security_classes">这里</a>。</p>

<ul>
<li><code>class xen</code>包含了所有在hypervisor中进行的操作，其source为执行hypercall的domain，target为xen (<code>xen_t</code> type);</li>
<li><code>class domain &amp; class domain2</code>包含了某个domain调用另一个domain或者调用自己的操作，source为执行hypercall的domain，target为被调用的domain（包括<code>_self</code>和<code>_target</code>的type）;</li>
<li><code>class hvm</code>类似于<code>domain</code>，除了它是针对HVM domain；</li>
<li><code>class event</code>用于描述event channels；</li>
<li><code>class grant</code>用于描述grant mapping；</li>
<li><code>class mmu</code>用于描述不是采用grant机制映射的内存页；</li>
<li><code>class shadow</code>（这个不清楚是干嘛的）；</li>
<li><code>class resource</code>用于描述硬件设备passthrough所使用的资源，包括IRQ, MMIO regions, I/O ports, PCI device等；</li>
<li><code>class security</code>用于描述和FLASK相关的操作。</li>
</ul>


<hr />

<p>以上即为XSM-FLASK最基本的介绍，我也还正处于学习阶段，其它更细节的部分和更直观的实例会在以后的博文中进行说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Driver Domain on Xen]]></title>
    <link href="http://ytliu.github.io/blog/2015/02/04/running-driver-domain-on-xen/"/>
    <updated>2015-02-04T22:27:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/02/04/running-driver-domain-on-xen</id>
    <content type="html"><![CDATA[<p>又是一篇和Xen相关的教程，主要介绍如何在Xen里面启动一个网卡的<code>driver domain</code>（也被称为<code>stub domain</code>），也就是说，该虚拟机专门用来为其它虚拟机提供网络服务（而不是把所有这些服务都交给<code>Domain 0</code>来做）。</p>

<p>说句题外话，为什么最近这么多教程类型的博客，原因在于我发现每次我把这些东西记在博客里面的话，自己都会记得很深，但是记在Evernote里面经常就会忘记掉，况且记在博客里面还有可能为别人提供帮助，所以何乐而不为呢？</p>

<!-- more -->


<p>好了，废话说到这，开始进入正题。</p>

<h3>为什么要使用<code>driver domain</code></h3>

<p>可以参看<a href="http://wiki.xen.org/wiki/Device_Model_Stub_Domains">Xen的wiki</a>。</p>

<p>主要有四点原因：</p>

<ul>
<li>安全性：把权限从<code>domain 0</code>里面剥离出来，也就是说就算客户虚拟机控制了<code>driver domain</code>，也不能拿<code>domain 0</code>如何；</li>
<li>可扩展性：<code>driver domain</code>的资源不受<code>domain 0</code>的限制，所有和设备相关的资源都和该<code>driver domain</code>相关；</li>
<li>隔离性：其实和安全性有点重复，主要是说<code>driver domain</code>里面的进程不会和<code>domain 0</code>里面的进程产生竞争关系，不管从安全性还是性能方面都能提供比较好的隔离性；</li>
<li>高性能：如果在<code>domain 0</code>里面运行driver的进程，那么会产生<code>double scheduling</code>的问题，即driver要工作，必须首先等<code>domain 0</code>被调度，然后等<code>domain 0</code>中和driver相关的进程被调度；但是如果用了<code>driver domain</code>的话就没有这个问题了，只要等<code>driver domain</code>被调度就可以了（因为在<code>driver domain</code>里面只有一个进程）。</li>
</ul>


<p>使用<code>driver domain</code>可以提供多大的性能提升呢？可以参看<a href="http://www-archive.xenproject.org/files/xensummitboston08/SamThibault_XenSummit.pdf">这个slide</a>。</p>

<h3>配置和启动<code>driver domain</code></h3>

<p>好，下面开始进入教程。</p>

<p>首先我们来一张使用网卡<code>driver domain</code>的架构图吧：</p>

<p><img src="http://ytliu.info/images/2015-02-04-1.png" title="driver domain" alt="driver domain" /></p>

<p>其实主要就是如何进行网卡的passthrough，以及如何让客户虚拟机和<code>driver domain</code>进行匹配。</p>

<p>至于相关的参考资料嘛，可以参考<a href="http://wiki.xen.org/wiki/Driver_Domain">这里</a>。</p>

<h4>安装Xen和客户虚拟机</h4>

<p>这个就不说了，参照<a href="http://ytliu.info/blog/2015/02/02/running-xen-on-xen%3Axende-qian-tao-xu-ni-hua-ji-zhu/">上篇博客</a></p>

<h4>Xen PCI Passthrough</h4>

<p>参考资料来自<a href="http://wiki.xen.org/wiki/Xen_PCI_Passthrough">这里</a>。</p>

<p>首先提一下IOMMU和PCI passthrough的关系：</p>

<p>在正常情况下，一个设备可被配置成DMA到任意的宿主机的物理内存，但是这样会有两个问题：</p>

<ul>
<li>第一，客户虚拟机可以利用它来任意写Xen的内存，这样会有安全问题；</li>
<li>第二，对于HVM模式的客户虚拟机来说，它看到的内存是被虚拟化的，但是对于设备来说却不是这样的，也就是说正常情况下HVM的虚拟机是看不到被设备访问的那块内存的，也就无法使用那块内存。</li>
</ul>


<p>那么如何让客户虚拟机的driver来操作真实硬件呢？这就引入了IOMMU，这套机制运行Xen来配置一个设备可以访问哪些内存，以及将这些内存也让客户虚拟机看到。</p>

<p>所以说，在有IOMMU支持的硬件上，设备可以被passthrough给HVM和PV虚拟机，而在没有IOMMU支持的设备上，如果设备被passthrough给PV虚拟机，虽然可以正常运行，但是会有安全问题，另外，设备不能被passthrough给HVM虚拟机，因为HVM虚拟机看不到设备访问的那块内存。</p>

<p>接下来我们就来看如何passthrough。</p>

<p>简单来说，我们需要先把网卡和<code>domain 0</code>的连接先给取消掉，然后再把它分配给<code>driver domain</code>。</p>

<p>首先我们得先知道我们的网卡设备是哪一个，以及它所对应的<a href="http://wiki.xen.org/wiki/Bus:Device.Function_(BDF">BDF</a>_Notation)，这个可以通过:</p>

<pre><code>$ lspci
</code></pre>

<p>查看，得到它的BDF是<code>00:19.0</code>:</p>

<p><img src="http://ytliu.info/images/2015-02-04-2.png" title="nic bdf" alt="nic bdf" /></p>

<p>之后，就可以利用<code>xl</code>这套xen-tool里面提供的命令来将其从<code>domain 0</code>里面移除，并且加进Xen的<code>assignable</code>的设备集合里面：</p>

<pre><code>$ sudo xl pci-assignable-add 00:19.0
</code></pre>

<p>这个时候运行<code>sudo xl pci-assignable-list</code>就可以看到：</p>

<p><img src="http://ytliu.info/images/2015-02-04-3.png" title="xl pci-assignale-list" alt="xl pci-assignale-list" /></p>

<p>这之后，就可以启动我们的<code>driver domain</code>了。配置启动文件：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>driver-domain.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">builder</span><span class="o">=</span><span class="s2">&quot;hvm&quot;</span>
</span><span class='line'><span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;driver-domain&quot;</span>
</span><span class='line'><span class="nv">memory</span> <span class="o">=</span> 1024
</span><span class='line'><span class="nv">vcpus</span> <span class="o">=</span> 2
</span><span class='line'><span class="nv">pci</span><span class="o">=[</span> <span class="s1">&#39;00:19.0&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="nv">disk</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;file:/path/to/vm.img,xvda,rw&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="nv">boot</span><span class="o">=</span><span class="s2">&quot;cd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意，这里主要就是增加了一行：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dd.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">pci</span><span class="o">=[</span> <span class="s1">&#39;00:19.0&#39;</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后启动虚拟机：</p>

<pre><code>$ sudo xl create driver-domain.cfg
</code></pre>

<p>这个时候如果进到虚拟机里面看，会发现它多了一个PCI设备，且可以联网：</p>

<p><img src="http://ytliu.info/images/2015-02-04-4.png" title="network in driver domain" alt="network in driver domain" /></p>

<p>而此时，宿主机已经连不上网了！</p>

<p>这里需要注意的是我们需要在这个<code>driver domain</code>里面安装xen-tools，以及配置桥接网络，取名为<code>xenbr0</code>，供之后的客户虚拟机使用。</p>

<p><img src="http://ytliu.info/images/2015-02-04-5.png" title="network in driver domain 2" alt="network in driver domain 2" /></p>

<p>这些配置和<code>domain 0</code>里面的差不多，具体的可以参照我的<a href="http://ytliu.info/blog/2015/02/02/running-xen-on-xen%3Axende-qian-tao-xu-ni-hua-ji-zhu/">上一篇博客</a>。</p>

<h4>配置客户虚拟机</h4>

<p>然后我们就可以配置客户虚拟机了，这一步非常简单，只需要在<code>vif</code>这个配置选项上的<code>backend</code>填上<code>driver-domain</code>（也就是<code>driver domain</code>的name），将<code>bridge</code>填上<code>xenbr0</code>（也就是driver domain的桥的名字）就可以了：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>guest-vm.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">builder</span><span class="o">=</span><span class="s2">&quot;hvm&quot;</span>
</span><span class='line'><span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;guest vm&quot;</span>
</span><span class='line'><span class="nv">memory</span> <span class="o">=</span> 1024
</span><span class='line'><span class="nv">vcpus</span> <span class="o">=</span> 2
</span><span class='line'><span class="nv">vif</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;bridge=xenbr0, model=e1000, backend=driver-domain&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nv">disk</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;file:/path/to/vm2.img,xvda,rw&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="nv">boot</span><span class="o">=</span><span class="s2">&quot;cd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后启动虚拟机：</p>

<pre><code>$ sudo xl create guest-vm.cfg
</code></pre>

<p>进入虚拟机之后试一下，发现它果然可以上网啦！</p>

<p><img src="http://ytliu.info/images/2015-02-04-6.png" title="guest vm" alt="guest vm" /></p>

<hr />

<p>到这里，这一篇博客的内容就结束啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Xen on Xen：Xen的嵌套虚拟化技术]]></title>
    <link href="http://ytliu.github.io/blog/2015/02/02/running-xen-on-xen%3Axende-qian-tao-xu-ni-hua-ji-zhu/"/>
    <updated>2015-02-02T18:41:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/02/02/running-xen-on-xen:xende-qian-tao-xu-ni-hua-ji-zhu</id>
    <content type="html"><![CDATA[<p>这篇博文是一个简单的教程，介绍如何在Xen的虚拟机中运行另外一个虚拟机，说白了，就是Xen的嵌套虚拟化技术。</p>

<!-- more -->


<h3>安装Xen</h3>

<p>关于如何安装Xen，首选的是看<a href="http://wiki.xenproject.org/wiki/Xen_Project_Beginners_Guide">Xen的官方教程</a>。</p>

<p>不过由于里面说的比较复杂，所以本教程就简单的把几个步骤列一下：</p>

<h4>直接安装</h4>

<p>这个我没试过，因为我都是用源码安装的。不过据说很简单，只要</p>

<pre><code>$ sudo aptitude -P install xen-linux-system
$ sudo dpkg-divert --divert /etc/grub.d/08_linux_xen --rename /etc/grub.d/20_linux_xen # change the order of the operating systems so that Xen is the default option.
$ sudo update-grub # regenerate the /boot/grub/grub.cfg file
</code></pre>

<p>就行了。如果不行再自己网上搜下吧，毕竟这个不是今天的重点。</p>

<h4>源码安装</h4>

<p>具体的参阅<a href="http://wiki.xenproject.org/wiki/Compiling_Xen_From_Source">这里</a>：</p>

<pre><code>$ sudo aptitude build-dep xen
$ git clone git://xenbits.xen.org/xen.git
$ cd xen
$ ./configure
$ make xen
$ make tools
$ make install-xen
$ make install-tools
$ sudo dpkg-divert --divert /etc/grub.d/08_linux_xen --rename /etc/grub.d/20_linux_xen
$ sudo update-grub
</code></pre>

<p>至于每一句话什么意思，这里就不阐述了，不懂的自己去google，另外还有一些别的需求的还是自己去看文档吧，这里就负责最基本的配置。</p>

<p>在这之后，在系统的<code>/boot</code>目录下会有几个<code>xen.*.gz</code>的镜像文件，如果看<code>/boot/grub/grub.cfg</code>，能够看到诸如这样的项：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/boot/grub/grub.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>menuentry <span class="s1">&#39;Debian GNU/Linux, with Xen xen and Linux 3.13.7+&#39;</span> --class debian --class gnu-linux --class gnu -ass os --class xen <span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;insmod part_msdos
</span><span class='line'>insmod ext2
</span><span class='line'><span class="nb">set </span><span class="nv">root</span><span class="o">=</span><span class="s1">&#39;(hd0,msdos1)&#39;</span>
</span><span class='line'>search --no-floppy --fs-uuid --set<span class="o">=</span>root 23292666-0022-4e4b-8b4b-4ffcec168ee8
</span><span class='line'><span class="nb">echo</span>    <span class="s1">&#39;Loading Xen xen ...&#39;</span>
</span><span class='line'>multiboot   /boot/xen.gz placeholder
</span><span class='line'><span class="nb">echo</span>    <span class="s1">&#39;Loading Linux 3.13.7+ ...&#39;</span>
</span><span class='line'>module  /boot/vmlinuz-3.13.7+ placeholder <span class="nv">root</span><span class="o">=</span><span class="nv">UUID</span><span class="o">=</span>23292666-0022-4e4b-8b4b-4ffcec168ee8 ro nopat quiet
</span><span class='line'><span class="nb">echo</span>    <span class="s1">&#39;Loading initial ramdisk ...&#39;</span>
</span><span class='line'>module  /boot/initrd.img-3.13.7+
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在这里，<code>multiboot   /boot/xen.gz placeholder</code>是xen的镜像，<code>module  /boot/vmlinuz-3.13.7+</code>是domain 0的镜像，<code>module  /boot/initrd.img-3.13.7+</code>是initrd。</p>

<p>重启之后，由于我们之前改了grub的顺序，所以会默认起Xen，domain的内核就是系统最新的内核。当然这些都是可以配置的，这里就不多说了。</p>

<p>另外一点，由于我们在编译源码的时候同样编译安装了xen-tools，所以当Xen启动之后，就可以运行如下命令：</p>

<pre><code>$ sudo xl list
</code></pre>

<p>来看当前的虚拟机。如果出现问题，很可能是一些相关的daemon没有跑起来，这个时候只需要运行：</p>

<pre><code>$ sudo /etc/init.d/xendomains start
$ sudo /etc/init.d/xencommons start
</code></pre>

<p>就可以了。这个时候再运行<code>xl list</code>，就可以看到：</p>

<p><img src="http://ytliu.info/images/2015-02-02-1.png" title="xl list" alt="xl list" /></p>

<p>这就表明xen正常起来了。其中<code>Domain-0</code>表示的就是Xen里面的特权虚拟机，也就是当前的操作系统。</p>

<h3>启动虚拟机</h3>

<p>当Xen安装起来之后，就可以启动虚拟机了，Xen的虚拟机的管理也是通过刚刚提到的<code>xl</code>那一套工具。如果你已经有一个虚拟机的镜像，那你只需要准备一个配置文件配置好相应的镜像路径就行了，如果没有虚拟机镜像，那么准备一个<code>iso</code>文件，来安装一个镜像。具体如何做会在后面说明。</p>

<p>在Xen中有两种虚拟化的模式：半虚拟化（para-virtualization）和全虚拟化（full virtualization）。关于这两个虚拟化的概念，以及它们的发展历史，我强烈推荐这两篇博客：</p>

<p><a href="https://blog.xenproject.org/2012/10/23/the-paravirtualization-spectrum-part-1-the-ends-of-the-spectrum/">The Paravirtualization Spectrum, part 1: The Ends of the Spectrum</a></p>

<p><a href="https://blog.xenproject.org/2012/10/31/the-paravirtualization-spectrum-part-2-from-poles-to-a-spectrum/">The Paravirtualization Spectrum, Part 2: From poles to a spectrum</a></p>

<p>如果用一张图来表示的话，我选择里面的这张图：</p>

<p><img src="http://ytliu.info/images/2015-02-02-2.png" title="virtualization spectrum" alt="virtualization spectrum" /></p>

<p>由于到目前为止，Intel的VT-x硬件虚拟化技术已经能将CPU和内存的性能提高到真机的水平，但是由于设备（如磁盘、网卡）是有数目限制的，虽然VT-d技术已经可以做到一部分的硬件隔离，但是大部分情况下还是需要软件来对其进行模拟，在全虚拟化的情况下，是通过Qemu进行设备模拟的，而半虚拟化技术则可以通过虚拟机之间共享内存的方式利用特权级虚拟机的设备驱动直接访问硬件，从而达到更高效的性能水平。</p>

<p>当然不管怎么样，在虚拟机启动的时候我们还是可以指定要采用哪种方法来启动，如果采用半虚拟化的方法，那么起来的虚拟机的I/O、CPU和内存都是通过半虚拟化的机制。如果采用的是全虚拟化的方法，那么I/O应该用的就是Qemu的软件模拟了，而CPU和内存采用的是硬件虚拟化VT-x技术。</p>

<p>这里可以看到，如果我们采用PVHVM的方式，即CPU和内存采用VT-x技术，而I/O采用半虚拟化技术，那么性能就是最优的。其实现在linux的mainstream已经将其整合进去啦，默认情况下就可以在HVM里面采用半虚拟化的驱动，具体的可以看<a href="http://wiki.xen.org/wiki/Xen_Linux_PV_on_HVM_drivers">这篇文档</a>。其实主要就是在启动配置文件里面加上这句话：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>pv.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">xen_platform_pci</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>那么虚拟机启动的时候就会将Qemu的设备unplug，然后匹配半虚拟化的设备，如<code>xen-netfront</code>等。</p>

<h4>半虚拟化启动虚拟机</h4>

<p>准备配置文件：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>pv.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">kernel</span> <span class="o">=</span> <span class="s2">&quot;/path/to/vmlinuz&quot;</span>
</span><span class='line'><span class="nv">ramdisk</span> <span class="o">=</span> <span class="s2">&quot;/path/to/initrd.img&quot;</span>
</span><span class='line'><span class="nv">extra</span> <span class="o">=</span> <span class="s2">&quot;root=/dev/xvda1&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;name <span class="o">=</span> <span class="s2">&quot;pv-vm&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;memory <span class="o">=</span> 1024
</span><span class='line'><span class="nv">vcpus</span> <span class="o">=</span> 2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;disk <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;file:/path/to/vm.img,xvda,rw&#39;</span> <span class="o">]</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;boot on floppy <span class="o">(</span>a<span class="o">)</span>, hard disk <span class="o">(</span>c<span class="o">)</span>, Network <span class="o">(</span>n<span class="o">)</span> or CD-ROM <span class="o">(</span>d<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;boot<span class="o">=</span><span class="s2">&quot;cd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>kernel</code>和<code>ramdisk</code>是自己编译出来的内核镜像和initrd镜像，这个最好在虚拟机里面编译，然后再拷贝出来，当然我也试过用在主机上编译生成的镜像，可以启动，但是会有一些其他的问题，这里就不展开了。</p>

<p>之后，就可以运行：</p>

<pre><code>$ sudo xl create -c pv.cfg
</code></pre>

<p>来启动虚拟机了，其中<code>-c</code>表示将虚拟机的输出打在console上，这样我们就可以直接看到虚拟机启动的信息了，然后登录进去，就可以操作虚拟机啦：</p>

<p><img src="http://ytliu.info/images/2015-02-02-3.png" title="pv vm" alt="pv vm" /></p>

<h4>全虚拟化启动虚拟机</h4>

<p>准备配置文件：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hvm.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">kernel</span> <span class="o">=</span> <span class="s2">&quot;hvmloader&quot;</span>
</span><span class='line'><span class="nv">builder</span><span class="o">=</span><span class="s2">&quot;hvm&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;name <span class="o">=</span> <span class="s2">&quot;hvm-vm&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;memory <span class="o">=</span> 1024
</span><span class='line'><span class="nv">vcpus</span> <span class="o">=</span> 2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;disk <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;file:/path/to/vm.img,xvda,rw&#39;</span> <span class="o">]</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;boot on floppy <span class="o">(</span>a<span class="o">)</span>, hard disk <span class="o">(</span>c<span class="o">)</span>, Network <span class="o">(</span>n<span class="o">)</span> or CD-ROM <span class="o">(</span>d<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;boot<span class="o">=</span><span class="s2">&quot;cd&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>和半虚拟化的配置文件一样，除了<code>kernel</code>直接填写“hvmloader”，再增加一个<code>builder</code>，填上“hvm“就可以了。</p>

<p>之后，运行：</p>

<pre><code>$ sudo xl create hvm.cfg
</code></pre>

<p>来启动虚拟机，然后利用vnc来控制虚拟机：</p>

<pre><code>$ vncviewer localhost:0
</code></pre>

<p><img src="http://ytliu.info/images/2015-02-02-4.png" title="hvm vm" alt="hvm vm" /></p>

<h4>利用iso镜像安装虚拟机</h4>

<p>如果你没有虚拟机镜像，那么先用dd生成一个空的镜像，设置文件系统格式：</p>

<pre><code>$ dd if=/dev/zero of=/path/to/vm.img bs=1M count=10000
$ mkfs.ext4 /path/to/vm.img
</code></pre>

<p>这就相当于格式化了一个10G的ext4格式的硬盘，然后下载一个iso镜像，利用之前的配置文件，只需要多加一个disk选项，并将boot启动顺序做一个修改：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>*.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'><span class="nv">disk</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;file:/path/to/vm.img,xvda,rw&#39;</span>, <span class="s1">&#39;file:/path/to/iso,hdc:cdrom,r&#39;</span> <span class="o">]</span>
</span><span class='line'>...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;boot on floppy <span class="o">(</span>a<span class="o">)</span>, hard disk <span class="o">(</span>c<span class="o">)</span>, Network <span class="o">(</span>n<span class="o">)</span> or CD-ROM <span class="o">(</span>d<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;boot<span class="o">=</span><span class="s2">&quot;dc&quot;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后启动，安装镜像就好了。</p>

<h3>运行嵌套虚拟机</h3>

<p>这个是这篇博文的重点。其实在当前最新的Xen的版本中，这个功能是默认就开启的，具体的参看<a href="http://wiki.xenproject.org/wiki/Nested_Virtualization_in_Xen">这个链接</a>。</p>

<p>在一般的嵌套虚拟化中，整个架构是这样子的：</p>

<p><img src="http://ytliu.info/images/2015-02-02-5.png" title="nested virtualization" alt="nested virtualization" /></p>

<p>其中，L1是第一层虚拟机，在这个虚拟机中会再运行一个hypervisor，里面运行嵌套的那个虚拟机，被称为L2层。由于我们在L1和L2层运行的都是Xen hypervisor，所以整个架构看起来是这样子的：</p>

<p><img src="http://ytliu.info/images/2015-02-02-6.png" title="xen nested virtualization" alt="xen nested virtualization" /></p>

<p>当然，在这种情况下，还可以分成4个子情况：</p>

<ul>
<li>L1运行PV Xen，L2运行PV Xen</li>
<li>L1运行PV Xen，L2运行HVM Xen</li>
<li>L1运行HVM Xen，L2运行PV Xen</li>
<li>L1运行HVM Xen，L2运行HVM Xen</li>
</ul>


<p>其实方法都大同小异，我就介绍最简单的一种吧：</p>

<h4>L1运行HVM Xen，L2运行PV Xen</h4>

<p>按照之前“全虚拟化启动虚拟机”的步骤做下来，在启动虚拟机的时候加两个选项<code>hap=1</code>和<code>nestedhvm=1</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>l1-guest.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">kernel</span> <span class="o">=</span> <span class="s2">&quot;hvmloader&quot;</span>
</span><span class='line'><span class="nv">builder</span><span class="o">=</span><span class="s2">&quot;hvm&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;name <span class="o">=</span> <span class="s2">&quot;l1-guest&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;memory <span class="o">=</span> 1024
</span><span class='line'><span class="nv">vcpus</span> <span class="o">=</span> 2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;disk <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;file:/path/to/vm.img,xvda,rw&#39;</span> <span class="o">]</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;boot on floppy <span class="o">(</span>a<span class="o">)</span>, hard disk <span class="o">(</span>c<span class="o">)</span>, Network <span class="o">(</span>n<span class="o">)</span> or CD-ROM <span class="o">(</span>d<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;boot<span class="o">=</span><span class="s2">&quot;cd&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;hap<span class="o">=</span>1
</span><span class='line'><span class="nv">nestedhvm</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>进入虚拟机之后，按照和之前一样的步骤：</p>

<ul>
<li>编译和安装xen和xen-tools</li>
<li>运行：sudo dpkg-divert --divert /etc/grub.d/08_linux_xen --rename /etc/grub.d/20_linux_xen</li>
<li>运行<code>update-grub</code>更新grub</li>
<li>重启虚拟机，进入Xen的镜像</li>
</ul>


<p>这个时候按照前面说的步骤启动L2虚拟机：</p>

<ul>
<li>准备虚拟机镜像；</li>
<li>启动<code>xendomains</code>和<code>xencommons</code>两个服务；</li>
<li>准备“半虚拟化启动虚拟机”的配置文件</li>
<li>利用<code>xl</code>启动虚拟机镜像</li>
</ul>


<p>就能成功在L1的HVM虚拟机里面启动L2的PV虚拟机了：</p>

<p><img src="http://ytliu.info/images/2015-02-02-7.png" title="l2 run in l1" alt="l2 run in l1" /></p>

<p>另外推荐大家看一个人的<a href="http://www2.math.technion.ac.il/~nyh/nested/Thesis_OlivierBerghmans_FinalVersion.pdf">毕业论文</a>，讲的是在不同的平台上运行嵌套虚拟化的虚拟机，以及相关的性能比较。</p>
]]></content>
  </entry>
  
</feed>
