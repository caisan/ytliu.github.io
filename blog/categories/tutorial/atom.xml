<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Mctrain's Blog]]></title>
  <link href="http://ytliu.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://ytliu.github.io/"/>
  <updated>2016-12-15T11:12:49+08:00</updated>
  <id>http://ytliu.github.io/</id>
  <author>
    <name><![CDATA[Liu Yutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X86指令编码的那些事儿]]></title>
    <link href="http://ytliu.github.io/blog/2016/12/10/x86zhi-ling-bian-ma-de-na-xie-shi-er/"/>
    <updated>2016-12-10T22:46:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2016/12/10/x86zhi-ling-bian-ma-de-na-xie-shi-er</id>
    <content type="html"><![CDATA[<p>好久没有写博客了，感觉时间飞逝，转眼又到了一年的最后一个月了，不管怎么说这一年自己还是挺有收获的，当然这些是留在年末总结的时候来写的。这篇文章继续之前“那些事儿”系列，这次要介绍的，是关于X86指令编码的“事儿”。</p>

<p>如果你之前有见过或者听说过<code>prefix</code>，<code>opcode</code>，<code>ModR/M</code>，<code>escape opcode</code>这些词，但是其实并不是那么清楚它们是什么意思，那么恭喜你，今天你就将得到它们！首先还是先说明下这篇博客主要参考的资料，依旧是来自Intel的文档（这里再次安利下Intel文档，写的非常详细），不过这次是第二册的几个章节（Volume 2 - Chapter 2~4, 以及Appendix A）。</p>

<!-- more -->


<p>好了，废话不说，直接进入正题。</p>

<p>我们知道，CPU在运行的时候认的是一个个二进制的数字（或者人类为了方便说明，一般会把它们先转换成一个个十六进制的数字）。那么，就需要有一套编码机制，告诉计算机，这些数字代表的意思是什么。</p>

<p>我们还知道，CPU一般执行的都是一条条的指令，每个指令都有其相对应的含义，以及一些它们所需的附加信息，比如数据读取的原地址，或者写入的目标地址。而CPU就是用之前所谓的编码机制，来识别并且运行这一条条指令的。</p>

<p>因此，将这两个合起来，就是我们今天所要讨论的<code>指令编码</code>，如果用一个英文词的话，可以用<code>encoding</code>，如果用两个英文词的话，那就是<code>instruction encoding</code>，如果还要加第三个词的话，就变成了<code>x86 instructino encoding</code>。好了，我不无聊了，继续往下聊吧。</p>

<p>你之前可能听说过，x86是一种CISC指令集，CISC的全称是“Complex Instruction Set Computer”，表示的是一种复杂的指令集，其中一个最重要的复杂性在于在这个指令集中，指令是不定长的，要使得CPU在这种不定长的指令集里面确定每一条指令的含义，就需要一种特定的指令格式，下图显示了<code>Intel 64</code>和<code>IA-32</code>架构下的指令格式，当然，这两种架构所采用的都是x86指令编码：</p>

<p><img src="http://ytliu.info/images/2016-12-10-1.png" title="Intel 64 and IA-32 Architectures Instruction Format" alt="Instruction Format" /></p>

<p>可以看出，在x86的指令格式中，每条指令<strong>最多</strong>会有六部分组成，在这六部分中，只有<code>opcode</code>是必须的，其它的部分都是可选的。接下来我们一个部分一个部分进行介绍：</p>

<h4>Instruction prefix</h4>

<p><code>prefix</code>说白了就是对本条指令进行一个修饰，主要包含了以下四组可能的prefix：</p>

<ul>
<li>第一组：<code>lock</code> 和 <code>repeat</code></li>
</ul>


<p>其中，LOCK prefix保证该条指令对共享内存的访问是独占的；而repeat prefixes 表示这条指令会重复执行多次，直到某个条件满足位置。其中第二种repeat prefix只能用在对string的操作，或者对I/O的操作上。</p>

<ul>
<li>第二组：<code>segment override</code>，<code>branch hints</code> 和 <code>bound</code></li>
</ul>


<p>其中，segment override prefix会在执行这条指令的时候将默认的段寄存器给换掉；branch hints prefix主要应用在条件跳转指令（Jcc）中，可以协助CPU进行指令的prefetch；而bound prefix主要是用intel MPX硬件特性上。</p>

<ul>
<li>第三组：<code>operand-size override</code></li>
</ul>


<p>这个prefix主要是在解析指令的操作数的时候，可以在十六位或者三十二位的操作数大小间进行切换。</p>

<ul>
<li>第四组：<code>address-size override</code></li>
</ul>


<p>这个prefix主要是在进行指令寻址的时候，可以在十六位或者三十二位的地址大小中进行切换。</p>

<h4>Opcode</h4>

<p>接下来是最重要的opcode，基本上整个指令编码都是围绕opcode来进行的，所以opcode是整个指令的核心。</p>

<p>一个opcode可能的长度为1、2或3，除此之外，在之后会提到的<code>ModR/M</code>所占用的那个byte中，还有可能会有3个bits来表示opcode的一部分内容，当然，这3个bits主要用来定义一些额外的信息，包括：direction of operation, size of displacements, register encoding, condition codes, or sign extension，至于这三个bits是否属于opcode，或者它们表示什么信息，是由不同的opcode来决定的。</p>

<p>一个opcode可以由一个byte组成，我们称之为<code>1-byte opcode</code>，当然，与之对应的，就有<code>2-bytes opcode</code>和<code>3-bytes opcode</code>。其中，后两者一般会有一个被称为<code>escape opcode</code>的byte进行引导，该byte的数值是<code>0FH</code>。所以，一般情况下，<code>2-bytes opcode</code>就是<code>0FH</code>后面再加一个byte，而<code>3-bytes opcode</code>就是<code>0FH</code>后面再加两个bytes。</p>

<p>除此之外，还有一种可能是，在这个<code>escape opcode</code>之前，还有可能会出现一个被称为<code>mandatory prefix</code>的byte，这不属于我们之前提到的任何一种prefix，我感觉它一般是在某个新的硬件特性出来的时候，为该硬件特性新增加指令的一种做法。这个byte可能的取值为<code>66H</code>，<code>F2H</code>或者<code>F3H</code>。很有趣的一点是，<code>66H</code>也是<code>lock prefix</code>的取值，而<code>F2H</code>和<code>F3H</code>也是<code>repeat prefix</code>的取值。所以说，当遇到这些prefix的时候，还得需要根据之后的opcode来判断这是属于哪种prefix。</p>

<p>这里举一个例子，比如一个指令叫<code>PHADDW</code>，是在<code>XMM</code>特性中的一条指令，它的编码为<code>66 0F 38 01</code>，因此，它是一个<code>3-bytes opcode</code>，<code>66</code>是<code>mandatory prefix</code>（而不是<code>lock prefix</code>），<code>0F</code>是escape opcode，而最后两个bytes<code>38 01</code>就是另外两个opcode bytes。</p>

<h4>ModR/M 和 SIB</h4>

<p><code>ModR/M</code>主要是在对指令中的操作数进行寻址的时候需要用到的域，它由一个byte组成，如之前的图所示，<code>ModR/M</code>这一个byte又被分成了三部分：<code>mod</code>（由6~7两个bits组成），<code>reg/opcode</code>（由3~5三个bits组成），<code>r/m</code>（由0~2三个bits组成）。其中，如前所说，<code>reg/opcode</code>可以表示某个寄存器，或者作为opcode的三个额外bits进行使用。而<code>mod</code>和<code>r/m</code>结合，可以产生32种可能的值，包括了8个寄存器和24中寻址模式。</p>

<p>另外，在<code>ModR/M</code>三个部分可能的组合中，还有可能会涉及到另外一个寻址模式，被称为SIB，SIB也是由三部分组成：Scale，Index和Base。一般如果涉及到SIB，则相关的值就可以通过<code>base + index * scale</code>计算出来。</p>

<p>接下来，我们来详细解释下如何利用<code>ModR/M</code>和<code>SIB</code>进行寻址。这里主要有三张非常关键的表，可以说，利用<code>ModR/M</code>和<code>SIB</code>进行寻址都可以通过查这三张表完成。</p>

<p><img src="http://ytliu.info/images/2016-12-10-2.png" title="16-Bit Addressing Forms with the ModR/M Byte" alt="16-bit ModR/M" /></p>

<p><img src="http://ytliu.info/images/2016-12-10-3.png" title="32-Bit Addressing Forms with the ModR/M Byte" alt="32-bit ModR/M" /></p>

<p><img src="http://ytliu.info/images/2016-12-10-4.png" title="32-Bit Addressing Forms with the SIB Byte" alt="32-bit SIB" /></p>

<p>其中，可以利用第一张表对16位的地址寻址进行查询，利用第二张表对32位的地址寻找进行查询，而第三张对某些需要用到SIB的地址寻址进行查询。对于<code>ModR/M</code>表（即前两张表），我们看到中间一部分列出了00~FF所有的数字，这些数字是即为一个byte的所有可能值，该byte的组成之前也提到了，如下图所示：</p>

<p><img src="http://ytliu.info/images/2016-12-10-5.png" title="ModR/M Byte" alt="ModR/M byte" /></p>

<p>所以，当得到一个<code>ModR/M</code>的值，就可以查询这张表，这里举个例子，比如<code>ModR/M</code> byte的值为<code>CC</code>，那么我们找到<code>CC</code>对应的行和列，可以发现，它对应的行为<code>ESP/SP/AHMM4/XMM4</code>，列为<code>CL/CX/ECX/MM1/XMM1/1/001</code>。那么就将范围限定在了这几个寄存器上，当然，至于它最后要选哪个寄存器，则是由opcode来决定的。</p>

<p>同样的，对于需要用到<code>SIB</code>表（即最后一张表）的指令，同样的，我们获得<code>SIB</code>的数值（比如<code>CC</code>），发现它对应的行为<code>[ECX*8]</code>，列为<code>ESP</code>，即表示SIB最终的值的计算方法为<code>[ESP]+ECX*8</code>。</p>

<h4>Displacement 和 Immediate</h4>

<p>某些指令会在最后要求有一个用于计算内存地址的值，或者一个立即数。这部分很直接，就不解释了。</p>

<hr />

<h3>IA-32e mode</h3>

<p>上面提到的都是16位或者32位的寻址，而我们现在主要用的系统都是64位的，那么，在64位系统下的寻址又是怎么样的呢？</p>

<p>这里又要引入一个新的prefix：<code>REX prefix</code>，如下图所示：</p>

<p><img src="http://ytliu.info/images/2016-12-10-6.png" title="Prefix Ordering in 64-bit Mode" alt="REX prefix" /></p>

<p>这里需要注意的是，每条指令最多只能有一个表示<code>REX prefix</code>的byte，而且这个byte必须紧紧贴着opcode，不能放在其他的prefix之前。另外，<code>REX prefix</code>的格式如下图所示：</p>

<p><img src="http://ytliu.info/images/2016-12-10-7.png" title="REX Prefix Fields" alt="REX prefix format" /></p>

<p>其中，最高的4位是固定的值（<code>0100</code>），低4位分别代表了operand size，以及是否修改<code>ModR/M</code>和<code>SIB</code>的值。比如说下面四张图：</p>

<p><img src="http://ytliu.info/images/2016-12-10-8.png" title="REX Prefix 1" alt="REX prefix 1" /></p>

<p><img src="http://ytliu.info/images/2016-12-10-9.png" title="REX Prefix 2" alt="REX prefix 2" /></p>

<p><img src="http://ytliu.info/images/2016-12-10-10.png" title="REX Prefix 3" alt="REX prefix 3" /></p>

<p><img src="http://ytliu.info/images/2016-12-10-11.png" title="REX Prefix 4" alt="REX prefix 4" /></p>

<p>如果对应的R\X\B bit被设置上了，则会根据opcode来修改对应的<code>ModR/M</code>中<code>r/m</code>或者<code>reg/opcode</code>域中的值，或者<code>SIB</code>中<code>base</code>或者<code>index</code>域中的值。我们知道，这些域其实就是指定了某些寄存器，而基于<code>REX prefix</code>的修改其实就是将16或者32位的寄存器换成64位的，比如把<code>EAX</code>换成<code>RAX</code>这样。</p>

<hr />

<h3>opcode table</h3>

<p>好了，最关键的技能来了，教你如何看懂opcode table!</p>

<p>其实也就三张opcode table（或者叫opcode map也行），就是前面所说的<code>1-byte</code>, <code>2-bytes</code>和<code>3-bytes</code>。比如我们随便截一张图：</p>

<p><img src="http://ytliu.info/images/2016-12-10-12.png" title="opcode table random" alt="opcode table 1" /></p>

<p>这是一个<code>1-byte</code> opcode table，如果我们的opcode是<code>85</code>，则找到第八行第五列对应的那个小格子：<code>TEST (Ev, Gv)</code>。那么这个是什么意思呢？首先，<code>TEST</code>是opcode，<code>(Ev, Gv)</code>是这条opcode的寻址模式。<code>E</code>，<code>v</code>，<code>G</code>这些都是缩写，在opcode map中有很多缩写，这篇博文最后的附件中显示了它们的含义。可以看到，<code>E</code>表示opcode之后会跟一个<code>ModR/M</code> byte，用来表示操作数，该操作数可以是一个寄存器或者一个内存地址，如果是内存地址的话，该地址可以通过之后的SIB和displacement算出来；<code>v</code>表示这个操作数可能是一个16位的word，32为的doubleword，或者64位的quadword，具体情况要根据operand-size的属性决定（比如是否有<code>operand-size override prefix</code>，或者REX.W bit是否被置上等）；<code>G</code>代表<code>ModR/M</code>中的<code>reg</code>域会选择一个通用寄存器。
因此，有了这个opcode table之后，就可以接着往下去看对应的<code>ModR/M</code>、<code>SIB</code>以及可能存在的displacement了，然后再去查之前<code>ModR/M</code>和<code>SIB</code>相关的表，就能得到整条指令的意思，以及该指令所对应的寻址方式。</p>

<p>其实查询opcode table的整个流程特别简单。如果你想要模拟一个指令，你就在opcode table中搜索这条指令，然后找到其对应的小格子（比如前面例子中的那个<code>TEST (Ev, Gv)</code>），然后根据前面所的方法再去看后面的<code>ModR/M</code>和<code>SIB</code>等内容，一个个往下走就行了。</p>

<hr />

<h3>虚拟化环境中的指令模拟</h3>

<p>其实到这里，x86的指令编码部分基本上都讲完了。之所以还要加上这一小节，是想举个例子，练习练习。</p>

<p>我们知道，在虚拟化环境中，如果非特权级环境中的客户虚拟机执行了一条特权级指令，则会引发下陷，进入特权级别中的虚拟机监控器，由虚拟机监控器对该指令进行模拟。在虚拟化环境中有14条指令是会无条件引发虚拟机下陷（VMExit）的，它们是<code>CPUID</code>, <code>GETSEC</code>, <code>INVD</code>, <code>XSETBV</code>, <code>INVEPT</code>, <code>INVVPID</code>, <code>VMCALL</code>, <code>VMCLEAR</code>, <code>VMLAUNCH</code>, <code>VMPTRLD</code>, <code>VMPTRST</code>, <code>VMRESUME</code>, <code>VMXOFF</code>, <code>VMXON</code>。我们就以<code>VMCLEAR</code>这条指令为例，看看虚拟机监控器里面要如何对其进行模拟。</p>

<p>当然，最简单的办法就是在发生VMExit的时候直接去读取相应<code>RIP</code>的值，然后获得指令的opcode和其它内容，通过查表我们可以知道<code>VMCLEAR</code>指令的opcode是<code>66 0F C7 /6</code>，然后通过查opcode table，我们发现以下内容：</p>

<p><img src="http://ytliu.info/images/2016-12-10-13.png" title="opcode table for vmclear" alt="opcode table vmclear" /></p>

<p>这里需要注意的一点是，这个表示一个扩展表，是Intel为其它新添加的硬件特性重新扩展得到的opcode table，其实我们之前提到过，这里<code>66</code>是一个<code>mandatory prefix</code>，所以它的opcode是<code>0F C7</code>，另外，<code>ModR/M</code>中的<code>reg/opcode</code>用于补充opcode，所以这里的<code>/6</code>表示的是<code>ModR/M</code>中<code>reg/opcode</code>的值。</p>

<p>不管怎么样，<code>VMCLEAR</code>有3个bytes的opcode，然后从opcode table查询出来的值为<code>VMCLEAR (Mq)</code>，我们查询缩写表可以知道，<code>M</code>表示<code>ModR/M</code>用于表示内存寻址，而<code>q</code>表示一个64位的quadword（不管operand-size是什么）。因此，我们知道在这个opcode之后一定至少有一个表示<code>ModR/M</code>的byte，所以我们就可以继续读这个byte，然后通过<code>ModR/M</code>的寻址表来确定操作数的内存地址是什么了。具体的这里就不阐述了。</p>

<p>不过这里还需要提一点的是，其实最后我们发现，<code>VMCLEAR</code>采用的是SIB寻址的模式，而且对于它的寻址，可以不需要通过opcode table来进行，因为在虚拟化环境中，虚拟机下陷会将需要的信息填入VMCS的某些数据结构中，比如，对于特权指令产生的下陷，会将和这个指令相关的信息（特别是操作数寻址的信息）存入一个叫<code>VM-exit instruction information</code>的域中，这个域对于每种指令都会提供不同的存储信息的格式，因此我们在虚拟机监控器中对这些指令进行模拟的时候，其实是可以直接从<code>VM-exit instruction information</code>域中获取所需的信息的。</p>

<hr />

<p>附：opcode table中缩写码的含义：</p>

<ul>
<li>Codes for Addressing Method</li>
</ul>


<table>
<thead>
<tr>
<th align="center">Code </th>
<th align="left"> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">A </td>
<td align="left"> Direct address: the instruction has no ModR/M byte; the address of the operand is encoded in the instruction. No base register, index register, or scaling factor can be applied (for example, far JMP (EA)).</td>
</tr>
<tr>
<td align="center">B </td>
<td align="left"> The VEX.vvvv field of the VEX prefix selects a general purpose register.</td>
</tr>
<tr>
<td align="center">C </td>
<td align="left"> The reg field of the ModR/M byte selects a control register (for example, MOV (0F20, 0F22)).</td>
</tr>
<tr>
<td align="center">D </td>
<td align="left"> The reg field of the ModR/M byte selects a debug register (for example, MOV (0F21,0F23)).</td>
</tr>
<tr>
<td align="center">E </td>
<td align="left"> A ModR/M byte follows the opcode and specifies the operand. The operand is either a general-purpose register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, a displacement.</td>
</tr>
<tr>
<td align="center">F </td>
<td align="left"> EFLAGS/RFLAGS Register.</td>
</tr>
<tr>
<td align="center">G </td>
<td align="left"> The reg field of the ModR/M byte selects a general register (for example, AX (000)).</td>
</tr>
<tr>
<td align="center">H </td>
<td align="left"> The VEX.vvvv field of the VEX prefix selects a 128-bit XMM register or a 256-bit YMM register, determined by operand type. For legacy SSE encodings this operand does not exist, changing the instruction to destructive form.</td>
</tr>
<tr>
<td align="center">I </td>
<td align="left"> Immediate data: the operand value is encoded in subsequent bytes of the instruction.</td>
</tr>
<tr>
<td align="center">J </td>
<td align="left"> The instruction contains a relative offset to be added to the instruction pointer register (for example, JMP (0E9), LOOP).</td>
</tr>
<tr>
<td align="center">L </td>
<td align="left"> The upper 4 bits of the 8-bit immediate selects a 128-bit XMM register or a 256-bit YMM register, deter- mined by operand type. (the MSB is ignored in 32-bit mode)</td>
</tr>
<tr>
<td align="center">M </td>
<td align="left"> The ModR/M byte may refer only to memory (for example, BOUND, LES, LDS, LSS, LFS, LGS, CMPXCHG8B).</td>
</tr>
<tr>
<td align="center">N </td>
<td align="left"> The R/M field of the ModR/M byte selects a packed-quadword, MMX technology register.</td>
</tr>
<tr>
<td align="center">O </td>
<td align="left"> The instruction has no ModR/M byte. The offset of the operand is coded as a word or double word (depending on address size attribute) in the instruction. No base register, index register, or scaling factor can be applied (for example, MOV (A0–A3)).</td>
</tr>
<tr>
<td align="center">P </td>
<td align="left"> The reg field of the ModR/M byte selects a packed quadword MMX technology register.</td>
</tr>
<tr>
<td align="center">Q </td>
<td align="left"> A ModR/M byte follows the opcode and specifies the operand. The operand is either an MMX technology register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, and a displacement.</td>
</tr>
<tr>
<td align="center">R </td>
<td align="left"> The R/M field of the ModR/M byte may refer only to a general register (for example, MOV (0F20-0F23)).</td>
</tr>
<tr>
<td align="center">S </td>
<td align="left"> The reg field of the ModR/M byte selects a segment register (for example, MOV (8C,8E)).</td>
</tr>
<tr>
<td align="center">U </td>
<td align="left"> The R/M field of the ModR/M byte selects a 128-bit XMM register or a 256-bit YMM register, determined by operand type.</td>
</tr>
<tr>
<td align="center">V </td>
<td align="left"> The reg field of the ModR/M byte selects a 128-bit XMM register or a 256-bit YMM register, determined by operand type.</td>
</tr>
<tr>
<td align="center">W </td>
<td align="left"> A ModR/M byte follows the opcode and specifies the operand. The operand is either a 128-bit XMM register, a 256-bit YMM register (determined by operand type), or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, and a displacement.</td>
</tr>
<tr>
<td align="center">X </td>
<td align="left"> Memory addressed by the DS:rSI register pair (for example, MOVS, CMPS, OUTS, or LODS).</td>
</tr>
<tr>
<td align="center">Y </td>
<td align="left"> Memory addressed by the ES:rDI register pair (for example, MOVS, CMPS, INS, STOS, or SCAS).</td>
</tr>
</tbody>
</table>


<ul>
<li>Codes for Operand Type</li>
</ul>


<table>
<thead>
<tr>
<th align="center">Code </th>
<th align="left"> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">a </td>
<td align="left"> Two one-word operands in memory or two double-word operands in memory, depending on operand-size attribute (used only by the BOUND instruction).</td>
</tr>
<tr>
<td align="center">b </td>
<td align="left"> Byte, regardless of operand-size attribute.</td>
</tr>
<tr>
<td align="center">c </td>
<td align="left"> Byte or word, depending on operand-size attribute.</td>
</tr>
<tr>
<td align="center">d </td>
<td align="left"> Doubleword, regardless of operand-size attribute.</td>
</tr>
<tr>
<td align="center">dq </td>
<td align="left"> Double-quadword, regardless of operand-size attribute.</td>
</tr>
<tr>
<td align="center">p </td>
<td align="left"> 32-bit, 48-bit, or 80-bit pointer, depending on operand-size attribute. pd 128-bit or 256-bit packed double-precision floating-point data.</td>
</tr>
<tr>
<td align="center">pi </td>
<td align="left"> Quadword MMX technology register (for example: mm0).</td>
</tr>
<tr>
<td align="center">ps </td>
<td align="left"> 128-bit or 256-bit packed single-precision floating-point data.</td>
</tr>
<tr>
<td align="center">q </td>
<td align="left"> Quadword, regardless of operand-size attribute.</td>
</tr>
<tr>
<td align="center">qq </td>
<td align="left"> Quad-Quadword (256-bits), regardless of operand-size attribute. s 6-byte or 10-byte pseudo-descriptor.</td>
</tr>
<tr>
<td align="center">sd </td>
<td align="left"> Scalar element of a 128-bit double-precision floating data.</td>
</tr>
<tr>
<td align="center">ss </td>
<td align="left"> Scalar element of a 128-bit single-precision floating data.</td>
</tr>
<tr>
<td align="center">si </td>
<td align="left"> Doubleword integer register (for example: eax).</td>
</tr>
<tr>
<td align="center">v </td>
<td align="left"> Word, doubleword or quadword (in 64-bit mode), depending on operand-size attribute.</td>
</tr>
<tr>
<td align="center">w </td>
<td align="left"> Word, regardless of operand-size attribute.</td>
</tr>
<tr>
<td align="center">x </td>
<td align="left"> dq or qq based on the operand-size attribute.</td>
</tr>
<tr>
<td align="center">y </td>
<td align="left"> Doubleword or quadword (in 64-bit mode), depending on operand-size attribute.</td>
</tr>
<tr>
<td align="center">z </td>
<td align="left"> Word for 16-bit operand-size or doubleword for 32 or 64-bit operand-size.</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内存初始化（C语言部分）]]></title>
    <link href="http://ytliu.github.io/blog/2016/03/15/linuxnei-cun-chu-shi-hua-c/"/>
    <updated>2016-03-15T11:04:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2016/03/15/linuxnei-cun-chu-shi-hua-c</id>
    <content type="html"><![CDATA[<p>这篇博客接着<a href="http://ytliu.info/blog/2016/03/14/linuxnei-cun-chu-shi-hua-assembly/">上篇博客</a>，继续介绍Linux内核启动过程中内存的初始化过程。</p>

<p>相比于汇编代码，分析C代码有一个优势，因为在之前的汇编代码中已经开启了分页模式，所以可以通过一些symbol直接在某些函数上设置断点，然后通过gdb进行调试。如何用gdb调试内核可以参考<a href="http://ytliu.info/blog/2014/10/22/debugging-linux-kernel-using-gdb-and-qemu/">这篇博客</a>。</p>

<!-- more -->


<h3>进入x86_64_start_kernel</h3>

<p>之前我们讲到，在<code>secondary_startup_64</code>最后，我们通过far return进入了C语言实现的函数<code>x86_64_start_kernel</code>，那么这篇我们就从这个函数开始讲起。</p>

<p>这个函数在<code>arch/x86/kernel/head64.c</code>文件中，该函数有一个参数，是<code>char * real_mode_data</code>，这个参数是在之前通过<code>movq  %rsi, %rdi</code>传进来的。</p>

<p>在该函数的开头，先做了一些sanity检查：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Build</span><span class="o">-</span><span class="n">time</span> <span class="n">sanity</span> <span class="n">checks</span> <span class="n">on</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">image</span> <span class="n">and</span> <span class="n">module</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">area</span> <span class="n">mappings</span><span class="p">.</span> <span class="p">(</span><span class="n">these</span> <span class="n">are</span> <span class="n">purely</span> <span class="n">build</span><span class="o">-</span><span class="n">time</span> <span class="n">and</span> <span class="n">produce</span> <span class="n">no</span> <span class="n">code</span><span class="p">)</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">MODULES_VADDR</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">MODULES_VADDR</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">KERNEL_IMAGE_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">MODULES_LEN</span> <span class="o">+</span> <span class="n">KERNEL_IMAGE_SIZE</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">PUD_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">((</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">PMD_MASK</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">((</span><span class="n">MODULES_VADDR</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">PMD_MASK</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">MODULES_VADDR</span> <span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL</span><span class="p">));</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="o">!</span><span class="p">(((</span><span class="n">MODULES_END</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PGDIR_MASK</span><span class="p">)</span> <span class="o">==&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">(</span><span class="n">__START_KERNEL</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PGDIR_MASK</span><span class="p">)));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">fix_to_virt</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">end_of_fixed_addresses</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">MODULES_END</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>主要是针对Module地址的检查（module被映射在<code>0xffffffffa0000000</code>上面）。</p>

<p>之后做了一个操作，将之前建立的<code>identity-map</code>给清除掉了，因为我们现在已经用高地址进行页表翻译了，所以那个identity-map也就没有用了：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Wipe</span> <span class="n">all</span> <span class="n">early</span> <span class="n">page</span> <span class="n">tables</span> <span class="n">except</span> <span class="k">for</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">symbol</span> <span class="n">map</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__init</span> <span class="n">reset_early_page_tables</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PTRS_PER_PGD</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">early_level4_pgt</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pgd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">next_early_pgt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">write_cr3</span><span class="p">(</span><span class="n">__pa</span><span class="p">(</span><span class="n">early_level4_pgt</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Kill</span> <span class="n">off</span> <span class="n">the</span> <span class="n">identity</span><span class="o">-</span><span class="n">map</span> <span class="n">trampoline</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">reset_early_page_tables</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意这里有一个<code>__pa(early_level4_pgt)</code>，我们来看一下<code>__pa</code>的定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr_nodebug</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">use</span> <span class="n">the</span> <span class="n">carry</span> <span class="n">flag</span> <span class="n">to</span> <span class="n">determine</span> <span class="k">if</span> <span class="n">x</span> <span class="n">was</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">__START_KERNEL_map</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="p">((</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span> <span class="o">?</span> <span class="n">phys_base</span> <span class="o">:</span> <span class="p">(</span><span class="n">__START_KERNEL_map</span> <span class="o">-</span> <span class="n">PAGE_OFFSET</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr_nodebug</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">pa</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>   <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之后调用<code>clear_bss</code>，即将bss中的内容清零：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">add</span> <span class="n">a</span> <span class="n">printk</span> <span class="n">in</span> <span class="n">there</span><span class="p">.</span> <span class="n">printk</span> <span class="n">relies</span> <span class="n">on</span> <span class="n">the</span> <span class="n">PDA</span> <span class="n">which</span> <span class="n">is</span> <span class="n">not</span> <span class="n">initialized</span>
</span><span class='line'>   <span class="n">yet</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span> <span class="n">clear_bss</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">bss_start</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">__bss_stop</span> <span class="o">-</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">__bss_start</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">clear</span> <span class="n">bss</span> <span class="n">before</span> <span class="n">set_intr_gate</span> <span class="n">with</span> <span class="n">early_idt_handler</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">clear_bss</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后创建idtr gate：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">native_load_idt</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">desc_ptr</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dtr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&quot;lidt %0&quot;</span><span class="o">::</span><span class="s">&quot;m&quot;</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dtr</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">load_idt</span><span class="p">(</span><span class="n">dtr</span><span class="p">)</span> <span class="n">native_load_idt</span><span class="p">(</span><span class="n">dtr</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">NUM_EXCEPTION_VECTORS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">set_intr_gate</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">early_idt_handlers</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">load_idt</span><span class="p">((</span><span class="k">const</span> <span class="k">struct</span> <span class="n">desc_ptr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">idt_descr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后调用<code>copy_bootdata</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">copy_bootdata</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">real_mode_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span> <span class="n">command_line</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">cmd_line_ptr</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">boot_params</span><span class="p">,</span> <span class="n">real_mode_data</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">boot_params</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sanitize_boot_params</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">boot_params</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cmd_line_ptr</span> <span class="o">=</span> <span class="n">get_cmd_line_ptr</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">cmd_line_ptr</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">command_line</span> <span class="o">=</span> <span class="n">__va</span><span class="p">(</span><span class="n">cmd_line_ptr</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">boot_command_line</span><span class="p">,</span> <span class="n">command_line</span><span class="p">,</span> <span class="n">COMMAND_LINE_SIZE</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">copy_bootdata</span><span class="p">(</span><span class="n">__va</span><span class="p">(</span><span class="n">real_mode_data</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里面主要是copy一些boot的参数，之后调用<code>load_ucode_bsp</code>和<code>early_printk</code>，这里都不详述。</p>

<p>然后设置<code>init_level4_pgt</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">clear_page</span><span class="p">(</span><span class="n">init_level4_pgt</span><span class="p">);</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">set</span> <span class="n">init_level4_pgt</span> <span class="n">kernel</span> <span class="n">high</span> <span class="n">mapping</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">init_level4_pgt</span><span class="p">[</span><span class="mi">511</span><span class="p">]</span> <span class="o">=</span> <span class="n">early_level4_pgt</span><span class="p">[</span><span class="mi">511</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>后来还有一些函数调用和boot相关的，这里也不细说，最后调用<code>start_kernel</code>：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">x86_64_start_kernel</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">real_mode_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">x86_64_start_reservations</span><span class="p">(</span><span class="n">real_mode_data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">__init</span> <span class="n">x86_64_start_reservations</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">real_mode_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">start_kernel</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>start_kernel</h3>

<p>下面进入<code>start_kernel</code>函数，该函数定义在<code>init/main.c</code>文件中。</p>

<p>里面调用了很多函数来做各种目的的初始化，其中和内存初始化相关的函数调用如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">start_kernel</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">setup_arch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">command_line</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">setup_per_cpu_areas</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">build_all_zonelist</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">page_alloc_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">mm_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">setup_per_cpu_pageset</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
如下图所示（截图自<a href="http://guojing.me/linux-kernel-architecture/posts/init-mm-management/">这里</a>)：</p>

<p><img src="http://ytliu.info/images/2016-03-15-1.png" title="start kernel" alt="start_kernel" /></p>

<p>下面我们逐个函数进行介绍。</p>

<h4>setup_arch</h4>

<p>x86的<code>setup_arch</code>定义在<code>arch/x86/kernel/setup.c</code>文件中，其中和内存初始化相关的函数如下所示：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__init</span> <span class="nf">setup_arch</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">cmdline_p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">setup_memory_map</span><span class="p">();</span>
</span><span class='line'>  <span class="n">e820_reserve_setup_data</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">init_mm</span><span class="p">.</span><span class="n">start_code</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_mm</span><span class="p">.</span><span class="n">end_code</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">etext</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_mm</span><span class="p">.</span><span class="n">end_data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">edata</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_mm</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">e820_add_kernel_range</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">cleanup_highmap</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">init_mem_mapping</span><span class="p">();</span>
</span><span class='line'>  <span class="n">early_trap_pf_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">x86_init</span><span class="p">.</span><span class="n">paging</span><span class="p">.</span><span class="n">pagetable_init</span><span class="p">();</span> <span class="c1">// native_pagetable_init() -&gt; paging_init (arch/x86/mm/init_64.c)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中，前面一直是在通过BIOS获得E820内存分布（e820请查阅<a href="http://ytliu.info/blog/2015/07/30/xende-qi-dong-zhi-nei-cun-xiang-guan-shi-xian/">这篇博客</a>)，以及初始化<code>init_mm</code>。我们从<code>cleanup_highmap</code>开始分析，该函数在<code>arch/x86/mm/init_64.c</code>中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">head</span><span class="p">.</span><span class="n">S</span> <span class="n">code</span> <span class="n">sets</span> <span class="n">up</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">high</span> <span class="n">mapping</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>   <span class="n">from</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="n">to</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">size</span> <span class="p">(</span><span class="o">==</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span><span class="o">-&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">phys_base</span> <span class="n">holds</span> <span class="n">the</span> <span class="n">negative</span> <span class="n">offset</span> <span class="n">to</span> <span class="n">the</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">added</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">compile</span> <span class="n">time</span> <span class="n">generated</span> <span class="n">pmds</span><span class="p">.</span> <span class="n">This</span> <span class="n">results</span> <span class="n">in</span> <span class="n">invalid</span> <span class="n">pmds</span> <span class="n">up</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">point</span> <span class="n">where</span> <span class="n">we</span> <span class="n">hit</span> <span class="n">the</span> <span class="n">physaddr</span> <span class="mi">0</span> <span class="n">mapping</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">We</span> <span class="n">limit</span> <span class="n">the</span> <span class="n">mappings</span> <span class="n">to</span> <span class="n">the</span> <span class="n">region</span> <span class="n">from</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span> <span class="n">to</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span>
</span><span class='line'> <span class="o">*</span> <span class="n">is</span> <span class="n">rounded</span> <span class="n">up</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">2</span><span class="n">MB</span> <span class="n">boundary</span><span class="p">.</span> <span class="n">This</span> <span class="n">catches</span> <span class="n">the</span> <span class="n">invalid</span> <span class="n">pmds</span> <span class="n">as</span>
</span><span class='line'> <span class="o">*</span> <span class="n">well</span><span class="p">,</span> <span class="n">as</span> <span class="n">they</span> <span class="n">are</span> <span class="n">located</span> <span class="n">before</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span> <span class="n">cleanup_highmap</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">vaddr</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">vaddr_end</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_START_KERNEL_map</span> <span class="o">+</span> <span class="n">KERNEL_IMAGE_SIZE</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">roundup</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span><span class="p">,</span> <span class="n">PMD_SIZE</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pmd_t</span> <span class="o">*</span><span class="n">pmd</span> <span class="o">=</span> <span class="n">level2_kernel_pgt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Native</span> <span class="n">path</span><span class="p">,</span> <span class="n">max_pfn_mapped</span> <span class="n">is</span> <span class="n">not</span> <span class="n">set</span> <span class="n">yet</span><span class="p">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Xen</span> <span class="n">has</span> <span class="n">valid</span> <span class="n">max_pfn_mapped</span> <span class="n">set</span> <span class="n">in</span>
</span><span class='line'>   <span class="o">*</span>  <span class="n">arch</span><span class="o">/</span><span class="n">x86</span><span class="o">/</span><span class="n">xen</span><span class="o">/</span><span class="n">mmu</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="n">xen_setup_kernel_pagetable</span><span class="p">().</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">max_pfn_mapped</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">vaddr_end</span> <span class="o">=</span> <span class="n">__START_KERNEL_map</span> <span class="o">+</span> <span class="p">(</span><span class="n">max_pfn_mapped</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(;</span> <span class="n">vaddr</span> <span class="o">+</span> <span class="n">PMD_SIZE</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">vaddr_end</span><span class="p">;</span> <span class="n">pmd</span><span class="o">++</span><span class="p">,</span> <span class="n">vaddr</span> <span class="o">+=</span> <span class="n">PMD_SIZE</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">pmd_none</span><span class="p">(</span><span class="o">*</span><span class="n">pmd</span><span class="p">))</span>
</span><span class='line'>  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">vaddr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">_text</span> <span class="o">||</span> <span class="n">vaddr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>  <span class="n">set_pmd</span><span class="p">(</span><span class="n">pmd</span><span class="p">,</span> <span class="n">__pmd</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这段代码非常好理解，加上看注释，可以知道其功能就是将小于<code>_text</code>和大于<code>_brk_end</code>的地址都从页表中unmap掉。</p>

<p>接下来是<code>init_mem_mapping</code>这个函数，该函数位于<code>arch/x86/mm/init.c</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__init</span> <span class="nf">init_mem_mapping</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">end</span> <span class="o">=</span> <span class="n">max_pfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">ISA</span> <span class="n">range</span> <span class="n">is</span> <span class="n">always</span> <span class="n">mapped</span> <span class="n">regardless</span> <span class="n">of</span> <span class="n">memory</span> <span class="n">holes</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">init_memory_mapping</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ISA_END_ADDRESS</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">memory_map_top_down</span><span class="p">(</span><span class="n">ISA_END_ADDRESS</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">max_pfn</span> <span class="o">&gt;</span> <span class="n">max_low_pfn</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* can we preseve max_low_pfn ?*/</span>
</span><span class='line'><span class="n">max_low_pfn</span> <span class="o">=</span> <span class="n">max_pfn</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">load_cr3</span><span class="p">(</span><span class="n">swapper_pg_dir</span><span class="p">);</span>
</span><span class='line'>  <span class="n">__flush_tlb_all</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">early_memtest</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">max_pfn_mapped</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里面虽然代码少，但是信息量还是蛮大的，我们一个一个来看。</p>

<p>首先是<code>init_memory_mapping</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Setup</span> <span class="n">the</span> <span class="n">direct</span> <span class="n">mapping</span> <span class="n">of</span> <span class="n">the</span> <span class="n">physical</span> <span class="n">memory</span> <span class="n">at</span> <span class="n">PAGE_OFFSET</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">This</span> <span class="n">runs</span> <span class="n">before</span> <span class="n">bootmem</span> <span class="n">is</span> <span class="n">initialized</span> <span class="n">and</span> <span class="n">gets</span> <span class="n">pages</span> <span class="n">directly</span> <span class="n">from</span>
</span><span class='line'> <span class="o">*</span> <span class="n">the</span> <span class="n">physical</span> <span class="n">memory</span><span class="p">.</span> <span class="n">To</span> <span class="n">access</span> <span class="n">them</span> <span class="n">they</span> <span class="n">are</span> <span class="n">temporarily</span> <span class="n">mapped</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">__init_refok</span> <span class="n">init_memory_mapping</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>             <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">map_range</span> <span class="n">mr</span><span class="p">[</span><span class="n">NR_RANGE_MR</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nr_range</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;init_memory_mapping: [mem %#010lx-%#010lx]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">memset</span><span class="p">(</span><span class="n">mr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">nr_range</span> <span class="o">=</span> <span class="n">split_mem_range</span><span class="p">(</span><span class="n">mr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nr_range</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ret</span> <span class="o">=</span> <span class="n">kernel_physical_mapping_init</span><span class="p">(</span><span class="n">mr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">start</span><span class="p">,</span> <span class="n">mr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">end</span><span class="p">,</span>
</span><span class='line'>           <span class="n">mr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">page_size_mask</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">add_pfn_range_mapped</span><span class="p">(</span><span class="n">start</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">ret</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">ret</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里注释中提到的<code>PAGE_OFFSET</code>值为<code>0xffff880000000000</code>（<code>0xffff880000000000</code>到<code>0xffffc7ffffffffff</code>为所有物理地址的direct mapping）。</p>

<p>这里有两个主要的函数，我们先来看<code>split_mem_range</code>（位于<code>arch/x86/mm/init.c</code>）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__meminit</span> <span class="n">split_mem_range</span><span class="p">(</span><span class="k">struct</span> <span class="n">map_range</span> <span class="o">*</span><span class="n">mr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nr_range</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span>
</span><span class='line'>         <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>里面代码比较复杂，和之前在分析xen代码中某个函数有点像，这里就不逐段分析。简单说一下它做了什么吧。<code>split_mem_range</code>的作用就是将整个物理地址段进行了一个分类，把所有地址分为三类：</p>

<ul>
<li>大于1G的地址段</li>
<li>2M到1G的地址段</li>
<li>其它</li>
</ul>


<p>然后将<code>start</code>到<code>end</code>的物理地址段分别塞进这些段中，然后将每个段的信息保存在<code>mr</code>这个数据结构中。这个数据结构包括了每个地址段的起始地址、结束地址、以及alignment。最后有一个merge过程，将<code>mr</code>中相邻且alignment相同的项进行合并。</p>

<p>最后分出来的地址段的结果如下图所示：</p>

<p><img src="http://ytliu.info/images/2016-03-15-2.png" title="split_mem_range" alt="split_mem_range" /></p>

<p>另外一个函数为<code>kernel_physical_mapping_init</code>（位于<code>arch/x86/mm/init_64.c</code>）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">__meminit</span>
</span><span class='line'><span class="n">kernel_physical_mapping_init</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>       <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">,</span>
</span><span class='line'>       <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">page_size_mask</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">pgd_changed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">next</span><span class="p">,</span> <span class="n">last_map_addr</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">addr</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>  <span class="n">end</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(;</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span><span class="p">;</span> <span class="n">start</span> <span class="o">=</span> <span class="n">next</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pgd_t</span> <span class="o">*</span><span class="n">pgd</span> <span class="o">=</span> <span class="n">pgd_offset_k</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'><span class="n">pud_t</span> <span class="o">*</span><span class="n">pud</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PGDIR_MASK</span><span class="p">)</span> <span class="o">+</span> <span class="n">PGDIR_SIZE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">pgd_val</span><span class="p">(</span><span class="o">*</span><span class="n">pgd</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pud</span> <span class="o">=</span> <span class="p">(</span><span class="n">pud_t</span> <span class="o">*</span><span class="p">)</span><span class="n">pgd_page_vaddr</span><span class="p">(</span><span class="o">*</span><span class="n">pgd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">last_map_addr</span> <span class="o">=</span> <span class="n">phys_pud_init</span><span class="p">(</span><span class="n">pud</span><span class="p">,</span> <span class="n">__pa</span><span class="p">(</span><span class="n">start</span><span class="p">),</span>
</span><span class='line'>         <span class="n">__pa</span><span class="p">(</span><span class="n">end</span><span class="p">),</span> <span class="n">page_size_mask</span><span class="p">);</span>
</span><span class='line'>  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pud</span> <span class="o">=</span> <span class="n">alloc_low_page</span><span class="p">();</span>
</span><span class='line'><span class="n">last_map_addr</span> <span class="o">=</span> <span class="n">phys_pud_init</span><span class="p">(</span><span class="n">pud</span><span class="p">,</span> <span class="n">__pa</span><span class="p">(</span><span class="n">start</span><span class="p">),</span> <span class="n">__pa</span><span class="p">(</span><span class="n">end</span><span class="p">),</span>
</span><span class='line'>         <span class="n">page_size_mask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">.</span><span class="n">page_table_lock</span><span class="p">);</span>
</span><span class='line'><span class="n">pgd_populate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">,</span> <span class="n">pgd</span><span class="p">,</span> <span class="n">pud</span><span class="p">);</span>
</span><span class='line'><span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">.</span><span class="n">page_table_lock</span><span class="p">);</span>
</span><span class='line'><span class="n">pgd_changed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">pgd_changed</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sync_global_pgds</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">__flush_tlb_all</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">last_map_addr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是一个非常关键的函数，它的作用就是填充页表，将所有之前探寻到并且分割好的物理地址映射到对应的虚拟内存中，并在页表中体现出来。我们来逐段分析：</p>

<p>首先通过<code>__va</code>这个宏将物理地址转换成其对应的（direct mapping）虚拟地址，即加上<code>0xffff880000000000</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>  <span class="n">end</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后就是传统的走页表过程了，这里有个宏需要说明：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">swapper_pg_dir</span> <span class="n">init_level4_pgt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">mm_struct</span> <span class="n">init_mm</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">pgd</span> <span class="o">=</span> <span class="n">swapper_pg_dir</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">pgd_offset</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span> <span class="p">((</span><span class="n">mm</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pgd</span> <span class="o">+</span> <span class="n">pgd_index</span><span class="p">((</span><span class="n">address</span><span class="p">)))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">pgd_offset_k</span><span class="p">(</span><span class="n">address</span><span class="p">)</span> <span class="n">pgd_offset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">,</span> <span class="p">(</span><span class="n">address</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pgd_t</span> <span class="o">*</span><span class="n">pgd</span> <span class="o">=</span> <span class="n">pgd_offset_k</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>也就是说，在这个时候，pgt_dir从原来的<code>early_level4_pgt</code>变成了<code>init_level4_pgt</code>，这个数据结构同样是在<code>arch/x86/kernel/head_64.S</code>中定义的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">init_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span>   <span class="n">level3_ident_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">org</span>    <span class="n">init_level4_pgt</span> <span class="o">+</span> <span class="n">L4_PAGE_OFFSET</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span>   <span class="n">level3_ident_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">org</span>    <span class="n">init_level4_pgt</span> <span class="o">+</span> <span class="n">L4_START_KERNEL</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">48</span><span class="o">-</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">511</span> <span class="err">*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span>   <span class="n">level3_kernel_pgt</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span> <span class="o">+</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level3_ident_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level2_ident_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">511</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level2_ident_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Since</span> <span class="n">I</span> <span class="n">easily</span> <span class="n">can</span><span class="p">,</span> <span class="n">map</span> <span class="n">the</span> <span class="n">first</span> <span class="mi">1</span><span class="n">G</span><span class="p">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">set</span> <span class="n">NX</span> <span class="n">because</span> <span class="n">code</span> <span class="n">runs</span> <span class="n">from</span> <span class="n">these</span> <span class="n">pages</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">PMDS</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">PAGE_KERNEL_IDENT_LARGE_EXEC</span><span class="p">,</span> <span class="n">PTRS_PER_PMD</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因此，加上<code>init_level4_pgt</code>这个页表后，内存的分布图如下所示：</p>

<p><img src="http://ytliu.info/images/2016-03-15-3.png" title="init level4 pgt" alt="init level4 pgt" /></p>

<p>所以<code>kernel_physical_mapping_init</code>后面的代码就是根据不同<code>mr</code>数据结构中的地址段将这个页表进行填充，这里就不详述了。</p>

<p>在执行完<code>init_memory_mapping</code>之后，<code>init_mem_mapping</code>函数又执行了一个<code>memory_map_top_down</code>函数，里面其实也是根据不同的地址段，连续调用<code>init_range_memory_mapping</code>，从而间接调用<code>init_memory_mapping</code>函数。</p>

<p>最后，将<code>swapper_pg_dir</code>加载进<code>cr3</code>，完成页表的转换。</p>

<p>现在让我们回到<code>setup_arch</code>，调用<code>paging_init</code>（位于<code>arch/x86/mm/init_64.c</code>）。里面主要完成一些zones的初始化，不详述。</p>

<p>再次回到<code>start_kernel</code>，在<code>setup_arch</code>之后还陆续调用了几个和percpu以及memory zones，memory allocator相关的函数，这里也不详细说了。</p>

<p>这个系列就先简单介绍到这里，其实后面还有很多内容没有详细介绍，主要目的是搞清楚内核是如何创建页表的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内存初始化（汇编部分）]]></title>
    <link href="http://ytliu.github.io/blog/2016/03/14/linuxnei-cun-chu-shi-hua-assembly/"/>
    <updated>2016-03-14T20:47:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2016/03/14/linuxnei-cun-chu-shi-hua-assembly</id>
    <content type="html"><![CDATA[<p>之前有几篇博客详细介绍了Xen的内存初始化，确实感觉这部分内容蛮复杂的。这两天在看Linux内核启动中内存的初始化，也是看的云里雾里的，想尝试下边看边写，在写博客的过程中慢慢思考，最后也能把自己的思考分享给其它人。</p>

<!-- more -->


<p>这个系列主要分为两个部分，汇编部分和<a href="http://ytliu.info/blog/2016/03/15/linuxnei-cun-chu-shi-hua-c/">C语言部分</a>。</p>

<p>这篇博文主要介绍的是汇编部分。</p>

<p>注：这两篇博文介绍的都是64位系统。</p>

<h3>内核解压缩过程</h3>

<p>这个过程就不详述了，整个Linux内核是作为一个压缩过的镜像提供的，在执行内核代码之前，首先需要bootloader对其进行一个解压缩，对这部分有兴趣可以参看<a href="http://blog.sina.com.cn/s/blog_b02f77c80101db1t.html">这篇博客</a>。</p>

<h3>最初的页表什么样？</h3>

<p>解压结束后，会进行一个对elf格式的parse，然后对内核进行加载，最后进入<code>arch/x86/kernel/head_64.S</code>中的<code>startup_64</code>。</p>

<p><code>startup_64</code>主要完成分页功能启用，最后跳入C代码x86_64_start_kernel。在开始分析代码之前，我们要先来看看在内核的数据段中，初始化页表是长怎么样的？</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">INITDATA</span>
</span><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">511</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level3_kernel_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_dynamic_pgts</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="o">*</span><span class="n">EARLY_DYNAMIC_PAGE_TABLES</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="n">data</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">init_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level3_kernel_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="n">L3_START_KERNEL</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">48</span><span class="o">-</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">)</span><span class="o">-</span><span class="p">((</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="p">)</span><span class="o">*</span><span class="mi">511</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">30</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;&lt;/</span><span class="n">sup</span><span class="o">&gt;&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">510</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level2_kernel_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level2_fixmap_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level2_kernel_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="n">PMDS</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">__PAGE_KERNEL_LARGE_EXEC</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">KERNEL_IMAGE_SIZE</span><span class="o">/</span><span class="n">PMD_SIZE</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level2_fixmap_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">506</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level1_fixmap_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_START_KERNEL_map</span> <span class="o">+</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_TABLE</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="mi">8</span><span class="n">MB</span> <span class="n">reserved</span> <span class="k">for</span> <span class="n">vsyscalls</span> <span class="o">+</span> <span class="n">a</span> <span class="mi">2</span><span class="n">MB</span> <span class="n">hole</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">entries</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level1_fixmap_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这段数据结构还是比较清楚的，你把下面这两个宏<code>NEXT_PAGE</code>和<code>PMDS</code>代入上面的数据结构：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="n">balign</span> <span class="n">PAGE_SIZE</span><span class="p">;</span> \
</span><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Automate</span> <span class="n">the</span> <span class="n">creation</span> <span class="n">of</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">1</span> <span class="n">mapping</span> <span class="n">pmd</span> <span class="n">entries</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PMDS</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="n">PERM</span><span class="p">,</span> <span class="n">COUNT</span><span class="p">)</span>      <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>           \
</span><span class='line'>  <span class="p">.</span><span class="n">rept</span> <span class="p">(</span><span class="n">COUNT</span><span class="p">)</span> <span class="p">;</span>         \
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="p">(</span><span class="n">START</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PMD_SHIFT</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">PERM</span><span class="p">)</span> <span class="p">;</span> \
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">;</span>         \
</span><span class='line'>  <span class="p">.</span><span class="n">endr</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们就可以很轻易地画出下面这张图：</p>

<p><img src="http://ytliu.info/images/2016-03-14-1.png" title="Linux early page table in boot" alt="early page table" /></p>

<p>后面的初始化过程，就是建立在这个早期的页表结构中的。</p>

<h3>正式进入startup_64</h3>

<p>我们一段段来分析：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">startup_64:</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Compute</span> <span class="n">the</span> <span class="n">delta</span> <span class="n">between</span> <span class="n">the</span> <span class="n">address</span> <span class="n">I</span> <span class="n">am</span> <span class="n">compiled</span> <span class="n">to</span> <span class="n">run</span> <span class="n">at</span> <span class="n">and</span> <span class="n">the</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">address</span> <span class="n">I</span> <span class="n">am</span> <span class="n">actually</span> <span class="n">running</span> <span class="n">at</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">subq</span>  <span class="err">$</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Is</span> <span class="n">the</span> <span class="n">address</span> <span class="n">not</span> <span class="mi">2</span><span class="n">M</span> <span class="n">aligned</span><span class="o">?</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">andl</span>  <span class="err">$</span><span class="o">~</span><span class="n">PMD_PAGE_MASK</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">testl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">jnz</span> <span class="n">bad_address</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Is</span> <span class="n">the</span> <span class="n">address</span> <span class="n">too</span> <span class="n">large</span><span class="o">?</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">_text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">MAX_PHYSMEM_BITS</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">jnz</span> <span class="n">bad_address</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里的这段代码非常奇怪：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">leaq</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">subq</span>  <span class="err">$</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我想了好久，现在终于在Liangpig的指导下有了点眉目。（不确定的）解释如下：</p>

<p>首先<code>leaq  _text(%rip), %rbp</code>是一个相对寻址的指令，其并不是直接将<code>_text</code>的地址和当前<code>%rip</code>的值相加，而是<code>%rip</code>加上一个<code>_text</code>和它的相对地址，其实就是<code>$-7</code>（因为该地址的长度为7，而当前的<code>%rip</code>就是<code>_text</code>地址加上<code>7</code>），这个相对值是在link的时候计算出来的，可以参看<a href="http://stackoverflow.com/questions/9354941/retrieving-data-in-x86-64">这个问题</a>和<a href="http://stackoverflow.com/questions/3250277/how-to-use-rip-relative-addressing-in-a-64-bit-assembly-program">这个问题</a>。</p>

<p>这里另外需要注意的一点是，在当前这个时候，计算机还是通过实模式进行寻址的，所以内核的代码应该是被load到了一个低地址（而不是大于<code>0xffffffff8000000</code>的地址），因此，<code>%rbp</code>存储的也是一个低地址，表示的是内核的代码段被实际装载到内存到的地址，让我们假设是<code>0x3000000</code>。</p>

<p>那么<code>$_text - __START_KERNEL_map</code>是什么呢？我们来看下面的定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_START_KERNEL_map</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">AC</span><span class="p">(</span><span class="mh">0xffffffff80000000</span><span class="p">,</span> <span class="n">UL</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">__PHYSICAL_START</span>  <span class="n">ALIGN</span><span class="p">(</span><span class="n">CONFIG_PHYSICAL_START</span><span class="p">,</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                    <span class="n">CONFIG_PHYSICAL_ALIGN</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL</span>  <span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">__PHYSICAL_START</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">__START_KERNEL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="n">text</span> <span class="o">:</span> <span class="n">AT</span><span class="p">(</span><span class="n">ADDR</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span> <span class="o">-</span> <span class="n">LOAD_OFFSET</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_text</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>首先，<code>__START_KERNEL_map</code>是<code>0xffffffff80000000</code>，即内核代码和数据段在64位的虚拟地址空间中的最低地址段（<code>0xffffffff80000000</code>到<code>0xffffffffa0000000</code>这512MB的虚拟机之空间映射了内核段）。而<code>_text</code>表示的是<code>__START_KERNEL_map</code>加上了一段编译过程中指定的地址，在我机器内核的<code>.config</code>文件中为<code>0x1000000</code>。也就是说，如果<code>__START_KERNEL_map</code>映射的是物理地址为<code>0</code>的内存的话，那么在编译中我们期望的真正的物理地址就为<code>0x1000000</code>，也就是说，<code>$_text - __START_KERNEL_map</code>表示的是我们在编译过程中期望的内核段被装载到内存的起始地址，因此<code>subq  $_text - __START_KERNEL_map, %rbp</code>表示将当前内核段真实被装载到内存中的地址和编译过程中期望被装载到内存中的地址的差值赋值给<code>%rbx</code>，在我们的例子中即为<code>0x2000000</code>（<code>0x3000000</code> - <code>0x1000000</code>）。</p>

<p>之后我们就对这个真实被装载到内存中的地址做一些检查，包括是否2M对齐，以及有没有超过最大大小等等，这里就不详述了。</p>

<p>然后做的一件事就是调整初始化页表中的物理地址映射：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Fixup</span> <span class="n">the</span> <span class="n">physical</span> <span class="n">addresses</span> <span class="n">in</span> <span class="n">the</span> <span class="n">page</span> <span class="n">table</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">early_level4_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="n">L4_START_KERNEL</span><span class="o">*</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">level3_kernel_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="mi">510</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">level3_kernel_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="mi">511</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">level2_fixmap_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="mi">506</span><span class="o">*</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这又是一段相对寻址，由于页表处于数据段，所以需要根据其和<code>%rip</code>中的相对地址来定位到页表，然后将页表中的表项加上之前计算的相对偏移量。当然这里只处理了<code>early_level4_pgt</code>、<code>level3_kernel_pgt</code>和<code>level2_fixmap_pgt</code>，而真正映射内核段的<code>level2_kernel_pgt</code>会在之后进行fixup。</p>

<p>之后又进入了一段诡异的代码，来建立<code>identity mapping for the switchover</code>，我也不懂这里的<code>switchover</code>是什么，我们先来看下这段代码做了什么吧：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Set</span> <span class="n">up</span> <span class="n">the</span> <span class="n">identity</span> <span class="n">mapping</span> <span class="k">for</span> <span class="n">the</span> <span class="n">switchover</span><span class="p">.</span>  <span class="n">These</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">entries</span> <span class="n">should</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">NOT</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">have</span> <span class="n">the</span> <span class="n">global</span> <span class="n">bit</span> <span class="n">set</span><span class="o">!</span>  <span class="n">This</span> <span class="n">also</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">creates</span> <span class="n">a</span> <span class="n">bunch</span> <span class="n">of</span> <span class="n">nonsense</span> <span class="n">entries</span> <span class="n">but</span> <span class="n">that</span> <span class="n">is</span> <span class="n">fine</span> <span class="o">--</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">it</span> <span class="n">avoids</span> <span class="n">problems</span> <span class="n">around</span> <span class="n">wraparound</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">_text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">early_level4_pgt</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rbx</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PGDIR_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">leaq</span>  <span class="p">(</span><span class="mi">4096</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span><span class="p">)(</span><span class="o">%</span><span class="n">rbx</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="err">$</span><span class="mi">4096</span><span class="p">,</span> <span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PUD_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">andl</span>  <span class="err">$</span><span class="p">(</span><span class="n">PTRS_PER_PUD</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">4096</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">incl</span>  <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">andl</span>  <span class="err">$</span><span class="p">(</span><span class="n">PTRS_PER_PUD</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">4096</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="err">$</span><span class="mi">8192</span><span class="p">,</span> <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PMD_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="err">$</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_KERNEL_LARGE_EXEC</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_GLOBAL</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PMD_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'>  <span class="n">subq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'>  <span class="n">incl</span>  <span class="o">%</span><span class="n">ecx</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">:</span>
</span><span class='line'>  <span class="n">andq</span>  <span class="err">$</span><span class="p">(</span><span class="n">PTRS_PER_PMD</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rdi</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">incq</span>  <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="err">$</span><span class="n">PMD_SIZE</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">decl</span>  <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">jnz</span> <span class="mi">1</span><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们可以稍微进行一个计算，首先<code>%rdi</code>保存了当前内核代码段的首地址，<code>%rbx</code>保存了<code>early_level4_pgt</code>的地址，<code>%rax</code>是内核代码首地址对于level4页表的index，在当前即为0。所以<code>leaq  (4096 + _KERNPG_TABLE)(%rbx), %rdx</code>表示的是将<code>early_level4_pgt</code>所在的地址加上一个页的地址，作为第3级页表页，再加上相应的权限位，保存在<code>%rdx</code>中，然后通过<code>movq  %rdx, 0(%rbx,%rax,8)</code>和<code>movq  %rdx, 8(%rbx,%rax,8)</code>指令把<code>%rdx</code>作为一个表项，存在<code>early_level4_pgt</code>的第0和第1项中。</p>

<p>然后将<code>%rdx</code>再加上一个页的大小，作为第2级页表页，找到内核代码段对于level3页表的index，然后将第2级页表页加上对应的权限作为一个页表项存在刚刚建立的level3页表的第0项和第1项。</p>

<p>然后将<code>%rbx</code>加上两个页的大小，即第2级页表的位置，找到从<code>_text</code>到<code>_end</code>所有内核代码段对于level2页表的索引，然后将对应的地址+权限作为页表项逐个填到这个第2级页表中。</p>

<p>我们可以在<code>arch/x86/kernel/head_64.S</code>文件中找到这几个新添加的页表页的定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">INITDATA</span>
</span><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">511</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level3_kernel_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_dynamic_pgts</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="o">*</span><span class="n">EARLY_DYNAMIC_PAGE_TABLES</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>即紧接着<code>early_level4_pgt</code>，被称为<code>early_dynamic_pgts</code>。这个就是所谓的<code>identity mapping for the switchover</code>，表示在之后的一小段页表转换过程中会被用到的identity mapping。因为在页表中虚拟地址从低地址到高地址转换的过程中不可避免的会通过低位的虚拟地址进行索引，所以需要预先做个identity mapping的准备。</p>

<p>至此，页表变成了这个样子。</p>

<p><img src="http://ytliu.info/images/2016-03-14-2.png" title="Linux early page table 2 in boot" alt="early page table 2" /></p>

<p><code>startup_64</code>最后一步就是fixup内核段真正的物理页对应的页表项了，代码如下所示：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Fixup</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">text</span><span class="o">+</span><span class="n">data</span> <span class="k">virtual</span> <span class="n">addresses</span><span class="p">.</span> <span class="n">Note</span> <span class="n">that</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">we</span> <span class="n">might</span> <span class="n">write</span> <span class="n">invalid</span> <span class="n">pmds</span><span class="p">,</span> <span class="n">when</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">is</span> <span class="n">relocated</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">cleanup_highmap</span><span class="p">()</span> <span class="n">fixes</span> <span class="n">this</span> <span class="n">up</span> <span class="n">along</span> <span class="n">with</span> <span class="n">the</span> <span class="n">mappings</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">beyond</span> <span class="n">_end</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">level2_kernel_pgt</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="mi">4096</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">),</span> <span class="o">%</span><span class="n">r8</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">See</span> <span class="k">if</span> <span class="n">it</span> <span class="n">is</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">page</span> <span class="n">table</span> <span class="n">entry</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span>  <span class="n">testq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jz</span>  <span class="mf">2f</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">)</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">the</span> <span class="n">next</span> <span class="n">page</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span>  <span class="n">addq</span>  <span class="err">$</span><span class="mi">8</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">cmp</span> <span class="o">%</span><span class="n">r8</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">jne</span> <span class="mi">1</span><span class="n">b</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Fixup</span> <span class="n">phys_base</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">phys_base</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movq</span>  <span class="err">$</span><span class="p">(</span><span class="n">early_level4_pgt</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">jmp</span> <span class="mf">1f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这个过程的前半部分就是将<code>level2_kernel_pgt</code>中的表项进行一个个的检查，如果不是0（即为一个可能存在的页表项），则将其加上之前计算的真实地址和被期待地址的偏移量（<code>%rbp</code>）。</p>

<p>当这个fixup结束之后，将<code>%rbp</code>保存在<code>phys_base</code>这个地址中，然后再将<code>early_level4_pgt - __START_KERNEL_map</code>保存在<code>%rax</code>中。</p>

<p>接下来就进入<code>secondary_startup_64</code>。</p>

<h3>secondary_startup_64</h3>

<p>这部分代码的主要功能是一些模式的开启，以及相关数据结构的加载，我们同样逐段进行分析：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ENTRY</span><span class="p">(</span><span class="n">secondary_startup_64</span><span class="p">)</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Enable</span> <span class="n">PAE</span> <span class="n">mode</span> <span class="n">and</span> <span class="n">PGE</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="p">(</span><span class="n">X86_CR4_PAE</span> <span class="o">|</span> <span class="n">X86_CR4_PGE</span><span class="p">),</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rcx</span><span class="p">,</span> <span class="o">%</span><span class="n">cr4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">early</span> <span class="n">boot</span> <span class="n">stage</span> <span class="mi">4</span> <span class="n">level</span> <span class="n">pagetables</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="n">phys_base</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">cr3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里开启了PAE和PGE模式，并将其写到<code>%cr4</code>中，同时将初始页表的第四级页表地址写入了<code>%cr3</code>。至此，分页模式开启！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Ensure</span> <span class="n">I</span> <span class="n">am</span> <span class="n">executing</span> <span class="n">from</span> <span class="k">virtual</span> <span class="n">addresses</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="err">$</span><span class="mf">1f</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">jmp</span> <span class="o">*%</span><span class="n">rax</span>
</span><span class='line'><span class="mi">1</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Check</span> <span class="k">if</span> <span class="n">nx</span> <span class="n">is</span> <span class="n">implemented</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="mh">0x80000001</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">cpuid</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="o">%</span><span class="n">edx</span><span class="p">,</span><span class="o">%</span><span class="n">edi</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">EFER</span> <span class="p">(</span><span class="n">Extended</span> <span class="n">Feature</span> <span class="n">Enable</span> <span class="n">Register</span><span class="p">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="n">MSR_EFER</span><span class="p">,</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">rdmsr</span>
</span><span class='line'>  <span class="n">btsl</span>  <span class="err">$</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EFER_SCE</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Enable</span> <span class="n">System</span> <span class="n">Call</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">btl</span> <span class="err">$</span><span class="mi">20</span><span class="p">,</span><span class="o">%</span><span class="n">edi</span>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">No</span> <span class="n">Execute</span> <span class="n">supported</span><span class="o">?</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">jnc</span>     <span class="mf">1f</span>
</span><span class='line'>  <span class="n">btsl</span>  <span class="err">$</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EFER_NX</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">btsq</span>  <span class="err">$</span><span class="n">_PAGE_BIT_NX</span><span class="p">,</span><span class="n">early_pmd_flags</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span>  <span class="n">wrmsr</span>       <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Make</span> <span class="n">changes</span> <span class="n">effective</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">cr0</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CR0_STATE</span> <span class="p">(</span><span class="n">X86_CR0_PE</span> <span class="o">|</span> <span class="n">X86_CR0_MP</span> <span class="o">|</span> <span class="n">X86_CR0_ET</span> <span class="o">|</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">X86_CR0_NE</span> <span class="o">|</span> <span class="n">X86_CR0_WP</span> <span class="o">|</span> <span class="n">X86_CR0_AM</span> <span class="o">|</span> \
</span><span class='line'>   <span class="n">X86_CR0_PG</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movl</span>  <span class="err">$</span><span class="n">CR0_STATE</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Make</span> <span class="n">changes</span> <span class="n">effective</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">cr0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">a</span> <span class="n">boot</span> <span class="n">time</span> <span class="n">stack</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span> <span class="n">stack_start</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rsp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">zero</span> <span class="n">EFLAGS</span> <span class="n">after</span> <span class="n">setting</span> <span class="n">rsp</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="err">$</span><span class="mi">0</span>
</span><span class='line'>  <span class="n">popfq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面的代码进行了一系列的初始化，包括检查<code>nx</code>（non-execution）是否开启，创建EFER，创建cr0，以及设置一个启动时会用到的栈，并且将所有eflags清零。这里就不细讲了。</p>

<p>然后是加载早期的GDT：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">We</span> <span class="n">must</span> <span class="k">switch</span> <span class="n">to</span> <span class="n">a</span> <span class="n">new</span> <span class="n">descriptor</span> <span class="n">in</span> <span class="n">kernel</span> <span class="n">space</span> <span class="k">for</span> <span class="n">the</span> <span class="n">GDT</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">because</span> <span class="n">soon</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">won</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">have</span> <span class="n">access</span> <span class="n">anymore</span> <span class="n">to</span> <span class="n">the</span> <span class="n">userspace</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">addresses</span> <span class="n">where</span> <span class="n">we</span><span class="err">&#39;</span><span class="n">re</span> <span class="n">currently</span> <span class="n">running</span> <span class="n">on</span><span class="p">.</span> <span class="n">We</span> <span class="n">have</span> <span class="n">to</span> <span class="k">do</span> <span class="n">that</span> <span class="n">here</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">because</span> <span class="n">in</span> <span class="mi">32</span><span class="n">bit</span> <span class="n">we</span> <span class="n">couldn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">load</span> <span class="n">a</span> <span class="mi">64</span><span class="n">bit</span> <span class="n">linear</span> <span class="n">address</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">lgdt</span>  <span class="n">early_gdt_descr</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>初始化段寄存器：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">set</span> <span class="n">up</span> <span class="n">data</span> <span class="n">segments</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">xorl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">ds</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">ss</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">es</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">fs</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">gs</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Set</span> <span class="n">up</span> <span class="o">%</span><span class="n">gs</span><span class="p">.</span>
</span><span class='line'>   <span class="o">*</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">The</span> <span class="n">base</span> <span class="n">of</span> <span class="o">%</span><span class="n">gs</span> <span class="n">always</span> <span class="n">points</span> <span class="n">to</span> <span class="n">the</span> <span class="n">bottom</span> <span class="n">of</span> <span class="n">the</span> <span class="n">irqstack</span>
</span><span class='line'>   <span class="o">*</span> <span class="k">union</span><span class="p">.</span>  <span class="n">If</span> <span class="n">the</span> <span class="n">stack</span> <span class="n">protector</span> <span class="n">canary</span> <span class="n">is</span> <span class="n">enabled</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">located</span> <span class="n">at</span> <span class="o">%</span><span class="n">gs</span><span class="o">:</span><span class="mf">40.</span>  <span class="n">Note</span> <span class="n">that</span><span class="p">,</span> <span class="n">on</span> <span class="n">SMP</span><span class="p">,</span> <span class="n">the</span> <span class="n">boot</span> <span class="n">cpu</span> <span class="n">uses</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">init</span> <span class="n">data</span> <span class="n">section</span> <span class="n">till</span> <span class="n">per</span> <span class="n">cpu</span> <span class="n">areas</span> <span class="n">are</span> <span class="n">set</span> <span class="n">up</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="n">MSR_GS_BASE</span><span class="p">,</span><span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="n">initial_gs</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="n">initial_gs</span><span class="o">+</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">wrmsr</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里需要注意的是<code>%gs</code>的建立，它和per cpu变量相关，是一个比较关键的段寄存器。不过由于这个系列主要是和内存相关，所以这里就不详述了。</p>

<p>然后将参数传给<code>%rdi</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* rsi is pointer to real mode structure with interesting info.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt; pass it to C */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rsi</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最后就是一个通过far return的跳转：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Finally</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">run</span> <span class="n">C</span> <span class="n">code</span> <span class="n">and</span> <span class="n">to</span> <span class="n">be</span> <span class="n">on</span> <span class="n">real</span> <span class="n">kernel</span> <span class="n">address</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Since</span> <span class="n">we</span> <span class="n">are</span> <span class="n">running</span> <span class="n">on</span> <span class="n">identity</span><span class="o">-</span><span class="n">mapped</span> <span class="n">space</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">jump</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">full</span> <span class="mi">64</span><span class="n">bit</span> <span class="n">address</span><span class="p">,</span> <span class="n">this</span> <span class="n">is</span> <span class="n">only</span> <span class="n">possible</span> <span class="n">as</span> <span class="n">indirect</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">jump</span><span class="p">.</span>  <span class="n">In</span> <span class="n">addition</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="n">ensure</span> <span class="o">%</span><span class="n">cs</span> <span class="n">is</span> <span class="n">set</span> <span class="n">so</span> <span class="n">we</span> <span class="n">make</span> <span class="n">this</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">a</span> <span class="n">far</span> <span class="k">return</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="n">initial_code</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="err">$</span><span class="mi">0</span>    <span class="err">#</span> <span class="n">fake</span> <span class="k">return</span> <span class="n">address</span> <span class="n">to</span> <span class="n">stop</span> <span class="n">unwinder</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="err">$</span><span class="n">__KERNEL_CS</span>  <span class="err">#</span> <span class="n">set</span> <span class="n">correct</span> <span class="n">cs</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="o">%</span><span class="n">rax</span>    <span class="err">#</span> <span class="n">target</span> <span class="n">address</span> <span class="n">in</span> <span class="n">negative</span> <span class="n">space</span>
</span><span class='line'>  <span class="n">lretq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>initial_code</code>定义为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">GLOBAL</span><span class="p">(</span><span class="n">initial_code</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">x86_64_start_kernel</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里要注意的是，在<code>pushq $__KERNEL_CS</code>这条指令之前的寻址还是通过identity-map的页表进行寻址的，而在该指令之后，cs被赋值成<code>__KERNEL_CS</code>，就变成采用正常的页表进行寻址了，到这个时候，虚拟地址就变成高位的地址了（<code>0xffffffff80000000</code>~<code>0xffffffffa0000000</code>）。</p>

<p>最后我们提一下这个<code>lretq</code>，所谓的long return。可以参照<a href="http://docs.oracle.com/cd/E19620-01/805-4693/instructionset-68/index.html">这里</a>：</p>

<blockquote><p>For an intersegment (far) return, the address on the stack is a long pointer. The offset is popped first, followed by the selector.</p></blockquote>

<p>所以在rax之前，需要把<code>__KERNEL_CS</code>的selector也放在栈上。</p>

<p>最后一个问题：gdt是在什么时候初始化的？这个我一直都没有找到，这里就先不管了。</p>

<p>因此，最后进入了<code>x86_64_start_kernel</code>函数，这是一个C语言写的函数，所以，会在下一篇博客中进行介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Wifi Pineapple]]></title>
    <link href="http://ytliu.github.io/blog/2015/09/03/chu-shi-wifi-pineapple/"/>
    <updated>2015-09-03T15:45:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/09/03/chu-shi-wifi-pineapple</id>
    <content type="html"><![CDATA[<p>前段时间乃正回国的时候叫他帮我带回来一个“大菠萝”——Wifi Pineapple！不过时隔了好久到现在才有时间和心情开始玩它：</p>

<p><img src="http://ytliu.info/images/2015-09-03-1.png" title="wifi pineapple" alt="wifi pineapple" /></p>

<p>这是干嘛的呢？用专业术语来说，它是一个专门用来做无线安全渗透测试的小机器，这个小机器内置了一个重度修改的OpenWRT网络操作系统，其拥有者可以让它成为一个对外提供无线网络信号的系统，然后通过一系列配置来对连接上它的客户端进行渗透测试。如果换个说法，这就是一个可以伪装成无线信号点的攻击利器，当你在一些公共场合（如学校、咖啡店）的时候如果不小心（有意或者无意）连上了这个无线信号，那不好意思，你上网的所有隐私都会被攻击者获取。</p>

<p>很直观的来说，如果你将这个大菠萝连上电源，启动之后（绿灯和蓝灯亮起）：</p>

<p><img src="http://ytliu.info/images/2015-09-03-2.png" title="wifi pineapple boot" alt="wifi boot" /></p>

<p>就可以在你其它设备（如手机、电脑）的无线信号中搜索出一个新的信号：</p>

<p><img src="http://ytliu.info/images/2015-09-03-7.png" title="new wifi result" alt="wifi search" /></p>

<p>如果你连接上这个信号，则你所有的流量就会走大菠萝这个系统，从而攻击者就可以通过一些中间人攻击的方法获取你所有隐私，或者植入恶意软件之类的了。</p>

<p>具体的可以看<a href="http://wiki.wifipineapple.com/#!pineapple.md">这里</a>，<a href="http://www.freebuf.com/tools/9265.html">这里</a>，以及<a href="http://www.freebuf.com/articles/wireless/30874.html">这里</a>。这里就不详述了。</p>

<!-- more -->


<h4>硬件接口</h4>

<p>Wifi pineapple有如下几个接口：</p>

<ul>
<li>如下图，从左到右依次为：以太网口，USB接口，电源接口；</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-3.png" title="wifi pineapple interface 1" alt="wifi pineapple interface 1" /></p>

<p>其中以太网口可以用于连接计算机来<a href="http://wiki.wifipineapple.com/#!ics.md">共享计算机的无线网络</a>，USB接口可以用来连接Android手机来<a href="http://wiki.wifipineapple.com/#!ics.md#Android_ICS">共享手机的无线网络</a>，电源接口就是用来插电源线或者电池的。</p>

<ul>
<li>如下图：串口；</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-4.png" title="wifi pineapple interface 2" alt="wifi pineapple interface 2" /></p>

<p>我们可以利用串口连接线（比如下图的CP2012模块）和计算机连接，然后通过串口这个通道来连Wifi pineapple，从而进行对其的配置：</p>

<p><img src="http://ytliu.info/images/2015-09-03-8.png" title="usb to ttl" alt="usb to ttl" /></p>

<ul>
<li>如下图：DIP switches；</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-5.png" title="wifi pineapple interface 3" alt="wifi pineapple interface 3" /></p>

<p>用于控制启动的模式，比如可以对机器进行出厂值重置等。</p>

<ul>
<li>如下图：MicroUSB插槽。</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-6.png" title="wifi pineapple interface 4" alt="wifi pineapple interface 4" /></p>

<p>这相当于一个外部存储。</p>

<p>具体的这些硬件配置怎么用可以看<a href="http://wiki.wifipineapple.com/#">wifi pineapple的Wiki</a>。</p>

<p>另外，<a href="http://wiki.wifipineapple.com/#!pineapple_university.md#Hardware_Overview">这个视频</a>介绍的超级详细，强烈推荐！</p>

<h4>Wifi pineapple的启动</h4>

<p>当你插上电源，大菠萝就会自动启动。在第一次启动的时候会等比较久，因为它要进行初始化，比如找到查找文件，刷firmware之类的，在这个时候你可以看到各种颜色的灯一直闪着，不要着急，你可以参看下图来了解各个颜色的灯闪烁模式分别代表什么意思：</p>

<p><img src="http://ytliu.info/images/2015-09-03-9.png" title="wifi pineapple boot" alt="pineapple boot" /></p>

<p>也就是说在绿灯和蓝灯都完全亮起来（不再闪烁）的时候，就代表启动成功了。这个时候你查看你的wifi信号应该就可以看到大菠萝发出的信号了。</p>

<h4>连接和配置Wifi pineapple</h4>

<p>这个是最重要的，因为我希望对其具有完全的掌控权，所以我要能进到这个系统。最理想的方法是通过ssh登录进去，然后“为所欲为”。</p>

<p>其中Linux和Windows可以很方便的登录进去，如果你有一根网线的话。方法可以参看<a href="http://wiki.wifipineapple.com/#!ics.md">这里</a>。不过最方便的是用Android的USB Tether了，把大菠萝和android用USB连起来，然后在Android的<code>设置-&gt;无线和网络-&gt;网络共享和便携式热点</code>里面把<code>USB网络共享</code>打开就行了。然后就可以通过<code>ssh root@172.16.42.1</code>连接进去了。</p>

<p><img src="http://ytliu.info/images/2015-09-03-10.png" title="wifi pineapple ssh" alt="pineapple ssh" /></p>

<p>另外，当你知道wifi pineapple的IP之后，你也可以通过浏览器输入<code>172.16.42.1:1471</code>来访问其Web UI：</p>

<p><img src="http://ytliu.info/images/2015-09-03-11.png" title="wifi pineapple web ui" alt="pineapple web ui" /></p>

<p>有了这些之后，就可以干很多很多事啦！这些就是后话了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSM-FLASK学习笔记]]></title>
    <link href="http://ytliu.github.io/blog/2015/06/10/xsm-flaskxue-xi-bi-ji/"/>
    <updated>2015-06-10T10:40:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/06/10/xsm-flaskxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>XSM-FLASK全称为：<strong>X</strong>en <strong>S</strong>ecurity <strong>M</strong>odules - <strong>FL</strong>ux <strong>A</strong>dvanced <strong>S</strong>ecurity <strong>K</strong>ernel。这篇博文对其进行一个简单的介绍，资料主要翻译自<a href="http://wiki.xen.org/wiki/Xen_Security_Modules_:_XSM-FLASK">这里</a>。</p>

<p>XSM是Xen提供的一个安全框架，允许管理者对整个系统进行细粒度的控制，换句话说，即运行管理者定义一套规则来管理虚拟机之间，虚拟机与Xen之间的交互，以及对系统资源（memory，device）的访问。</p>

<p>FLASK是XSM中的一个模块实现，当然，之后可能还有其他的模块，那就是后话了。下面是一些例子，列举了XSM-FLASK可以做的几件事：</p>

<ul>
<li>禁止两台虚拟机之间通过event channel和grant table进行通信；</li>
<li>将一些需要特权级别的操作安全地grant给某些非特权级虚拟机；</li>
<li>控制哪些虚拟机能使用device passthrough；</li>
<li>限制或者审计特权虚拟机中进行的某些特定操作；</li>
<li>限制特权虚拟机对其他虚拟机的任意内存映射；</li>
<li>将hypervisor中的不同模块（比如qemu和xenstore）进行隔离，防止它们之间互相影响。</li>
</ul>


<p>以上是一些基本说明，下面会具体介绍如何使用FLASK，以及FLASK中规则的一些语法定义。</p>

<!-- more -->


<hr />

<h3>FLASK及其policy的编译流程</h3>

<p>在Xen 4.3之后的版本都对FLASK进行了比较全面的支持，如果要开启FLASK，需要在编译Xen之前修改<code>Config.mk</code>文件，将<code>XSM_ENABLE</code>和<code>FLASK_ENABLE</code>设成<code>y</code>，然后再开始编译。</p>

<p>编译完Xen之后，需要编译FLASK的policy，在这之前需要先安装checkpolicy：</p>

<pre><code>$ aptitude install checkpolicy
</code></pre>

<p>然后编译：</p>

<pre><code>$ cd $XEN
$ make -C tools/flask/policy
</code></pre>

<p>之后会在<code>$XEN/tools/flask/policy</code>目录下生成一个叫做<code>xenpolicy-$XEN_FULLVESION</code>的文件，这个就是生成的flask policy。</p>

<hr />

<h3>启动Xen（with FLASK）</h3>

<p>在重启机器之前，我们需要在grub的配置中加上flask的选项，修改<code>/etc/default/grub</code>文件：</p>

<pre><code>GRUB_CMDLINE_XEN_DEFAULT="flask=&lt;OPTION&gt;"
</code></pre>

<p>其中，OPTIONs包括：</p>

<ul>
<li><code>permissive</code>表示：如果在bootloader阶段找到了一个policy，则会被加载；如果没有，或者发生错误，错误报告会被写到一个buffer，但是不会阻止系统启动。该模式可以通过<code>xl setenforce</code>改为<code>enforcing</code>模式；</li>
<li><code>enforcing</code>表示：在创建domain0之前会强制要求提供一个policy，否则无法启动系统；</li>
<li><code>late</code>表示：在bootloader阶段不会load相关的policy，可以在系统启动之后通过<code>xl loadpolicy</code>加载相应的policy，一旦policy被加载则进入enforcing模式；</li>
<li><code>disabled</code>表示：XSM会被设成dummy module，该模块和没有编译XSM所产生的效果是一样的，另外，一旦采用这个模式之后，FLASK是无法被重新加载的。</li>
</ul>


<p>需要注意的一点是，FLASK的policy需要被放在一个grub可以访问的目录下，如<code>/boot/flask/</code>，否则FLASK不会开启。另外，该policy选项需要写入grub的配置中，放在multiboot下面，如下所示：</p>

<pre><code>multiboot /boot/xen-VERSION.gz dom0_mem=1024M,max:1024M flask=enforcing
module /boot/vmlinuz-X.Y-amd64 root=/dev/mapper/vg_system-root ro quiet
module /boot/initrd.img-X.Y
module /boot/flask/xenpolicy-VERSION
</code></pre>

<hr />

<h3>利用XSM security label创建虚拟机</h3>

<p>当通过上面所提到的方式启动Xen之后，FLASK也就开启了，那么我们在创建虚拟机的时候就需要在其配置中增加一个security label（安全标签），否则，该虚拟机会被标记为“unlabeled”，例子如下所示：</p>

<pre><code>seclabel='system_u:system_r:domU_t'
</code></pre>

<p>安全标签有<code>user</code>,<code>role</code>和<code>type</code>表示，这些会在之后进行介绍。另外我们需要在policy中对相应的主体进行正确的权限设置。对于“unlabeled”的虚拟机，如果FLASK并没进入enforcing模式，或者进入了enforcing模式但定义了相关标签的权限，则不会有问题，否则，在其调用某些操作的时候会被禁止。</p>

<p>通过<code>xl list -Z</code>命令可以查看当前虚拟机所具有的安全标签。</p>

<p>通过<code>xl dmesg | grep avc</code>命令可以查看FLASK相关的log记录。</p>

<hr />

<h3>FLASK policies</h3>

<h4>增加一个security module</h4>

<p>我们可以把<strong>security module（安全模块）</strong>当做将一系列规则进行封装所产生的集合，如果要增加一个自定义的安全模块，我们需要在<code>$XEN/tools/flask/policy/policy/modules.conf</code>文件中加一行：</p>

<pre><code>&lt;module_name&gt; = on
</code></pre>

<p>同时在<code>$XEN/tools/flask/policy/policy/modules/&lt;module_name&gt;</code>目录下增加两个文件：</p>

<pre><code>&lt;module_name&gt;.te
&lt;module_name&gt;.if
</code></pre>

<p>其中<code>.te</code>文件定义了相应规则的的描述，而<code>.if</code>文件定义了一系列在<code>.te</code>文件中会被用到的宏（macros）。</p>

<p>在XSM-FLASK中有一个默认的模块：xen。如果存在多个模块（比如用户自己定义了多个模块），那么这些模块中不能有重复的<code>type</code>和<code>role</code>的定义。当模块定义好之后，可以参照'FLASK policy的编译流程'进行编译，并将其放在目标目录中（如<code>/boot/flask</code>)，这样在xen启动的时候就会加载，或者通过<code>xl loadpolicy</code>进行手动加载。</p>

<h4>定义Types, roles, users和attributes</h4>

<p>在安全模块中会定义许多规则，对于一个特定的规则，说白了就是规定了某个主体（source subject）对另一个主体（target subject）进行的一系列访问和操作（如hypercall）的权限（deny or allow），比如规定：</p>

<pre><code>某个集合中的虚拟机（source）不能向（deny）虚拟机监控器Xen（target）调用某个hypercall（operation）
</code></pre>

<p>那么这些集合就需要通过一系列的层级进行定义，也就引入了接下来需要讨论的<code>type</code>, <code>role</code>, <code>users</code>和<code>attributes</code>。可以结合<code>$XEN/tools/flask/policy/policy/modules/xen.te</code>文件中的例子进行更具体的了解。</p>

<p><strong>Policy Attribute</strong></p>

<p><code>attribute</code>定义了一个抽象的属性，它可以被附属在接下来要介绍的<code>type</code>主体上，即表示某个<code>type</code>具备哪些<code>attributes</code>。</p>

<p><strong>Policy Type</strong></p>

<p><code>type</code>是整个policy定义规范中最低的一个主体级别，它可以被用来在某个规则中指定source和target的类型。定义<code>type</code>的方式是：</p>

<pre><code>type new_type_t &lt;attributes&gt;;
</code></pre>

<p>比如在示例文件中，定义了一个<code>type</code>：</p>

<pre><code>type xen_t, xen_type, mls_priv;
</code></pre>

<p>其中<code>xen_t</code>即为<code>type</code>的标示符，而后面的<code>xen_type</code>和<code>mls_priv</code>则是相应的<code>attribute</code>，也就是说每个<code>type</code>可能会带有多个不同的<code>attributes</code>。</p>

<p>当我们需要定义一个规则的时候，可以通过<code>type</code>来指定对应的源和目标主体。比如需要定义某个hypercall的调用是被允许的，可以这么写：</p>

<pre><code>allow &lt;source type&gt; &lt;target type&gt;:&lt;security class&gt; &lt;hypercall&gt;;
</code></pre>

<p>其中，<code>security class</code>会在之后介绍，简单来说，它定义了一系列具有相关性的hypercall的集合。一个具体的例子：</p>

<pre><code>allow dom0_t security_t:security check_context;
</code></pre>

<p>定义了<code>dom0_t</code> type的主体可以向<code>security_t</code> type主体调用<code>security class</code>中的<code>check_context</code> hypercall。</p>

<p>另外，如果同时定义多个同一个class中的hypercall，可以用<code>{}</code>将其括起来，例如：</p>

<pre><code>allow dom0_t dom0_t:resource { add remove };
</code></pre>

<p>除了用<code>type</code>表示的主体，我们也可以直接用<code>attribute</code>来表示主体，如：</p>

<pre><code>allow domain_type xen_t:xen tmem_op;
</code></pre>

<p>即表示所有具有domain_type属性的type主体都可以向<code>xen_t</code> type主体调用<code>xen class</code>中的<code>tmem_op</code> hypercall。</p>

<p><strong>Policy Role</strong></p>

<p><code>role</code>是处于<code>type</code>上一层级的主体级别，用户可以定义某个<code>role</code>由多个<code>types</code>组成，比如：</p>

<pre><code>role system_r
role system_r types { xen_type domain_type };
</code></pre>

<p>可以看到，<code>role</code>的<code>types</code>是采用<code>attribute</code>的方式定义的，即定义具有某个<code>attribute</code>的所有<code>types</code>都属于这个<code>role</code>。如果要定义具有某个<code>attribute</code>的除掉某个<code>type</code>的所有<code>types</code>，则通过在该<code>type</code>之前加上一个<code>-</code>进行标示，如：</p>

<pre><code>role vm_r
role vm_r types {domain_type -dom0_t };
</code></pre>

<p><strong>Policy Users</strong></p>

<p><code>user</code>作为policy中的最高层级的主体级别，它并不被定义在<code>.te</code>文件中，它们是被定义在<code>$XEN/tools/flask/policy/policy/users</code>文件中。因此我们可以跨安全模块共用同一个<code>user</code>。在默认情况下，FLASK定义了三个users：system_u, customer_t和customer_2。</p>

<h4>增加Policy constraints</h4>

<p>FLASK可以通过在<code>$XEN/tools/flask/policy/policy/constraints</code>文件中定义规则来限制某些操作。在默认的情况下，FLASK规则定义了两条constraints（限制规则）来防止不同用户之间event channel和grant table的交互。一条限制规则语法如下：</p>

<pre><code>constrain &lt;security class&gt; { &lt;hypercall&gt; } ( expression );
</code></pre>

<p>比如例子中的：</p>

<pre><code>constrain grant { map_read map_write copy } (
  u1 == system_u or
  u2 == system_u or
  u1 == u2
);
</code></pre>

<p>这条限制规则表示如果属于<code>grant class</code>的这些hypercall可以被执行，当且仅当expression中的条件成立。其中，expression可以包含之前定义好的所有<code>user</code>, <code>role</code>和<code>type</code>主体，其语法规则如下：</p>

<pre><code>expression : (expresion)
      | not expression
      | expression and expression
      | expression or expression
      | u1 op u2
      | r1 role_op r2
      | t1 op t2
      | u1 op names
      | u2 op names
      | r1 op names
      | r2 op names
      | t1 op names
      | t2 op names

op : == | !=
role_op : == | != | eq | dom | domby | incomp

names : name | { name_list }
name_list : name | name_list name
</code></pre>

<h3>Security classes</h3>

<p><code>security class</code>被定义在<code>$XEN/xen/xsm/flask/policy/access_vectors</code>文件中，每个hypercall被分配在了其中一个class中，需要注意的是，每一个class最多只能有32个hypercalls。下面简单介绍下默认的几个classes，相关的hypercall的描述可以直接看<a href="http://wiki.xen.org/wiki/Xen_Security_Modules_:_XSM-FLASK#Security_classes">这里</a>。</p>

<ul>
<li><code>class xen</code>包含了所有在hypervisor中进行的操作，其source为执行hypercall的domain，target为xen (<code>xen_t</code> type);</li>
<li><code>class domain &amp; class domain2</code>包含了某个domain调用另一个domain或者调用自己的操作，source为执行hypercall的domain，target为被调用的domain（包括<code>_self</code>和<code>_target</code>的type）;</li>
<li><code>class hvm</code>类似于<code>domain</code>，除了它是针对HVM domain；</li>
<li><code>class event</code>用于描述event channels；</li>
<li><code>class grant</code>用于描述grant mapping；</li>
<li><code>class mmu</code>用于描述不是采用grant机制映射的内存页；</li>
<li><code>class shadow</code>（这个不清楚是干嘛的）；</li>
<li><code>class resource</code>用于描述硬件设备passthrough所使用的资源，包括IRQ, MMIO regions, I/O ports, PCI device等；</li>
<li><code>class security</code>用于描述和FLASK相关的操作。</li>
</ul>


<hr />

<p>以上即为XSM-FLASK最基本的介绍，我也还正处于学习阶段，其它更细节的部分和更直观的实例会在以后的博文中进行说明。</p>
]]></content>
  </entry>
  
</feed>
