<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tool | Mctrain's Blog]]></title>
  <link href="http://ytliu.github.io/blog/categories/tool/atom.xml" rel="self"/>
  <link href="http://ytliu.github.io/"/>
  <updated>2016-12-15T12:22:01+08:00</updated>
  <id>http://ytliu.github.io/</id>
  <author>
    <name><![CDATA[Liu Yutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初识Wifi Pineapple]]></title>
    <link href="http://ytliu.github.io/blog/2015/09/03/chu-shi-wifi-pineapple/"/>
    <updated>2015-09-03T15:45:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2015/09/03/chu-shi-wifi-pineapple</id>
    <content type="html"><![CDATA[<p>前段时间乃正回国的时候叫他帮我带回来一个“大菠萝”——Wifi Pineapple！不过时隔了好久到现在才有时间和心情开始玩它：</p>

<p><img src="http://ytliu.info/images/2015-09-03-1.png" title="wifi pineapple" alt="wifi pineapple" /></p>

<p>这是干嘛的呢？用专业术语来说，它是一个专门用来做无线安全渗透测试的小机器，这个小机器内置了一个重度修改的OpenWRT网络操作系统，其拥有者可以让它成为一个对外提供无线网络信号的系统，然后通过一系列配置来对连接上它的客户端进行渗透测试。如果换个说法，这就是一个可以伪装成无线信号点的攻击利器，当你在一些公共场合（如学校、咖啡店）的时候如果不小心（有意或者无意）连上了这个无线信号，那不好意思，你上网的所有隐私都会被攻击者获取。</p>

<p>很直观的来说，如果你将这个大菠萝连上电源，启动之后（绿灯和蓝灯亮起）：</p>

<p><img src="http://ytliu.info/images/2015-09-03-2.png" title="wifi pineapple boot" alt="wifi boot" /></p>

<p>就可以在你其它设备（如手机、电脑）的无线信号中搜索出一个新的信号：</p>

<p><img src="http://ytliu.info/images/2015-09-03-7.png" title="new wifi result" alt="wifi search" /></p>

<p>如果你连接上这个信号，则你所有的流量就会走大菠萝这个系统，从而攻击者就可以通过一些中间人攻击的方法获取你所有隐私，或者植入恶意软件之类的了。</p>

<p>具体的可以看<a href="http://wiki.wifipineapple.com/#!pineapple.md">这里</a>，<a href="http://www.freebuf.com/tools/9265.html">这里</a>，以及<a href="http://www.freebuf.com/articles/wireless/30874.html">这里</a>。这里就不详述了。</p>

<!-- more -->


<h4>硬件接口</h4>

<p>Wifi pineapple有如下几个接口：</p>

<ul>
<li>如下图，从左到右依次为：以太网口，USB接口，电源接口；</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-3.png" title="wifi pineapple interface 1" alt="wifi pineapple interface 1" /></p>

<p>其中以太网口可以用于连接计算机来<a href="http://wiki.wifipineapple.com/#!ics.md">共享计算机的无线网络</a>，USB接口可以用来连接Android手机来<a href="http://wiki.wifipineapple.com/#!ics.md#Android_ICS">共享手机的无线网络</a>，电源接口就是用来插电源线或者电池的。</p>

<ul>
<li>如下图：串口；</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-4.png" title="wifi pineapple interface 2" alt="wifi pineapple interface 2" /></p>

<p>我们可以利用串口连接线（比如下图的CP2012模块）和计算机连接，然后通过串口这个通道来连Wifi pineapple，从而进行对其的配置：</p>

<p><img src="http://ytliu.info/images/2015-09-03-8.png" title="usb to ttl" alt="usb to ttl" /></p>

<ul>
<li>如下图：DIP switches；</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-5.png" title="wifi pineapple interface 3" alt="wifi pineapple interface 3" /></p>

<p>用于控制启动的模式，比如可以对机器进行出厂值重置等。</p>

<ul>
<li>如下图：MicroUSB插槽。</li>
</ul>


<p><img src="http://ytliu.info/images/2015-09-03-6.png" title="wifi pineapple interface 4" alt="wifi pineapple interface 4" /></p>

<p>这相当于一个外部存储。</p>

<p>具体的这些硬件配置怎么用可以看<a href="http://wiki.wifipineapple.com/#">wifi pineapple的Wiki</a>。</p>

<p>另外，<a href="http://wiki.wifipineapple.com/#!pineapple_university.md#Hardware_Overview">这个视频</a>介绍的超级详细，强烈推荐！</p>

<h4>Wifi pineapple的启动</h4>

<p>当你插上电源，大菠萝就会自动启动。在第一次启动的时候会等比较久，因为它要进行初始化，比如找到查找文件，刷firmware之类的，在这个时候你可以看到各种颜色的灯一直闪着，不要着急，你可以参看下图来了解各个颜色的灯闪烁模式分别代表什么意思：</p>

<p><img src="http://ytliu.info/images/2015-09-03-9.png" title="wifi pineapple boot" alt="pineapple boot" /></p>

<p>也就是说在绿灯和蓝灯都完全亮起来（不再闪烁）的时候，就代表启动成功了。这个时候你查看你的wifi信号应该就可以看到大菠萝发出的信号了。</p>

<h4>连接和配置Wifi pineapple</h4>

<p>这个是最重要的，因为我希望对其具有完全的掌控权，所以我要能进到这个系统。最理想的方法是通过ssh登录进去，然后“为所欲为”。</p>

<p>其中Linux和Windows可以很方便的登录进去，如果你有一根网线的话。方法可以参看<a href="http://wiki.wifipineapple.com/#!ics.md">这里</a>。不过最方便的是用Android的USB Tether了，把大菠萝和android用USB连起来，然后在Android的<code>设置-&gt;无线和网络-&gt;网络共享和便携式热点</code>里面把<code>USB网络共享</code>打开就行了。然后就可以通过<code>ssh root@172.16.42.1</code>连接进去了。</p>

<p><img src="http://ytliu.info/images/2015-09-03-10.png" title="wifi pineapple ssh" alt="pineapple ssh" /></p>

<p>另外，当你知道wifi pineapple的IP之后，你也可以通过浏览器输入<code>172.16.42.1:1471</code>来访问其Web UI：</p>

<p><img src="http://ytliu.info/images/2015-09-03-11.png" title="wifi pineapple web ui" alt="pineapple web ui" /></p>

<p>有了这些之后，就可以干很多很多事啦！这些就是后话了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first Alfred 2 Workflow by Ruby]]></title>
    <link href="http://ytliu.github.io/blog/2014/04/14/my-first-alfred-2-workflow-by-ruby/"/>
    <updated>2014-04-14T14:54:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2014/04/14/my-first-alfred-2-workflow-by-ruby</id>
    <content type="html"><![CDATA[<p>These two days I'm studying how to effiently use Alfred 2. Yesterday I bought its <a href="https://buy.alfredapp.com/">Powerpack Single License</a> (17 Euro), so that I can import or create my own Workflow!</p>

<p>I should say it is really fun to do such things, it makes me believing that I can take more control over my own Mac Air.</p>

<p>In this post I will show how to write a simple workflow using ruby. The code can be downloaded from my <a href="https://github.com/ytliu/alfred2-ascii-translator">github page</a>, it is a very simple program that can translate between each character and its corresponding ASCII code, just like this:</p>

<p>You can translate from an array of decimal ASCII code to their characters:</p>

<p><img src="http://ytliu.info/images/2014-04-14-1.png" title="My Alfred 2 workflow - ascii translator 1" alt="ascii effect 1" /></p>

<p>Or from hexadecimal ASCII code to their characters:</p>

<p><img src="http://ytliu.info/images/2014-04-14-2.png" title="My Alfred 2 workflow - ascii translator 2" alt="ascii effect 2" /></p>

<p>Or from characters to their corresponding ASCII codes:</p>

<p><img src="http://ytliu.info/images/2014-04-14-3.png" title="My Alfred 2 workflow - ascii translator 3" alt="ascii effect 3" /></p>

<p>So now let's begin!</p>

<!-- more -->


<p>Firstly I should say why I use ruby is just because I like it! Thanks for <a href="https://github.com/zhaocai">zhaocai</a> who have implemented the <a href="http://zhaocai.github.io/alfred2-ruby-template/">alfred2-ruby-template</a>, which makes creating Alfred2 Workflow using ruby much more simpler.</p>

<p>At first, you should download the <a href="https://github.com/zhaocai/alfred2-ruby-template">template</a> from github, and rename it whatever you like:</p>

<pre><code>$ git clone https://github.com/zhaocai/alfred2-ruby-template.git
$ mv alfred2-ruby-template alfred2-ascii-translator
$ cd alfred2-ascii-translator
</code></pre>

<p>update the <code>domain</code>, <code>id</code>, <code>path</code> attribute in <code>config.yml</code> file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;bundle_id = &quot;domain.id&quot;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">path</span> <span class="n">is</span> <span class="n">the</span> <span class="n">relative</span> <span class="n">path</span> <span class="n">to</span> <span class="n">the</span> <span class="n">workflow</span> <span class="k">in</span> <span class="n">the</span> <span class="n">project</span> <span class="n">root</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;hr /</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">path</span><span class="p">:</span> <span class="n">ascii</span>
</span><span class='line'><span class="ss">domain</span><span class="p">:</span> <span class="n">me</span><span class="o">.</span><span class="n">ytliu</span>
</span><span class='line'><span class="nb">id</span><span class="p">:</span> <span class="n">alfred2</span><span class="o">-</span><span class="n">ascii</span><span class="o">-</span><span class="n">translator</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;If you are using Alfred&#39;s advanced Dropbox sync, indicate the path shown in&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Alfred</span> <span class="no">Preferences</span> <span class="o">&gt;</span> <span class="no">Advanced</span> <span class="o">&gt;</span> <span class="ss">Syncing</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;dropbox: ~/</span><span class="no">Dropbox</span><span class="o">/</span><span class="no">Alfred</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>the last option: <code>dropbox</code> is when you use Alfred's advance Dropbox sync, as explained above, you can find in <code>Alfred Preferences &gt; Advanced &gt; Syncing</code></p>

<p><img src="http://ytliu.info/images/2014-04-14-4.png" title="Alfred Dropbox Sync Option" alt="alfred dropbox sync" /></p>

<p>After that, we can change the main folder to what we want it to be (actually here you can remain as before: <code>workflow</code>, but make sure the <code>path</code> attribute in <code>config.yml</code> should be consistent with it).</p>

<pre><code>$ mv workflow ascii
</code></pre>

<p>Now we should setup our ruby environment.</p>

<p>Firstly, we can create a new gemset (I've been stuck in the gemset problem for a long time, where there're many versions of gem packages and make me confused. So here just create a new one, and make it clean).</p>

<pre><code>$ rvm gemset create alfred_ruby_set
$ rvm use 2.0.0@alfred_ruby_set
</code></pre>

<p>Note here the ruby version I'm using is 2.0.0, I think other version can also be ok.</p>

<p>At the very beginning of installing all other gems, we should install the <code>plist</code> and <code>bundler</code> gem:</p>

<pre><code>$ gem install plist
$ gem install bundler
</code></pre>

<p>Then install other gems using <code>bundle:install</code>:</p>

<pre><code>$ rake bundle:install
</code></pre>

<p>Normally it will install all the gems you need. The gems are list in the <code>Gemfile</code> file (e.g., here it is the <code>ascii/Gemfile</code>).</p>

<pre><code>$ cat ascii/Gemfile
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ascii/Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem &quot;plist&quot;</span>
</span><span class='line'><span class="sr">gem &quot;alfred-workflow&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can install the template workflow, we just type:</p>

<pre><code>$ rake install
</code></pre>

<p>or if you are using Dropbox sync as mentioned before, you can type:</p>

<pre><code>$ rake dbxinstall
</code></pre>

<p>this will create a soft link in the right place, for my case, it just execute:</p>

<pre><code>ln -sf /Users/luisleo/Software/AlfredWorkflow/alfred2-ascii-translator/workflow /Users/luisleo/Dropbox/Alfred/Alfred.alfredpreferences/workflows/me.ytliu.alfred2-ascii-translator`
</code></pre>

<p>Then when you open the <code>Alfred Preference &gt; Workflow</code>, you can see a new workflow added:</p>

<p><img src="http://ytliu.info/images/2014-04-14-5.png" title="Alfred Workflow List" alt="alfred workflow list" /></p>

<p>Here you can double click it to change some of the information like name, description and so on:</p>

<p><img src="http://ytliu.info/images/2014-04-14-6.png" title="Alfred Workflow 1" alt="alfred workflow 1" /></p>

<p>You can also double click the panel with "test feedback", to see the keywords which can trigger the workflow:</p>

<p><img src="http://ytliu.info/images/2014-04-14-7.png" title="Alfred Workflow 2" alt="alfred workflow 2" /></p>

<p>You can also change the icon of your workflow. For my example, I just change it to what I need:</p>

<p><img src="http://ytliu.info/images/2014-04-14-8.png" title="Alfred Workflow" alt="my alfred workflow" /></p>

<p>You can see that in the Script, the content is <code>/usr/bin/ruby ./main.rb {query}</code>, which means when triger this action, it will execute this script. Now let's see what happens in the <code>main.rb</code> located in <code>ascii</code> folder:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ascii/main.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;encoding: utf-8&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s2">&quot;./bundle/bundler/setup&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;alfred&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Alfred.with_friendly_error do |alfred|</span>
</span><span class='line'><span class="sr">  fb = alfred.feedback&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># add an arbitrary feedback</span>
</span><span class='line'>  <span class="n">fb</span><span class="o">.</span><span class="n">add_item</span><span class="p">({</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;:uid      =&amp;gt; &quot;&quot;                     ,</span>
</span><span class='line'><span class="sr">:title    =&amp;gt; &quot;Just a Test&quot;          ,</span>
</span><span class='line'><span class="sr">:subtitle =&amp;gt; &quot;feedback item&quot;        ,</span>
</span><span class='line'><span class="sr">:arg      =&amp;gt; &quot;A test feedback Item&quot; ,</span>
</span><span class='line'><span class="sr">:valid    =&amp;gt; &quot;yes&quot;                  ,</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  })&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">eql?</span> <span class="s2">&quot;failed&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;alfred.with_rescue_feedback = true</span>
</span><span class='line'><span class="sr">raise Alfred::NoBundleIDError, &quot;Wrong Bundle ID Test!&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">puts</span> <span class="n">fb</span><span class="o">.</span><span class="n">to_xml</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>From this code, you can see that all code are put in the block:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ascii/main.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Alfred</span><span class="o">.</span><span class="n">with_friendly_error</span> <span class="k">do</span> <span class="o">|</span><span class="n">alfred</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The input parameters can be retrieved from <code>ARGV</code>. If we want to output something, we can use the <code>fb.add_item</code> API:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ascii/main.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;add an arbitrary feedback&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">fb</span><span class="o">.</span><span class="n">add_item</span><span class="p">({</span>
</span><span class='line'>  <span class="ss">:uid</span>      <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span>                     <span class="p">,</span>
</span><span class='line'>  <span class="ss">:title</span>    <span class="o">=&gt;</span> <span class="s2">&quot;Just a Test&quot;</span>          <span class="p">,</span>
</span><span class='line'>  <span class="ss">:subtitle</span> <span class="o">=&gt;</span> <span class="s2">&quot;feedback item&quot;</span>        <span class="p">,</span>
</span><span class='line'>  <span class="ss">:arg</span>      <span class="o">=&gt;</span> <span class="s2">&quot;A test feedback Item&quot;</span> <span class="p">,</span>
</span><span class='line'>  <span class="ss">:valid</span>    <span class="o">=&gt;</span> <span class="s2">&quot;yes&quot;</span>                  <span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">fb</span><span class="o">.</span><span class="n">to_xml</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So when you open Alfred, input <code>test feedback</code>, you can see like this:</p>

<p><img src="http://ytliu.info/images/2014-04-14-9.png" title="test feedback example" alt="test feedback example" /></p>

<p>That's quite simple.</p>

<p>So here come to my ASCII Translator:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ascii/main.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;encoding: utf-8&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span> <span class="k">unless</span> <span class="n">defined?</span> <span class="no">Gem</span> <span class="c1"># rubygems is only needed in 1.8</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;./bundle/bundler/setup&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;alfred&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def show_chars(fb, result)</span>
</span><span class='line'><span class="sr">  fb.add_item({&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="ss">:uid</span>      <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">:title</span>    <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">:subtitle</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">:arg</span>      <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">:valid</span>    <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;yes&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;special_ascii = [&#39;NUL&#39;, &#39;SOH&#39;, &#39;STX&#39;, &#39;ETX&#39;, &#39;EOT&#39;, &#39;ENQ&#39;, &#39;ACK&#39;, &#39;BEL&#39;, &#39;BS&#39;, &#39;TAB&#39;, &#39;LF&#39;, &#39;VT&#39;, &#39;FF&#39;, &#39;CR&#39;, &#39;SO&#39;, &#39;SI&#39;, &#39;DLE&#39;, &#39;DC1&#39;, &#39;DC2&#39;, &#39;DC3&#39;, &#39;DC4&#39;, &#39;NAK&#39;, &#39;SYN&#39;, &#39;ETB&#39;, &#39;CAN&#39;, &#39;EM&#39;, &#39;SUB&#39;, &#39;ESC&#39;, &#39;FS&#39;, &#39;GS&#39;, &#39;RS&#39;, &#39;US&#39;]</span>
</span><span class='line'><span class="sr">special_ascii_7f = &#39;del&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Alfred</span><span class="o">.</span><span class="n">with_friendly_error</span> <span class="k">do</span> <span class="o">|</span><span class="n">alfred</span><span class="o">|</span>
</span><span class='line'>  <span class="n">alfred</span><span class="o">.</span><span class="n">with_rescue_feedback</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">fb</span> <span class="o">=</span> <span class="n">alfred</span><span class="o">.</span><span class="n">feedback</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  type = ARGV[0]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">=~</span> <span class="sr">/[d|h|c]/</span><span class="p">)</span> <span class="o">==</span> <span class="kp">nil</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;raise Alfred::InvalidFormat, &quot;Usage: ascii [d|h|c] args&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="s1">&#39;d&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;query = ARGV[1..-1].map(&amp;amp;:to_i)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  elsif type == &#39;h&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">query</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:hex</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;query = ARGV[1..-1].join(&quot; &quot;)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">result</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="s1">&#39;c&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;result = query.bytes.map { |c| &quot;0x</span><span class="si">#{</span><span class="n">c</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="si">}</span><span class="sr">&quot; }</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">query</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">q</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mh">0x20</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">special_ascii</span><span class="o">[</span><span class="n">q</span><span class="o">]</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">q</span> <span class="o">==</span> <span class="mh">0x7f</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">special_ascii_7f</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">q</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mh">0x7f</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">q</span><span class="o">.</span><span class="n">chr</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s1">&#39;undefined&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  for i in (0..result.size/</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;show_chars(fb, result[i*10..[result.size-1, i*10+9].min].join(&quot; &quot;).strip)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  puts fb.to_xml</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you can read ruby, you can surely read my code. Here I just don't explain, you can see the README in <a href="https://github.com/ytliu/alfred2-ascii-translator">github page</a>, to have a idea of how to use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVM support in Libvmi]]></title>
    <link href="http://ytliu.github.io/blog/2014/03/27/kvm-support-in-libvmi/"/>
    <updated>2014-03-27T16:50:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2014/03/27/kvm-support-in-libvmi</id>
    <content type="html"><![CDATA[<p>Several months ago I've post 2 blogs to introduce <a href="http://ytliu.info/blog/2013/08/04/libvmi-setup/">how to setup libvmi</a> and <a href="http://ytliu.info/blog/2013/08/14/write-introspection-tools-using-libvmi/">how to write your own tools using libvmi</a>. These two posts are based on Xen virtualization environment. Today I'm trying to use Libvmi for KVM virtual machine introspection, which need more effort to do such task.</p>

<p>In the rest of this blog, I will briefly introduce why this effort need to be done and how to do that.</p>

<!-- more -->


<hr />

<p>Before we start, let's firstly see how document in libvmi github page saying about <em>KVM Support</em>:</p>

<blockquote><p>If you would like LibVMI to work on KVM VM's, you must do some additional setup. This is because KVM doesn't have much built-in capability for introspection.</p>

<p>You only need one memory access technique. LibVMI will first look for the QEMU-KVM patch and use that if it is installed. Otherwise it will fall back to using GDB.</p></blockquote>

<p>And now Libvmi provide 3 ways to support KVM introspection:</p>

<ul>
<li>Enable GDB access to your KVM VM, which is the slowest approach;</li>
<li>Patch QEMU-KVM with the provided patch, which is much faster;</li>
<li>Use Shm-snapshot Support to introspect on a memory snapshot, which is the fatest one.</li>
</ul>


<p>In this blog, I'll not consider the GDB method since it will introduce much overhead, and only discuss about the second QEMU-KVM patch way. While the third Shm-snapshot will be introduced in the future.</p>

<p>So as far as I'm concerned, why Libvmi require applying a qemu patch to introspect KVM virtual machine is for following reasons:</p>

<ul>
<li>Libvmi use libvirt framework API to manage and get data from guest virtual machine;</li>
<li>However, unlike libxenctrl used in Xen, libvirt for KVM does not provide any API to map Guest Physical Address (GPA) to Host Virtual Address (HVA);</li>
<li>While in qemu, there is a function called <code>cpu_physical_memory_map</code> in <code>qemu/exec.c</code> file which can map guest GPA to HVA.</li>
</ul>


<p>So what the patch actually do is use Qemu Machine Protocal (QMP) mechanism for libvmi to pass the GPA, and call the internal function <code>cpu_physical_memory_map</code> located in <code>qemu/exec.c</code> in Qemu, and finally get the mapped HVA back.</p>

<hr />

<p>Actually the patch are used for some specific qemu versions, so I think I should just tell why it works, and how to make it work in general.</p>

<h4>Create a connection inside Qemu for Libvmi to communicate</h4>

<p>The entry function is <code>do_physical_memory_access()</code>, we can put it anywhere, for example, Libvmi patch put it in <code>qemu/monitor.c</code> file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">do_physical_memory_access</span><span class="p">(</span><span class="n">Monitor</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mon</span><span class="p">,</span> <span class="k">const</span> <span class="n">QDict</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qdict</span><span class="p">,</span> <span class="n">QObject</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;*</span><span class="n">ret_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span> <span class="o">=</span> <span class="n">qdict_get_str</span><span class="p">(</span><span class="n">qdict</span><span class="p">,</span> <span class="s">&quot;path&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memory_access_start</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This function will have a input parameter <code>path</code>，with which to invoke <code>memory_access_start()</code> function:</p>

<p>(Note: The following code are all located in <code>qemu/memory-access.c</code>)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">memory_access_start</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sigset_t</span> <span class="n">set</span><span class="p">,</span> <span class="n">oldset</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// create a copy of path that we can safely use</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">pathcopy</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">pathcopy</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// start the thread</span>
</span><span class='line'>  <span class="n">sigfillset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">set</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pthread_sigmask</span><span class="p">(</span><span class="n">SIG_SETMASK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">oldset</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="kr">thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">memory_access_thread</span><span class="p">,</span> <span class="n">pathcopy</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pthread_sigmask</span><span class="p">(</span><span class="n">SIG_SETMASK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">oldset</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This function will create a new thread, and run the <code>memory_access_thread()</code> function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span>
</span><span class='line'><span class="nf">memory_access_thread</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_un</span> <span class="n">address</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">socket_fd</span><span class="p">,</span> <span class="n">connection_fd</span><span class="p">;</span>
</span><span class='line'>  <span class="n">socklen_t</span> <span class="n">address_length</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">socket_fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_UNIX</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">socket_fd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: socket failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="n">unlink</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>  <span class="n">address</span><span class="p">.</span><span class="n">sun_family</span> <span class="o">=</span> <span class="n">AF_UNIX</span><span class="p">;</span>
</span><span class='line'>  <span class="n">address_length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="n">sun_family</span><span class="p">)</span> <span class="o">+</span> <span class="n">sprintf</span><span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="n">sun_path</span><span class="p">,</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">path</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">address</span><span class="p">,</span> <span class="n">address_length</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: bind failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: listen failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">connection_fd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">address</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">address_length</span><span class="p">);</span>
</span><span class='line'><span class="n">connection_handler</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">close</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">);</span>
</span><span class='line'><span class="n">unlink</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="nl">error_exit:</span>
</span><span class='line'><span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This function will create a socket, combine it with the <code>/tmp/path</code> named file, bind, listen for connection, and once any other process connect to such socket, it will invoke the <code>connection_handler()</code> function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">connection_handler</span> <span class="p">(</span><span class="kt">int</span> <span class="n">connection_fd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nbytes</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">request</span> <span class="n">req</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// client request should match the struct request format</span>
</span><span class='line'><span class="n">nbytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">req</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">request</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">request</span><span class="p">)){</span>
</span><span class='line'>  <span class="c1">// error</span>
</span><span class='line'>  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// request to quit, goodbye</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// request to read</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nbytes</span> <span class="o">=</span> <span class="n">connection_read_memory</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">address</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// read failure, return failure message</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// set last byte to 0 for failure</span>
</span><span class='line'>    <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// read success, return bytes</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// set last byte to 1 for success</span>
</span><span class='line'>    <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">nbytes</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// request to write</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">write_buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nbytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">write_buf</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// failed reading the message to write</span>
</span><span class='line'>    <span class="n">send_fail_ack</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// do the write</span>
</span><span class='line'>    <span class="n">nbytes</span> <span class="o">=</span> <span class="n">connection_write_memory</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">address</span><span class="p">,</span> <span class="n">write_buf</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">==</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">){</span>
</span><span class='line'>      <span class="n">send_success_ack</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">send_fail_ack</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">write_buf</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">// unknown command</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: ignoring unknown command (%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">close</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This function will parse the request from the connection_fd, the types of request are divided to 3:</p>

<ul>
<li>0: quit</li>
<li>1: read</li>
<li>2: write</li>
</ul>


<p>Once it receive read request, it will invoke the <code>connection_read_memory()</code> function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">uint64_t</span>
</span><span class='line'><span class="nf">connection_read_memory</span> <span class="p">(</span><span class="kt">uint64_t</span> <span class="n">user_paddr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">user_len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">hwaddr</span> <span class="n">paddr</span> <span class="o">=</span> <span class="p">(</span><span class="n">hwaddr</span><span class="p">)</span> <span class="n">user_paddr</span><span class="p">;</span>
</span><span class='line'><span class="n">hwaddr</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">hwaddr</span><span class="p">)</span> <span class="n">user_len</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">guestmem</span> <span class="o">=</span> <span class="n">cpu_physical_memory_map</span><span class="p">(</span><span class="n">paddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">guestmem</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">guestmem</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="n">cpu_physical_memory_unmap</span><span class="p">(</span><span class="n">guestmem</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once it receive write request, it will invoke the <code>connection_write_memory()</code> function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">uint64_t</span>
</span><span class='line'><span class="nf">connection_write_memory</span> <span class="p">(</span><span class="kt">uint64_t</span> <span class="n">user_paddr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">user_len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">hwaddr</span> <span class="n">paddr</span> <span class="o">=</span> <span class="p">(</span><span class="n">hwaddr</span><span class="p">)</span> <span class="n">user_paddr</span><span class="p">;</span>
</span><span class='line'><span class="n">hwaddr</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">hwaddr</span><span class="p">)</span> <span class="n">user_len</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">guestmem</span> <span class="o">=</span> <span class="n">cpu_physical_memory_map</span><span class="p">(</span><span class="n">paddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">len</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">guestmem</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">guestmem</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="n">cpu_physical_memory_unmap</span><span class="p">(</span><span class="n">guestmem</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, what we need to do is to invoke the very beginning function <code>do_physical_memory_access()</code>. So here comes the QMP:</p>

<h4>Patch QMP to provide a entry to invoke <code>do_physical_memory_access()</code> method</h4>

<p>How QMP works will be introduced in a new blog in the future. Here I just need to tell what need to add:</p>

<p>in <code>qemu/qmp-command.hx</code> file, we add following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>{
</span><span class='line'>  .name       = &quot;pmemaccess&quot;,
</span><span class='line'>  .args_type  = &quot;path:s&quot;,
</span><span class='line'>  .params     = &quot;path&quot;,
</span><span class='line'>  .help       = &quot;mount guest physical memory image at &#39;path&#39;&quot;,
</span><span class='line'>  .user_print = monitor_user_noop,
</span><span class='line'>  .mhandler.cmd_new = do_physical_memory_access,
</span><span class='line'>},<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>SQMP<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>pmemaccess<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Mount guest physical memory image at &#39;path&#39;.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Arguments:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>&quot;path&quot;: mount point path (json-string)<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Example:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>-&gt; { &quot;execute&quot;: &quot;pmemaccess&quot;,<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>         &quot;arguments&quot;: { &quot;path&quot;: &quot;/tmp/guestname&quot; } }
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>- { &quot;return&quot;: {} }<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>EQMP
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the code we need here is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>{
</span><span class='line'>  .name       = &quot;pmemaccess&quot;,
</span><span class='line'>  .args_type  = &quot;path:s&quot;,
</span><span class='line'>  .params     = &quot;path&quot;,
</span><span class='line'>  .help       = &quot;mount guest physical memory image at &#39;path&#39;&quot;,
</span><span class='line'>  .user_print = monitor_user_noop,
</span><span class='line'>  .mhandler.cmd_new = do_physical_memory_access,
</span><span class='line'>},
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>the other code between <code>SQMP</code> and <code>EQMP</code> are just added to the documentation. But it is required!</p>

<p>After adding this command to Qemu QMP, we can invoke <code>do_physical_memory_access()</code> outside of Qemu using such format shown in Example section:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>-&gt; { &quot;execute&quot;: &quot;pmemaccess&quot;,<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>         &quot;arguments&quot;: { &quot;path&quot;: &quot;/tmp/guestname&quot; } }
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>- { &quot;return&quot;: {} }
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For example, in Libvmi, you can find how it invokes this in <code>libvmi/driver/kvm.c</code> file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// QMP Command Interactions</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span>
</span><span class='line'><span class="nf">exec_qmp_cmd</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">kvm_instance_t</span> <span class="o">*</span><span class="n">kvm</span><span class="p">,</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="p">......</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">snprintf</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cmd_length</span><span class="p">,</span> <span class="s">&quot;virsh qemu-monitor-command %s %s&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span>
</span><span class='line'>   <span class="n">query</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">......</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">p</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span>
</span><span class='line'><span class="n">exec_memory_access</span><span class="p">(</span>
</span><span class='line'>  <span class="n">kvm_instance_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">kvm</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">tmpfile</span> <span class="o">=</span> <span class="n">tempnam</span><span class="p">(</span><span class="s">&quot;/tmp&quot;</span><span class="p">,</span> <span class="s">&quot;vmi&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">safe_malloc</span><span class="p">(</span><span class="mi">256</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">sprintf</span><span class="p">(</span><span class="n">query</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;&#39;{</span><span class="se">\&quot;</span><span class="s">execute</span><span class="se">\&quot;</span><span class="s">: </span><span class="se">\&quot;</span><span class="s">pmemaccess</span><span class="se">\&quot;</span><span class="s">, </span><span class="se">\&quot;</span><span class="s">arguments</span><span class="se">\&quot;</span><span class="s">: {</span><span class="se">\&quot;</span><span class="s">path</span><span class="se">\&quot;</span><span class="s">: </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s">}}&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">tmpfile</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">......</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kt">char</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="n">exec_qmp_cmd</span><span class="p">(</span><span class="n">kvm</span><span class="p">,</span> <span class="n">query</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And when it needs to read a page, it needs to map from GPA to HVA, then the libvmi will follow the control from:</p>

<p>  vmi_read_va -> (get GPA from vmi_translate_uv2p) -> kvm_read_page -> memory_cache_insert ->
  create_new_entry -> get_memory_data -> get_memory_callback -> kvm_get_memory_patch</p>

<p>For the last function, it can be found in file <code>libvmi/driver/kvm.c</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="o">*</span>
</span><span class='line'><span class="nf">kvm_get_memory_patch</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">vmi_instance_t</span> <span class="n">vmi</span><span class="p">,</span>
</span><span class='line'><span class="n">addr_t</span> <span class="n">paddr</span><span class="p">,</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">safe_malloc</span><span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">request</span> <span class="n">req</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>   <span class="c1">// read request</span>
</span><span class='line'>  <span class="n">req</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">paddr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">req</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">length</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kt">int</span> <span class="n">nbytes</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">write</span><span class="p">(</span><span class="n">kvm_get_instance</span><span class="p">(</span><span class="n">vmi</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">socket_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">req</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">request</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">request</span><span class="p">))</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// get the data from kvm</span>
</span><span class='line'><span class="n">nbytes</span> <span class="o">=</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="n">kvm_get_instance</span><span class="p">(</span><span class="n">vmi</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">socket_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// check that kvm thinks everything is ok by looking at the last byte</span>
</span><span class='line'><span class="c1">// of the buffer, 0 is failure and 1 is success</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">length</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// success, return pointer to buf</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// default failure</span>
</span><span class='line'>  <span class="nl">error_exit:</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it uses the socket_fd to communicate with the connection openned in Qemu to invoke the <code>cpu_physical_read_memory()</code>. So the same with write.</p>

<hr />

<p>Above are the principle how Qemu-patch work in Libvmi for KVM support, you can find the whole patch <a href="https://github.com/bdpayne/libvmi/tree/master/tools/qemu-kvm-patch">here</a>, now it only support 0.14 and 1.2 versions. If you know how it works, you can modify the patch and apply your own Qemu version. For example, following is my patch for the Qemu in stable-1.6 branch, e82ee0845c3240541e79b9b521779b3f8743f1b4 commit:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">Makefile</span><span class="p">.</span><span class="n">target</span> <span class="n">b</span><span class="o">/</span><span class="n">Makefile</span><span class="p">.</span><span class="n">target</span>
</span><span class='line'><span class="n">index</span> <span class="mi">9</span><span class="n">a49852</span><span class="p">..</span><span class="n">be93dd0</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">Makefile</span><span class="p">.</span><span class="n">target</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">Makefile</span><span class="p">.</span><span class="n">target</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">113</span><span class="p">,</span><span class="mi">7</span> <span class="o">+</span><span class="mi">113</span><span class="p">,</span><span class="mi">7</span> <span class="err">@@</span> <span class="n">endif</span> <span class="err">#</span><span class="n">CONFIG_BSD_USER</span>
</span><span class='line'> <span class="err">#########################################################</span>
</span><span class='line'> <span class="err">#</span> <span class="n">System</span> <span class="n">emulator</span> <span class="n">target</span>
</span><span class='line'> <span class="n">ifdef</span> <span class="n">CONFIG_SOFTMMU</span>
</span><span class='line'><span class="o">-</span><span class="n">obj</span><span class="o">-</span><span class="n">y</span> <span class="o">+=</span> <span class="n">arch_init</span><span class="p">.</span><span class="n">o</span> <span class="n">cpus</span><span class="p">.</span><span class="n">o</span> <span class="n">monitor</span><span class="p">.</span><span class="n">o</span> <span class="n">gdbstub</span><span class="p">.</span><span class="n">o</span> <span class="n">balloon</span><span class="p">.</span><span class="n">o</span> <span class="n">ioport</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="o">+</span><span class="n">obj</span><span class="o">-</span><span class="n">y</span> <span class="o">+=</span> <span class="n">arch_init</span><span class="p">.</span><span class="n">o</span> <span class="n">cpus</span><span class="p">.</span><span class="n">o</span> <span class="n">monitor</span><span class="p">.</span><span class="n">o</span> <span class="n">gdbstub</span><span class="p">.</span><span class="n">o</span> <span class="n">balloon</span><span class="p">.</span><span class="n">o</span> <span class="n">ioport</span><span class="p">.</span><span class="n">o</span> <span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'> <span class="n">obj</span><span class="o">-</span><span class="n">y</span> <span class="o">+=</span> <span class="n">qtest</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'> <span class="n">obj</span><span class="o">-</span><span class="n">y</span> <span class="o">+=</span> <span class="n">hw</span><span class="o">/</span>
</span><span class='line'> <span class="n">obj</span><span class="o">-</span><span class="err">$</span><span class="p">(</span><span class="n">CONFIG_FDT</span><span class="p">)</span> <span class="o">+=</span> <span class="n">device_tree</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">new</span> <span class="n">file</span> <span class="n">mode</span> <span class="mi">100644</span>
</span><span class='line'><span class="n">index</span> <span class="mf">0000000..2</span><span class="n">c81c48</span>
</span><span class='line'><span class="o">---</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span> <span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">205</span> <span class="err">@@</span>
</span><span class='line'><span class="o">+/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span> <span class="n">Access</span> <span class="n">guest</span> <span class="n">physical</span> <span class="n">memory</span> <span class="n">via</span> <span class="n">a</span> <span class="n">domain</span> <span class="n">socket</span><span class="p">.</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span> <span class="n">Copyright</span> <span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="mi">2011</span> <span class="n">Sandia</span> <span class="n">National</span> <span class="n">Laboratories</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span> <span class="n">Author</span><span class="o">:</span> <span class="n">Bryan</span> <span class="n">D</span><span class="p">.</span> <span class="n">Payne</span> <span class="p">(</span><span class="n">bdpayne</span><span class="err">@</span><span class="n">acm</span><span class="p">.</span><span class="n">org</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="s">&quot;memory-access.h&quot;</span>
</span><span class='line'><span class="o">+</span><span class="c1">//#include &quot;cpu-all.h&quot;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="s">&quot;qemu-common.h&quot;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="s">&quot;exec/cpu-common.h&quot;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="s">&quot;config.h&quot;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">pthread</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">socket</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">un</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdint</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="k">struct</span> <span class="n">request</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">uint8_t</span> <span class="n">type</span><span class="p">;</span>      <span class="c1">// 0 quit, 1 read, 2 write, ... rest reserved</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">uint64_t</span> <span class="n">address</span><span class="p">;</span>  <span class="c1">// address to read from OR write to</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">uint64_t</span> <span class="n">length</span><span class="p">;</span>   <span class="c1">// number of bytes to read OR write</span>
</span><span class='line'><span class="o">+</span><span class="p">};</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="k">typedef</span> <span class="kt">uint64_t</span> <span class="n">target_phys_addr_t</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">static</span> <span class="kt">uint64_t</span>
</span><span class='line'><span class="o">+</span><span class="n">connection_read_memory</span> <span class="p">(</span><span class="kt">uint64_t</span> <span class="n">user_paddr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">user_len</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="n">target_phys_addr_t</span> <span class="n">paddr</span> <span class="o">=</span> <span class="p">(</span><span class="n">target_phys_addr_t</span><span class="p">)</span> <span class="n">user_paddr</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="n">target_phys_addr_t</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">target_phys_addr_t</span><span class="p">)</span> <span class="n">user_len</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">guestmem</span> <span class="o">=</span> <span class="n">cpu_physical_memory_map</span><span class="p">(</span><span class="n">paddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">guestmem</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">guestmem</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">cpu_physical_memory_unmap</span><span class="p">(</span><span class="n">guestmem</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">static</span> <span class="kt">uint64_t</span>
</span><span class='line'><span class="o">+</span><span class="n">connection_write_memory</span> <span class="p">(</span><span class="kt">uint64_t</span> <span class="n">user_paddr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">user_len</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="n">target_phys_addr_t</span> <span class="n">paddr</span> <span class="o">=</span> <span class="p">(</span><span class="n">target_phys_addr_t</span><span class="p">)</span> <span class="n">user_paddr</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="n">target_phys_addr_t</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">target_phys_addr_t</span><span class="p">)</span> <span class="n">user_len</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">guestmem</span> <span class="o">=</span> <span class="n">cpu_physical_memory_map</span><span class="p">(</span><span class="n">paddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">len</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">guestmem</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">guestmem</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">cpu_physical_memory_unmap</span><span class="p">(</span><span class="n">guestmem</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="o">+</span><span class="n">send_success_ack</span> <span class="p">(</span><span class="kt">int</span> <span class="n">connection_fd</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">uint8_t</span> <span class="n">success</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">int</span> <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">success</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">nbytes</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: failed to send success ack</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="o">+</span><span class="n">send_fail_ack</span> <span class="p">(</span><span class="kt">int</span> <span class="n">connection_fd</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">uint8_t</span> <span class="n">fail</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">int</span> <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">fail</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">nbytes</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: failed to send fail ack</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="o">+</span><span class="n">connection_handler</span> <span class="p">(</span><span class="kt">int</span> <span class="n">connection_fd</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">int</span> <span class="n">nbytes</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="k">struct</span> <span class="n">request</span> <span class="n">req</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="c1">// client request should match the struct request format</span>
</span><span class='line'><span class="o">+</span>    <span class="n">nbytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">req</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">request</span><span class="p">));</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;req is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">request</span><span class="p">)){</span>
</span><span class='line'><span class="o">+</span>      <span class="c1">// error</span>
</span><span class='line'><span class="o">+</span>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>    <span class="p">}</span>
</span><span class='line'><span class="o">+</span>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>      <span class="c1">// request to quit, goodbye</span>
</span><span class='line'><span class="o">+</span>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>    <span class="p">}</span>
</span><span class='line'><span class="o">+</span>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>      <span class="c1">// request to read</span>
</span><span class='line'><span class="o">+</span>      <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="n">nbytes</span> <span class="o">=</span> <span class="n">connection_read_memory</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">address</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>        <span class="c1">// read failure, return failure message</span>
</span><span class='line'><span class="o">+</span>        <span class="n">buf</span><span class="p">[</span><span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// set last byte to 0 for failure</span>
</span><span class='line'><span class="o">+</span>        <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="p">}</span>
</span><span class='line'><span class="o">+</span>      <span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>        <span class="c1">// read success, return bytes</span>
</span><span class='line'><span class="o">+</span>        <span class="n">buf</span><span class="p">[</span><span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// set last byte to 1 for success</span>
</span><span class='line'><span class="o">+</span>        <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">nbytes</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="p">}</span>
</span><span class='line'><span class="o">+</span>      <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="p">}</span>
</span><span class='line'><span class="o">+</span>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>      <span class="c1">// request to write</span>
</span><span class='line'><span class="o">+</span>      <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">write_buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="n">nbytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">write_buf</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">!=</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>        <span class="c1">// failed reading the message to write</span>
</span><span class='line'><span class="o">+</span>        <span class="n">send_fail_ack</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="p">}</span>
</span><span class='line'><span class="o">+</span>      <span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>        <span class="c1">// do the write</span>
</span><span class='line'><span class="o">+</span>        <span class="n">nbytes</span> <span class="o">=</span> <span class="n">connection_write_memory</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">address</span><span class="p">,</span> <span class="n">write_buf</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>        <span class="k">if</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">==</span> <span class="n">req</span><span class="p">.</span><span class="n">length</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>          <span class="n">send_success_ack</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>        <span class="p">}</span>
</span><span class='line'><span class="o">+</span>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>          <span class="n">send_fail_ack</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>        <span class="p">}</span>
</span><span class='line'><span class="o">+</span>      <span class="p">}</span>
</span><span class='line'><span class="o">+</span>      <span class="n">free</span><span class="p">(</span><span class="n">write_buf</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="p">}</span>
</span><span class='line'><span class="o">+</span>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>      <span class="c1">// unknown command</span>
</span><span class='line'><span class="o">+</span>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: ignoring unknown command (%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">req</span><span class="p">.</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>      <span class="n">nbytes</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>      <span class="n">free</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="p">}</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="n">close</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">static</span> <span class="kt">void</span> <span class="o">*</span>
</span><span class='line'><span class="o">+</span><span class="n">memory_access_thread</span> <span class="p">(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="k">struct</span> <span class="n">sockaddr_un</span> <span class="n">address</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">int</span> <span class="n">socket_fd</span><span class="p">,</span> <span class="n">connection_fd</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="n">socklen_t</span> <span class="n">address_length</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">+</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;in memory_access_thread : %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="n">socket_fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_UNIX</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="n">socket_fd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: socket failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span>  <span class="n">unlink</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">address</span><span class="p">.</span><span class="n">sun_family</span> <span class="o">=</span> <span class="n">AF_UNIX</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="n">address_length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="n">sun_family</span><span class="p">)</span> <span class="o">+</span> <span class="n">sprintf</span><span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="n">sun_path</span><span class="p">,</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">address</span><span class="p">,</span> <span class="n">address_length</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: bind failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;in memory_access_thread : %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">socket_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QemuMemoryAccess: listen failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="n">connection_fd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">address</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">address_length</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">connection_handler</span><span class="p">(</span><span class="n">connection_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="n">close</span><span class="p">(</span><span class="n">socket_fd</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">unlink</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="n">error_exit</span><span class="o">:</span>
</span><span class='line'><span class="o">+</span>  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">int</span>
</span><span class='line'><span class="o">+</span><span class="n">memory_access_start</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>  <span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="n">sigset_t</span> <span class="n">set</span><span class="p">,</span> <span class="n">oldset</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="c1">// create a copy of path that we can safely use</span>
</span><span class='line'><span class="o">+</span>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pathcopy</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">memcpy</span><span class="p">(</span><span class="n">pathcopy</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="c1">// start the thread</span>
</span><span class='line'><span class="o">+</span>  <span class="n">sigfillset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">set</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">pthread_sigmask</span><span class="p">(</span><span class="n">SIG_SETMASK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">oldset</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">ret</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="kr">thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">memory_access_thread</span><span class="p">,</span> <span class="n">pathcopy</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">pthread_sigmask</span><span class="p">(</span><span class="n">SIG_SETMASK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">oldset</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">h</span> <span class="n">b</span><span class="o">/</span><span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">new</span> <span class="n">file</span> <span class="n">mode</span> <span class="mi">100644</span>
</span><span class='line'><span class="n">index</span> <span class="mf">0000000.</span><span class="p">.</span><span class="n">e538134</span>
</span><span class='line'><span class="o">---</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">memory</span><span class="o">-</span><span class="n">access</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span> <span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span>
</span><span class='line'><span class="o">+/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span> <span class="n">Mount</span> <span class="n">guest</span> <span class="n">physical</span> <span class="n">memory</span> <span class="n">using</span> <span class="n">FUSE</span><span class="p">.</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span> <span class="n">Copyright</span> <span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="mi">2011</span> <span class="n">Sandia</span> <span class="n">National</span> <span class="n">Laboratories</span>
</span><span class='line'><span class="o">+</span> <span class="o">*</span> <span class="n">Author</span><span class="o">:</span> <span class="n">Bryan</span> <span class="n">D</span><span class="p">.</span> <span class="n">Payne</span> <span class="p">(</span><span class="n">bdpayne</span><span class="err">@</span><span class="n">acm</span><span class="p">.</span><span class="n">org</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="kt">int</span> <span class="n">memory_access_start</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">monitor</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">monitor</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">index</span> <span class="mi">99</span><span class="n">bfcd9</span><span class="p">.</span><span class="mf">.7</span><span class="n">dd4ac2</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">monitor</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">monitor</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">67</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">67</span><span class="p">,</span><span class="mi">7</span> <span class="err">@@</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;qmp-commands.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;hmp.h&quot;</span>
</span><span class='line'> <span class="err">#</span><span class="n">include</span> <span class="s">&quot;qemu/thread.h&quot;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="s">&quot;memory-access.h&quot;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">pic</span><span class="o">/</span><span class="n">irq_info</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'> <span class="err">#</span><span class="k">if</span> <span class="n">defined</span><span class="p">(</span><span class="n">TARGET_SPARC</span><span class="p">)</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">1252</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">1253</span><span class="p">,</span><span class="mi">14</span> <span class="err">@@</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">do_print</span><span class="p">(</span><span class="n">Monitor</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mon</span><span class="p">,</span> <span class="k">const</span> <span class="n">QDict</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qdict</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">monitor_printf</span><span class="p">(</span><span class="n">mon</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+</span><span class="k">static</span> <span class="kt">int</span> <span class="n">do_physical_memory_access</span><span class="p">(</span><span class="n">Monitor</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mon</span><span class="p">,</span> <span class="k">const</span> <span class="n">QDict</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qdict</span><span class="p">,</span> <span class="n">QObject</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ret_data</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>    <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">path</span> <span class="o">=</span> <span class="n">qdict_get_str</span><span class="p">(</span><span class="n">qdict</span><span class="p">,</span> <span class="s">&quot;path&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;in do_physical_memory_access : %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="n">memory_access_start</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">void</span> <span class="n">do_sum</span><span class="p">(</span><span class="n">Monitor</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mon</span><span class="p">,</span> <span class="k">const</span> <span class="n">QDict</span> <span class="o">*</span><span class="n">qdict</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">uint32_t</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">qmp</span><span class="o">-</span><span class="n">commands</span><span class="p">.</span><span class="n">hx</span> <span class="n">b</span><span class="o">/</span><span class="n">qmp</span><span class="o">-</span><span class="n">commands</span><span class="p">.</span><span class="n">hx</span>
</span><span class='line'><span class="n">index</span> <span class="n">cf47e3f</span><span class="p">.</span><span class="mf">.41</span><span class="n">b3e1b</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">qmp</span><span class="o">-</span><span class="n">commands</span><span class="p">.</span><span class="n">hx</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">qmp</span><span class="o">-</span><span class="n">commands</span><span class="p">.</span><span class="n">hx</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">610</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">610</span><span class="p">,</span><span class="mi">33</span> <span class="err">@@</span> <span class="n">Example</span><span class="o">:</span>
</span><span class='line'> <span class="n">EQMP</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">name</span>       <span class="o">=</span> <span class="s">&quot;pmemaccess&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">args_type</span>  <span class="o">=</span> <span class="s">&quot;path:s&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">params</span>     <span class="o">=</span> <span class="s">&quot;path&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">help</span>       <span class="o">=</span> <span class="s">&quot;mount guest physical memory image at &#39;path&#39;&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">user_print</span> <span class="o">=</span> <span class="n">monitor_user_noop</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">mhandler</span><span class="p">.</span><span class="n">cmd_new</span> <span class="o">=</span> <span class="n">do_physical_memory_access</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span> <span class="p">},</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="n">SQMP</span>
</span><span class='line'><span class="o">+</span><span class="n">pmemaccess</span>
</span><span class='line'><span class="o">+----------</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="n">Mount</span> <span class="n">guest</span> <span class="n">physical</span> <span class="n">memory</span> <span class="n">image</span> <span class="n">at</span> <span class="err">&#39;</span><span class="n">path</span><span class="err">&#39;</span><span class="p">.</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="n">Arguments</span><span class="o">:</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+-</span> <span class="s">&quot;path&quot;</span><span class="o">:</span> <span class="n">mount</span> <span class="n">point</span> <span class="n">path</span> <span class="p">(</span><span class="n">json</span><span class="o">-</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="n">Example</span><span class="o">:</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+-&gt;</span> <span class="p">{</span> <span class="s">&quot;execute&quot;</span><span class="o">:</span> <span class="s">&quot;pmemaccess&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>      <span class="s">&quot;arguments&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s">&quot;path&quot;</span><span class="o">:</span> <span class="s">&quot;/tmp/guestname&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;+&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">{</span> <span class="s">&quot;return&quot;</span><span class="o">:</span> <span class="p">{}</span> <span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="n">EQMP</span>
</span><span class='line'><span class="o">+&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">.</span><span class="n">name</span>       <span class="o">=</span> <span class="s">&quot;migrate&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="p">.</span><span class="n">args_type</span>  <span class="o">=</span> <span class="s">&quot;detach:-d,blk:-b,inc:-i,uri:s&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="p">.</span><span class="n">mhandler</span><span class="p">.</span><span class="n">cmd_new</span> <span class="o">=</span> <span class="n">qmp_marshal_input_migrate</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After we apply the Qemuu patch, we can re-compile the Qemu:</p>

<pre><code>$ cd qemu
$ ./configure
$ make -jj4
$ sudo make install
</code></pre>

<p>In addition, as said in the Libvmi READM, you need to make sure your libvirt version is 0.8.7 or newer, and you should sure that the libvirt installation supports QMP commands, which can be done by install libyajl-dev (take my Debian as an example):</p>

<pre><code>$ sudo aptitude install libyajl-dev
$ cd libvirt
$ ./configure
</code></pre>

<p>And ensure that the configure script reports that it found yajl. Then you should compile the libvirt</p>

<pre><code>$ make -j4
$ sudo make install
</code></pre>

<p>After that, you can setup libvmi as before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share mouse and keyboard using Synergy]]></title>
    <link href="http://ytliu.github.io/blog/2013/09/12/share-mouse-and-keyboard-using-synergy/"/>
    <updated>2013-09-12T13:04:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2013/09/12/share-mouse-and-keyboard-using-synergy</id>
    <content type="html"><![CDATA[<p>Today Han shows me an interesting functionality of one software called <a href="http://synergy-foss.org/">Synergy</a>:</p>

<blockquote><p>Share your mouse and keyboard between multiple computers on your desk</p></blockquote>

<p>Since I have at least 2 machine in my Desktop (One Windows, one Linux, not mentioned of my Mac), so I've 2 mouses, 2 keyboards, and the wires are really not easy to place in clearness. So Synergy is exactly the fantastic software I need, you only need one mouse, one keyboard, and share them among all these machines and OSes!</p>

<p>So the way how to realize this is as follows:</p>

<!-- more -->


<p>First you need to download the install files of both windows and linux versions from <a href="http://synergy-foss.org/download/?list">here</a>, Han tells me that the 64bit version of windows has some problems in his trial, I just download the 32bit version for Windows, and 64bit version for Linux.</p>

<h5>Windows installation</h5>

<p>Then in Windows, install it, choose the <code>Server</code> mode, configure that using any of the encryption mode, and in the popup of <code>Configure Server</code>, drag the Computer icon in the right-top to the center, and assign the hostname of the Linux client to it:</p>

<p><img src="http://ytliu.info/images/2013-09-12-1.png" title="Synergy in windows" alt="Synergy-Windows" /></p>

<p>Then click OK, and just start!</p>

<h5>Linux installation</h5>

<p>In Linux, install the deb file using:</p>

<pre><code>$ sudo dpkg -i syner-gy-1.4.12-Linux-x86_64.deb
</code></pre>

<p>then run synergy in background:</p>

<pre><code>$ synergy &amp;
</code></pre>

<p>In the popup configuration, choose the <code>Client</code> mode, configure to the same encryption mode as in Windows, and fill the Windows IP address in, finally start!</p>

<hr />

<p>After all of the above done, your mouse can move between the two monitors seamlessly, as well as your only keyboard can be shared! How amazing and usefull of Synergy! Many thanks to the author Nick Bolton!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write introspection tools using libvmi]]></title>
    <link href="http://ytliu.github.io/blog/2013/08/14/write-introspection-tools-using-libvmi/"/>
    <updated>2013-08-14T21:34:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2013/08/14/write-introspection-tools-using-libvmi</id>
    <content type="html"><![CDATA[<p>Last week I've discussed about how to <a href="http://ytliu.info/blog/2013/08/04/libvmi-setup/">setup libvmi</a>, in this post I will show you how to write introspection tools using libvmi.</p>

<p>The most typical example is <code>examples/process-list.c</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">libvmi</span><span class="o">/</span><span class="n">libvmi</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">errno</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">mman</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Firstly we need to include these header files, especially the <code>&lt;libvmi/libvmi.h&gt;</code>, it defines most of the variables and functions.</p>

<p>Then we should initialize the vmi environment:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* initialize the libvmi library */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">vmi_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vmi</span><span class="p">,</span> <span class="n">VMI_AUTO</span> <span class="o">|</span> <span class="n">VMI_INIT_COMPLETE</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="n">VMI_FAILURE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Failed to init LibVMI library.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->


<p>It will initialize the vmi (<code>vmi_instance_t</code>) struct with some platform information.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* init the offset values */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">VMI_OS_LINUX</span> <span class="o">==</span> <span class="n">vmi_get_ostype</span><span class="p">(</span><span class="n">vmi</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tasks_offset</span> <span class="o">=</span> <span class="n">vmi_get_offset</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="s">&quot;linux_tasks&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">name_offset</span> <span class="o">=</span> <span class="n">vmi_get_offset</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="s">&quot;linux_name&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pid_offset</span> <span class="o">=</span> <span class="n">vmi_get_offset</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="s">&quot;linux_pid&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Then in this case, we should read some offset of tast_struct from the config file <code>/etc/libvmi.conf</code>. And if you want to add a config argument like <code>linux_files</code>, you can do as follows:</p>

<hr />

<p>Add an item in <code>libvmi/config/grammar.y</code>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span><span class="o">&lt;</span><span class="n">str</span><span class="o">&gt;</span>     <span class="n">LINUX_FILES</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">assignment:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;|</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">linux_state_assignment</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then add an item in <code>libvmi/config/lexicon.l</code>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">linux_files</span>     <span class="p">{</span> <span class="n">BeginToken</span><span class="p">(</span><span class="n">yytext</span><span class="p">);</span> <span class="n">yylval</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">strndup</span><span class="p">(</span><span class="n">yytext</span><span class="p">,</span> <span class="n">CONFIG_STR_LENGTH</span><span class="p">);</span> <span class="k">return</span> <span class="n">LINUX_FILES</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then add corresponding <code>strncmp</code> in <code>libvmi/os/linux/core.c</code>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">stncmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;linux_files&quot;</span><span class="p">,</span> <span class="n">CONFIG_STR_LENGTH</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">linux_instance</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">files_offset</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="k">goto</span> <span class="n">_done</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">offset_name</span><span class="p">,</span> <span class="s">&quot;linux_files&quot;</span><span class="p">,</span> <span class="n">max_length</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">linux_instance</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">files_offset</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At last add the <code>files_offset</code> item to <code>struct linux_instance</code> in <code>libvmi/os/linux/linux.h</code>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">linux_instance</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'><span class="kt">uint64_t</span> <span class="n">files_offset</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Then compile again, after that your can add <code>linux_files</code> to your config file.</h2>

<p>Now, let's continue to look at the vmi code:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* pause the vm for consistent memory access */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">vmi_pause_vm</span><span class="p">(</span><span class="n">vmi</span><span class="p">)</span> <span class="o">!=</span> <span class="n">VMI_SUCCESS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Failed to pause VM</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// if</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before we do the vmi, we need to pause the vm for consistent memory access, then we can read memory from guest memory:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* get the head of the list */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">VMI_OS_LINUX</span> <span class="o">==</span> <span class="n">vmi_get_ostype</span><span class="p">(</span><span class="n">vmi</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">current_process</span> <span class="o">=</span> <span class="n">vmi_translate_ksym2v</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="s">&quot;init_task&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cm">/* walk the task list */</span>
</span><span class='line'><span class="n">list_head</span> <span class="o">=</span> <span class="n">current_process</span> <span class="o">+</span> <span class="n">tasks_offset</span><span class="p">;</span>
</span><span class='line'><span class="n">current_list_entry</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">status</span> <span class="o">=</span> <span class="n">vmi_read_addr_va</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="n">current_list_entry</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">next_list_entry</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">VMI_FAILURE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Failed to read next pointer at 0x%lx before entering loop</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">current_list_entry</span><span class="p">);</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We firstly get the head of the task_struct list <code>current_process</code>, then use <code>vmi_read_addr_va</code> to read the memory in address <code>current_list_entry</code>, which is the address of <code>next_list_entry</code>.</p>

<p>Here <code>vmi_read_addr_va</code> is similar with following <code>vmi_read_32_va</code>, <code>vmi_read_str_va</code> and so on. These lib functions take the virtual address (<code>vaddr</code>) as one of there parameters, they firstly walk the page table with cr3 and get physical address (<code>paddr</code>), then they use the libxenctrl to map a memory page of that paddr, which return back the virtual address (<code>memory</code>) seen by Dom0, with the <code>memory</code>, they can use <code>memcpy</code> to copy the corresponding size of memory to the <code>buf</code>.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vmi_read_32_va</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="n">current_process</span> <span class="o">+</span> <span class="n">pid_offset</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">procname</span> <span class="o">=</span> <span class="n">vmi_read_str_va</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="n">current_process</span> <span class="o">+</span> <span class="n">name_offset</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">procname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">procname</span><span class="p">);</span>
</span><span class='line'>        <span class="n">procname</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">current_list_entry</span> <span class="o">=</span> <span class="n">next_list_entry</span><span class="p">;</span>
</span><span class='line'>    <span class="n">current_process</span> <span class="o">=</span> <span class="n">current_list_entry</span> <span class="o">-</span> <span class="n">tasks_offset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* follow the next pointer */</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">vmi_read_addr_va</span><span class="p">(</span><span class="n">vmi</span><span class="p">,</span> <span class="n">current_list_entry</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">next_list_entry</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">VMI_FAILURE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Failed to read next pointer in loop at %lx</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">current_list_entry</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">error_exit</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">next_list_entry</span> <span class="o">!=</span> <span class="n">list_head</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is the main loop of process vmi: it uses <code>vmi_read_32_va</code> to read pid (<code>pid_offset</code>) of each process, use <code>vmi_read_str_va</code> to read name (<code>name_offset</code>) of each process, and at last use <code>vmi_read_addr_va</code> to read the next entry of tast_struct in the list.</p>

<p>Finally we should never forget to resume the guest vm and destroy the vmi environment:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* resume the vm */</span>
</span><span class='line'><span class="n">vmi_resume_vm</span><span class="p">(</span><span class="n">vmi</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* cleanup any memory associated with the LibVMI instance */</span>
</span><span class='line'><span class="n">vmi_destroy</span><span class="p">(</span><span class="n">vmi</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can compile and run the vmi tool in the root directory of libvmi:</p>

<pre><code>$ make
$ sudo ./examples/process-list vm_name
</code></pre>

<hr />

<p>If you want to write your own vmi tools, you can imitate the <code>process-list</code> to write a new one (e.g. my_vmi_tool.c). After that, you need to modify the <code>examples/Makefile.am</code> file:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">bin_PROGRAMS</span> <span class="o">=</span> <span class="p">...</span> <span class="n">my_vmi_tool</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">my_vmi_tool_SOURCES</span> <span class="o">=</span> <span class="n">my_vmi_tool</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Actually after we run <code>make</code> in the root directory of libvmi, the <code>Makefile</code> in <code>examples/</code> directory will generate a new executable file called <code>my_vmi_tool</code>, which is a script file to invoke the actual code in your <code>my_vmi_tool.c</code>.</p>

<hr />

<p>Last thing you should know is: currently vmi tool are all <em>user mode</em> application code. It does not support to write vmi tool as a kernel module. The environment you vmi code run is just the user space on the host OS.</p>

<p>Whenever you have any problem with libvmi, you can create a post in their <a href="http://groups.google.com/group/vmitools/topics">googlegroup</a>. The guys there are really very friendly, I've post 2 topics there and both receive very good feedbacks.</p>
]]></content>
  </entry>
  
</feed>
