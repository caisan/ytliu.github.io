<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Mctrain's Blog]]></title>
  <link href="http://ytliu.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ytliu.github.io/"/>
  <updated>2016-12-15T12:22:01+08:00</updated>
  <id>http://ytliu.github.io/</id>
  <author>
    <name><![CDATA[Liu Yutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux内存初始化（C语言部分）]]></title>
    <link href="http://ytliu.github.io/blog/2016/03/15/linuxnei-cun-chu-shi-hua-c/"/>
    <updated>2016-03-15T11:04:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2016/03/15/linuxnei-cun-chu-shi-hua-c</id>
    <content type="html"><![CDATA[<p>这篇博客接着<a href="http://ytliu.info/blog/2016/03/14/linuxnei-cun-chu-shi-hua-assembly/">上篇博客</a>，继续介绍Linux内核启动过程中内存的初始化过程。</p>

<p>相比于汇编代码，分析C代码有一个优势，因为在之前的汇编代码中已经开启了分页模式，所以可以通过一些symbol直接在某些函数上设置断点，然后通过gdb进行调试。如何用gdb调试内核可以参考<a href="http://ytliu.info/blog/2014/10/22/debugging-linux-kernel-using-gdb-and-qemu/">这篇博客</a>。</p>

<!-- more -->


<h3>进入x86_64_start_kernel</h3>

<p>之前我们讲到，在<code>secondary_startup_64</code>最后，我们通过far return进入了C语言实现的函数<code>x86_64_start_kernel</code>，那么这篇我们就从这个函数开始讲起。</p>

<p>这个函数在<code>arch/x86/kernel/head64.c</code>文件中，该函数有一个参数，是<code>char * real_mode_data</code>，这个参数是在之前通过<code>movq  %rsi, %rdi</code>传进来的。</p>

<p>在该函数的开头，先做了一些sanity检查：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Build</span><span class="o">-</span><span class="n">time</span> <span class="n">sanity</span> <span class="n">checks</span> <span class="n">on</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">image</span> <span class="n">and</span> <span class="n">module</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">area</span> <span class="n">mappings</span><span class="p">.</span> <span class="p">(</span><span class="n">these</span> <span class="n">are</span> <span class="n">purely</span> <span class="n">build</span><span class="o">-</span><span class="n">time</span> <span class="n">and</span> <span class="n">produce</span> <span class="n">no</span> <span class="n">code</span><span class="p">)</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">MODULES_VADDR</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">MODULES_VADDR</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">KERNEL_IMAGE_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">MODULES_LEN</span> <span class="o">+</span> <span class="n">KERNEL_IMAGE_SIZE</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">PUD_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">((</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">PMD_MASK</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">((</span><span class="n">MODULES_VADDR</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="n">PMD_MASK</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">MODULES_VADDR</span> <span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL</span><span class="p">));</span>
</span><span class='line'>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="o">!</span><span class="p">(((</span><span class="n">MODULES_END</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PGDIR_MASK</span><span class="p">)</span> <span class="o">==&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">(</span><span class="n">__START_KERNEL</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PGDIR_MASK</span><span class="p">)));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">fix_to_virt</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">end_of_fixed_addresses</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">MODULES_END</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>主要是针对Module地址的检查（module被映射在<code>0xffffffffa0000000</code>上面）。</p>

<p>之后做了一个操作，将之前建立的<code>identity-map</code>给清除掉了，因为我们现在已经用高地址进行页表翻译了，所以那个identity-map也就没有用了：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Wipe</span> <span class="n">all</span> <span class="n">early</span> <span class="n">page</span> <span class="n">tables</span> <span class="n">except</span> <span class="k">for</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">symbol</span> <span class="n">map</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__init</span> <span class="n">reset_early_page_tables</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PTRS_PER_PGD</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">early_level4_pgt</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pgd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">next_early_pgt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">write_cr3</span><span class="p">(</span><span class="n">__pa</span><span class="p">(</span><span class="n">early_level4_pgt</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Kill</span> <span class="n">off</span> <span class="n">the</span> <span class="n">identity</span><span class="o">-</span><span class="n">map</span> <span class="n">trampoline</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">reset_early_page_tables</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意这里有一个<code>__pa(early_level4_pgt)</code>，我们来看一下<code>__pa</code>的定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr_nodebug</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">use</span> <span class="n">the</span> <span class="n">carry</span> <span class="n">flag</span> <span class="n">to</span> <span class="n">determine</span> <span class="k">if</span> <span class="n">x</span> <span class="n">was</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">__START_KERNEL_map</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="p">((</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span> <span class="o">?</span> <span class="n">phys_base</span> <span class="o">:</span> <span class="p">(</span><span class="n">__START_KERNEL_map</span> <span class="o">-</span> <span class="n">PAGE_OFFSET</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr_nodebug</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">pa</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>   <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">phys_addr</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之后调用<code>clear_bss</code>，即将bss中的内容清零：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">add</span> <span class="n">a</span> <span class="n">printk</span> <span class="n">in</span> <span class="n">there</span><span class="p">.</span> <span class="n">printk</span> <span class="n">relies</span> <span class="n">on</span> <span class="n">the</span> <span class="n">PDA</span> <span class="n">which</span> <span class="n">is</span> <span class="n">not</span> <span class="n">initialized</span>
</span><span class='line'>   <span class="n">yet</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span> <span class="n">clear_bss</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">bss_start</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">__bss_stop</span> <span class="o">-</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">__bss_start</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">clear</span> <span class="n">bss</span> <span class="n">before</span> <span class="n">set_intr_gate</span> <span class="n">with</span> <span class="n">early_idt_handler</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">clear_bss</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后创建idtr gate：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">native_load_idt</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">desc_ptr</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dtr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&quot;lidt %0&quot;</span><span class="o">::</span><span class="s">&quot;m&quot;</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dtr</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">load_idt</span><span class="p">(</span><span class="n">dtr</span><span class="p">)</span> <span class="n">native_load_idt</span><span class="p">(</span><span class="n">dtr</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">NUM_EXCEPTION_VECTORS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">set_intr_gate</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">early_idt_handlers</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">load_idt</span><span class="p">((</span><span class="k">const</span> <span class="k">struct</span> <span class="n">desc_ptr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">idt_descr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后调用<code>copy_bootdata</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">copy_bootdata</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">real_mode_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span> <span class="n">command_line</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">cmd_line_ptr</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">boot_params</span><span class="p">,</span> <span class="n">real_mode_data</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">boot_params</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sanitize_boot_params</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">boot_params</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cmd_line_ptr</span> <span class="o">=</span> <span class="n">get_cmd_line_ptr</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">cmd_line_ptr</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">command_line</span> <span class="o">=</span> <span class="n">__va</span><span class="p">(</span><span class="n">cmd_line_ptr</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">boot_command_line</span><span class="p">,</span> <span class="n">command_line</span><span class="p">,</span> <span class="n">COMMAND_LINE_SIZE</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">copy_bootdata</span><span class="p">(</span><span class="n">__va</span><span class="p">(</span><span class="n">real_mode_data</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里面主要是copy一些boot的参数，之后调用<code>load_ucode_bsp</code>和<code>early_printk</code>，这里都不详述。</p>

<p>然后设置<code>init_level4_pgt</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">clear_page</span><span class="p">(</span><span class="n">init_level4_pgt</span><span class="p">);</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">set</span> <span class="n">init_level4_pgt</span> <span class="n">kernel</span> <span class="n">high</span> <span class="n">mapping</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">init_level4_pgt</span><span class="p">[</span><span class="mi">511</span><span class="p">]</span> <span class="o">=</span> <span class="n">early_level4_pgt</span><span class="p">[</span><span class="mi">511</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>后来还有一些函数调用和boot相关的，这里也不细说，最后调用<code>start_kernel</code>：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">x86_64_start_kernel</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">real_mode_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">x86_64_start_reservations</span><span class="p">(</span><span class="n">real_mode_data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">__init</span> <span class="n">x86_64_start_reservations</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">real_mode_data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">start_kernel</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>start_kernel</h3>

<p>下面进入<code>start_kernel</code>函数，该函数定义在<code>init/main.c</code>文件中。</p>

<p>里面调用了很多函数来做各种目的的初始化，其中和内存初始化相关的函数调用如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__init</span> <span class="nf">start_kernel</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">setup_arch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">command_line</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">setup_per_cpu_areas</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">build_all_zonelist</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">page_alloc_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">mm_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">setup_per_cpu_pageset</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
如下图所示（截图自<a href="http://guojing.me/linux-kernel-architecture/posts/init-mm-management/">这里</a>)：</p>

<p><img src="http://ytliu.info/images/2016-03-15-1.png" title="start kernel" alt="start_kernel" /></p>

<p>下面我们逐个函数进行介绍。</p>

<h4>setup_arch</h4>

<p>x86的<code>setup_arch</code>定义在<code>arch/x86/kernel/setup.c</code>文件中，其中和内存初始化相关的函数如下所示：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__init</span> <span class="nf">setup_arch</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">cmdline_p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">setup_memory_map</span><span class="p">();</span>
</span><span class='line'>  <span class="n">e820_reserve_setup_data</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">init_mm</span><span class="p">.</span><span class="n">start_code</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_mm</span><span class="p">.</span><span class="n">end_code</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">etext</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_mm</span><span class="p">.</span><span class="n">end_data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">edata</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_mm</span><span class="p">.</span><span class="n">brk</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">e820_add_kernel_range</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">cleanup_highmap</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">init_mem_mapping</span><span class="p">();</span>
</span><span class='line'>  <span class="n">early_trap_pf_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">x86_init</span><span class="p">.</span><span class="n">paging</span><span class="p">.</span><span class="n">pagetable_init</span><span class="p">();</span> <span class="c1">// native_pagetable_init() -&gt; paging_init (arch/x86/mm/init_64.c)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中，前面一直是在通过BIOS获得E820内存分布（e820请查阅<a href="http://ytliu.info/blog/2015/07/30/xende-qi-dong-zhi-nei-cun-xiang-guan-shi-xian/">这篇博客</a>)，以及初始化<code>init_mm</code>。我们从<code>cleanup_highmap</code>开始分析，该函数在<code>arch/x86/mm/init_64.c</code>中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">head</span><span class="p">.</span><span class="n">S</span> <span class="n">code</span> <span class="n">sets</span> <span class="n">up</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">high</span> <span class="n">mapping</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>   <span class="n">from</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="n">to</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">size</span> <span class="p">(</span><span class="o">==</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span><span class="o">-&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">phys_base</span> <span class="n">holds</span> <span class="n">the</span> <span class="n">negative</span> <span class="n">offset</span> <span class="n">to</span> <span class="n">the</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">added</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">compile</span> <span class="n">time</span> <span class="n">generated</span> <span class="n">pmds</span><span class="p">.</span> <span class="n">This</span> <span class="n">results</span> <span class="n">in</span> <span class="n">invalid</span> <span class="n">pmds</span> <span class="n">up</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">point</span> <span class="n">where</span> <span class="n">we</span> <span class="n">hit</span> <span class="n">the</span> <span class="n">physaddr</span> <span class="mi">0</span> <span class="n">mapping</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">We</span> <span class="n">limit</span> <span class="n">the</span> <span class="n">mappings</span> <span class="n">to</span> <span class="n">the</span> <span class="n">region</span> <span class="n">from</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span> <span class="n">to</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span><span class="p">.</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span>
</span><span class='line'> <span class="o">*</span> <span class="n">is</span> <span class="n">rounded</span> <span class="n">up</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">2</span><span class="n">MB</span> <span class="n">boundary</span><span class="p">.</span> <span class="n">This</span> <span class="n">catches</span> <span class="n">the</span> <span class="n">invalid</span> <span class="n">pmds</span> <span class="n">as</span>
</span><span class='line'> <span class="o">*</span> <span class="n">well</span><span class="p">,</span> <span class="n">as</span> <span class="n">they</span> <span class="n">are</span> <span class="n">located</span> <span class="n">before</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span> <span class="n">cleanup_highmap</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">vaddr</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">vaddr_end</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_START_KERNEL_map</span> <span class="o">+</span> <span class="n">KERNEL_IMAGE_SIZE</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">roundup</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">brk_end</span><span class="p">,</span> <span class="n">PMD_SIZE</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pmd_t</span> <span class="o">*</span><span class="n">pmd</span> <span class="o">=</span> <span class="n">level2_kernel_pgt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Native</span> <span class="n">path</span><span class="p">,</span> <span class="n">max_pfn_mapped</span> <span class="n">is</span> <span class="n">not</span> <span class="n">set</span> <span class="n">yet</span><span class="p">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Xen</span> <span class="n">has</span> <span class="n">valid</span> <span class="n">max_pfn_mapped</span> <span class="n">set</span> <span class="n">in</span>
</span><span class='line'>   <span class="o">*</span>  <span class="n">arch</span><span class="o">/</span><span class="n">x86</span><span class="o">/</span><span class="n">xen</span><span class="o">/</span><span class="n">mmu</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="n">xen_setup_kernel_pagetable</span><span class="p">().</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">max_pfn_mapped</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">vaddr_end</span> <span class="o">=</span> <span class="n">__START_KERNEL_map</span> <span class="o">+</span> <span class="p">(</span><span class="n">max_pfn_mapped</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(;</span> <span class="n">vaddr</span> <span class="o">+</span> <span class="n">PMD_SIZE</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">vaddr_end</span><span class="p">;</span> <span class="n">pmd</span><span class="o">++</span><span class="p">,</span> <span class="n">vaddr</span> <span class="o">+=</span> <span class="n">PMD_SIZE</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">pmd_none</span><span class="p">(</span><span class="o">*</span><span class="n">pmd</span><span class="p">))</span>
</span><span class='line'>  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">vaddr</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">_text</span> <span class="o">||</span> <span class="n">vaddr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>  <span class="n">set_pmd</span><span class="p">(</span><span class="n">pmd</span><span class="p">,</span> <span class="n">__pmd</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这段代码非常好理解，加上看注释，可以知道其功能就是将小于<code>_text</code>和大于<code>_brk_end</code>的地址都从页表中unmap掉。</p>

<p>接下来是<code>init_mem_mapping</code>这个函数，该函数位于<code>arch/x86/mm/init.c</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__init</span> <span class="nf">init_mem_mapping</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">end</span> <span class="o">=</span> <span class="n">max_pfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">ISA</span> <span class="n">range</span> <span class="n">is</span> <span class="n">always</span> <span class="n">mapped</span> <span class="n">regardless</span> <span class="n">of</span> <span class="n">memory</span> <span class="n">holes</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">init_memory_mapping</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ISA_END_ADDRESS</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">memory_map_top_down</span><span class="p">(</span><span class="n">ISA_END_ADDRESS</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">max_pfn</span> <span class="o">&gt;</span> <span class="n">max_low_pfn</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* can we preseve max_low_pfn ?*/</span>
</span><span class='line'><span class="n">max_low_pfn</span> <span class="o">=</span> <span class="n">max_pfn</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">load_cr3</span><span class="p">(</span><span class="n">swapper_pg_dir</span><span class="p">);</span>
</span><span class='line'>  <span class="n">__flush_tlb_all</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">early_memtest</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">max_pfn_mapped</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里面虽然代码少，但是信息量还是蛮大的，我们一个一个来看。</p>

<p>首先是<code>init_memory_mapping</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Setup</span> <span class="n">the</span> <span class="n">direct</span> <span class="n">mapping</span> <span class="n">of</span> <span class="n">the</span> <span class="n">physical</span> <span class="n">memory</span> <span class="n">at</span> <span class="n">PAGE_OFFSET</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">This</span> <span class="n">runs</span> <span class="n">before</span> <span class="n">bootmem</span> <span class="n">is</span> <span class="n">initialized</span> <span class="n">and</span> <span class="n">gets</span> <span class="n">pages</span> <span class="n">directly</span> <span class="n">from</span>
</span><span class='line'> <span class="o">*</span> <span class="n">the</span> <span class="n">physical</span> <span class="n">memory</span><span class="p">.</span> <span class="n">To</span> <span class="n">access</span> <span class="n">them</span> <span class="n">they</span> <span class="n">are</span> <span class="n">temporarily</span> <span class="n">mapped</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">__init_refok</span> <span class="n">init_memory_mapping</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>             <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">map_range</span> <span class="n">mr</span><span class="p">[</span><span class="n">NR_RANGE_MR</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nr_range</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;init_memory_mapping: [mem %#010lx-%#010lx]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">memset</span><span class="p">(</span><span class="n">mr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">nr_range</span> <span class="o">=</span> <span class="n">split_mem_range</span><span class="p">(</span><span class="n">mr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nr_range</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ret</span> <span class="o">=</span> <span class="n">kernel_physical_mapping_init</span><span class="p">(</span><span class="n">mr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">start</span><span class="p">,</span> <span class="n">mr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">end</span><span class="p">,</span>
</span><span class='line'>           <span class="n">mr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">page_size_mask</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">add_pfn_range_mapped</span><span class="p">(</span><span class="n">start</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">ret</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">ret</span> <span class="o">&gt;&gt;</span> <span class="n">PAGE_SHIFT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里注释中提到的<code>PAGE_OFFSET</code>值为<code>0xffff880000000000</code>（<code>0xffff880000000000</code>到<code>0xffffc7ffffffffff</code>为所有物理地址的direct mapping）。</p>

<p>这里有两个主要的函数，我们先来看<code>split_mem_range</code>（位于<code>arch/x86/mm/init.c</code>）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__meminit</span> <span class="n">split_mem_range</span><span class="p">(</span><span class="k">struct</span> <span class="n">map_range</span> <span class="o">*</span><span class="n">mr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nr_range</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span>
</span><span class='line'>         <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>里面代码比较复杂，和之前在分析xen代码中某个函数有点像，这里就不逐段分析。简单说一下它做了什么吧。<code>split_mem_range</code>的作用就是将整个物理地址段进行了一个分类，把所有地址分为三类：</p>

<ul>
<li>大于1G的地址段</li>
<li>2M到1G的地址段</li>
<li>其它</li>
</ul>


<p>然后将<code>start</code>到<code>end</code>的物理地址段分别塞进这些段中，然后将每个段的信息保存在<code>mr</code>这个数据结构中。这个数据结构包括了每个地址段的起始地址、结束地址、以及alignment。最后有一个merge过程，将<code>mr</code>中相邻且alignment相同的项进行合并。</p>

<p>最后分出来的地址段的结果如下图所示：</p>

<p><img src="http://ytliu.info/images/2016-03-15-2.png" title="split_mem_range" alt="split_mem_range" /></p>

<p>另外一个函数为<code>kernel_physical_mapping_init</code>（位于<code>arch/x86/mm/init_64.c</code>）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">__meminit</span>
</span><span class='line'><span class="n">kernel_physical_mapping_init</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>       <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">end</span><span class="p">,</span>
</span><span class='line'>       <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">page_size_mask</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">pgd_changed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">next</span><span class="p">,</span> <span class="n">last_map_addr</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">addr</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>  <span class="n">end</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(;</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span><span class="p">;</span> <span class="n">start</span> <span class="o">=</span> <span class="n">next</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pgd_t</span> <span class="o">*</span><span class="n">pgd</span> <span class="o">=</span> <span class="n">pgd_offset_k</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'><span class="n">pud_t</span> <span class="o">*</span><span class="n">pud</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">PGDIR_MASK</span><span class="p">)</span> <span class="o">+</span> <span class="n">PGDIR_SIZE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">pgd_val</span><span class="p">(</span><span class="o">*</span><span class="n">pgd</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pud</span> <span class="o">=</span> <span class="p">(</span><span class="n">pud_t</span> <span class="o">*</span><span class="p">)</span><span class="n">pgd_page_vaddr</span><span class="p">(</span><span class="o">*</span><span class="n">pgd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">last_map_addr</span> <span class="o">=</span> <span class="n">phys_pud_init</span><span class="p">(</span><span class="n">pud</span><span class="p">,</span> <span class="n">__pa</span><span class="p">(</span><span class="n">start</span><span class="p">),</span>
</span><span class='line'>         <span class="n">__pa</span><span class="p">(</span><span class="n">end</span><span class="p">),</span> <span class="n">page_size_mask</span><span class="p">);</span>
</span><span class='line'>  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pud</span> <span class="o">=</span> <span class="n">alloc_low_page</span><span class="p">();</span>
</span><span class='line'><span class="n">last_map_addr</span> <span class="o">=</span> <span class="n">phys_pud_init</span><span class="p">(</span><span class="n">pud</span><span class="p">,</span> <span class="n">__pa</span><span class="p">(</span><span class="n">start</span><span class="p">),</span> <span class="n">__pa</span><span class="p">(</span><span class="n">end</span><span class="p">),</span>
</span><span class='line'>         <span class="n">page_size_mask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">.</span><span class="n">page_table_lock</span><span class="p">);</span>
</span><span class='line'><span class="n">pgd_populate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">,</span> <span class="n">pgd</span><span class="p">,</span> <span class="n">pud</span><span class="p">);</span>
</span><span class='line'><span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">.</span><span class="n">page_table_lock</span><span class="p">);</span>
</span><span class='line'><span class="n">pgd_changed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">pgd_changed</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sync_global_pgds</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">__flush_tlb_all</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">last_map_addr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是一个非常关键的函数，它的作用就是填充页表，将所有之前探寻到并且分割好的物理地址映射到对应的虚拟内存中，并在页表中体现出来。我们来逐段分析：</p>

<p>首先通过<code>__va</code>这个宏将物理地址转换成其对应的（direct mapping）虚拟地址，即加上<code>0xffff880000000000</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>  <span class="n">end</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">va</span><span class="p">(</span><span class="n">end</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后就是传统的走页表过程了，这里有个宏需要说明：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">swapper_pg_dir</span> <span class="n">init_level4_pgt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">mm_struct</span> <span class="n">init_mm</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">pgd</span> <span class="o">=</span> <span class="n">swapper_pg_dir</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">pgd_offset</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span> <span class="p">((</span><span class="n">mm</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pgd</span> <span class="o">+</span> <span class="n">pgd_index</span><span class="p">((</span><span class="n">address</span><span class="p">)))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">pgd_offset_k</span><span class="p">(</span><span class="n">address</span><span class="p">)</span> <span class="n">pgd_offset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">init_mm</span><span class="p">,</span> <span class="p">(</span><span class="n">address</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pgd_t</span> <span class="o">*</span><span class="n">pgd</span> <span class="o">=</span> <span class="n">pgd_offset_k</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>也就是说，在这个时候，pgt_dir从原来的<code>early_level4_pgt</code>变成了<code>init_level4_pgt</code>，这个数据结构同样是在<code>arch/x86/kernel/head_64.S</code>中定义的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">init_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span>   <span class="n">level3_ident_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">org</span>    <span class="n">init_level4_pgt</span> <span class="o">+</span> <span class="n">L4_PAGE_OFFSET</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span>   <span class="n">level3_ident_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">org</span>    <span class="n">init_level4_pgt</span> <span class="o">+</span> <span class="n">L4_START_KERNEL</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">48</span><span class="o">-</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">511</span> <span class="err">*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span>   <span class="n">level3_kernel_pgt</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span> <span class="o">+</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level3_ident_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level2_ident_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">511</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level2_ident_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Since</span> <span class="n">I</span> <span class="n">easily</span> <span class="n">can</span><span class="p">,</span> <span class="n">map</span> <span class="n">the</span> <span class="n">first</span> <span class="mi">1</span><span class="n">G</span><span class="p">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">set</span> <span class="n">NX</span> <span class="n">because</span> <span class="n">code</span> <span class="n">runs</span> <span class="n">from</span> <span class="n">these</span> <span class="n">pages</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">PMDS</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">PAGE_KERNEL_IDENT_LARGE_EXEC</span><span class="p">,</span> <span class="n">PTRS_PER_PMD</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因此，加上<code>init_level4_pgt</code>这个页表后，内存的分布图如下所示：</p>

<p><img src="http://ytliu.info/images/2016-03-15-3.png" title="init level4 pgt" alt="init level4 pgt" /></p>

<p>所以<code>kernel_physical_mapping_init</code>后面的代码就是根据不同<code>mr</code>数据结构中的地址段将这个页表进行填充，这里就不详述了。</p>

<p>在执行完<code>init_memory_mapping</code>之后，<code>init_mem_mapping</code>函数又执行了一个<code>memory_map_top_down</code>函数，里面其实也是根据不同的地址段，连续调用<code>init_range_memory_mapping</code>，从而间接调用<code>init_memory_mapping</code>函数。</p>

<p>最后，将<code>swapper_pg_dir</code>加载进<code>cr3</code>，完成页表的转换。</p>

<p>现在让我们回到<code>setup_arch</code>，调用<code>paging_init</code>（位于<code>arch/x86/mm/init_64.c</code>）。里面主要完成一些zones的初始化，不详述。</p>

<p>再次回到<code>start_kernel</code>，在<code>setup_arch</code>之后还陆续调用了几个和percpu以及memory zones，memory allocator相关的函数，这里也不详细说了。</p>

<p>这个系列就先简单介绍到这里，其实后面还有很多内容没有详细介绍，主要目的是搞清楚内核是如何创建页表的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内存初始化（汇编部分）]]></title>
    <link href="http://ytliu.github.io/blog/2016/03/14/linuxnei-cun-chu-shi-hua-assembly/"/>
    <updated>2016-03-14T20:47:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2016/03/14/linuxnei-cun-chu-shi-hua-assembly</id>
    <content type="html"><![CDATA[<p>之前有几篇博客详细介绍了Xen的内存初始化，确实感觉这部分内容蛮复杂的。这两天在看Linux内核启动中内存的初始化，也是看的云里雾里的，想尝试下边看边写，在写博客的过程中慢慢思考，最后也能把自己的思考分享给其它人。</p>

<!-- more -->


<p>这个系列主要分为两个部分，汇编部分和<a href="http://ytliu.info/blog/2016/03/15/linuxnei-cun-chu-shi-hua-c/">C语言部分</a>。</p>

<p>这篇博文主要介绍的是汇编部分。</p>

<p>注：这两篇博文介绍的都是64位系统。</p>

<h3>内核解压缩过程</h3>

<p>这个过程就不详述了，整个Linux内核是作为一个压缩过的镜像提供的，在执行内核代码之前，首先需要bootloader对其进行一个解压缩，对这部分有兴趣可以参看<a href="http://blog.sina.com.cn/s/blog_b02f77c80101db1t.html">这篇博客</a>。</p>

<h3>最初的页表什么样？</h3>

<p>解压结束后，会进行一个对elf格式的parse，然后对内核进行加载，最后进入<code>arch/x86/kernel/head_64.S</code>中的<code>startup_64</code>。</p>

<p><code>startup_64</code>主要完成分页功能启用，最后跳入C代码x86_64_start_kernel。在开始分析代码之前，我们要先来看看在内核的数据段中，初始化页表是长怎么样的？</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">INITDATA</span>
</span><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">511</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level3_kernel_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_dynamic_pgts</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="o">*</span><span class="n">EARLY_DYNAMIC_PAGE_TABLES</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="n">data</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">init_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level3_kernel_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="n">L3_START_KERNEL</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">48</span><span class="o">-</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">)</span><span class="o">-</span><span class="p">((</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">39</span><span class="p">)</span><span class="o">*</span><span class="mi">511</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="mi">30</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;&lt;/</span><span class="n">sup</span><span class="o">&gt;&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">510</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level2_kernel_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level2_fixmap_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level2_kernel_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="n">PMDS</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">__PAGE_KERNEL_LARGE_EXEC</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">KERNEL_IMAGE_SIZE</span><span class="o">/</span><span class="n">PMD_SIZE</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level2_fixmap_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">506</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level1_fixmap_pgt</span> <span class="o">-</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_START_KERNEL_map</span> <span class="o">+</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_TABLE</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="mi">8</span><span class="n">MB</span> <span class="n">reserved</span> <span class="k">for</span> <span class="n">vsyscalls</span> <span class="o">+</span> <span class="n">a</span> <span class="mi">2</span><span class="n">MB</span> <span class="n">hole</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">entries</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">level1_fixmap_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这段数据结构还是比较清楚的，你把下面这两个宏<code>NEXT_PAGE</code>和<code>PMDS</code>代入上面的数据结构：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="n">balign</span> <span class="n">PAGE_SIZE</span><span class="p">;</span> \
</span><span class='line'><span class="n">GLOBAL</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Automate</span> <span class="n">the</span> <span class="n">creation</span> <span class="n">of</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">1</span> <span class="n">mapping</span> <span class="n">pmd</span> <span class="n">entries</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PMDS</span><span class="p">(</span><span class="n">START</span><span class="p">,</span> <span class="n">PERM</span><span class="p">,</span> <span class="n">COUNT</span><span class="p">)</span>      <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>           \
</span><span class='line'>  <span class="p">.</span><span class="n">rept</span> <span class="p">(</span><span class="n">COUNT</span><span class="p">)</span> <span class="p">;</span>         \
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="p">(</span><span class="n">START</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PMD_SHIFT</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">PERM</span><span class="p">)</span> <span class="p">;</span> \
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">;</span>         \
</span><span class='line'>  <span class="p">.</span><span class="n">endr</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们就可以很轻易地画出下面这张图：</p>

<p><img src="http://ytliu.info/images/2016-03-14-1.png" title="Linux early page table in boot" alt="early page table" /></p>

<p>后面的初始化过程，就是建立在这个早期的页表结构中的。</p>

<h3>正式进入startup_64</h3>

<p>我们一段段来分析：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">startup_64:</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Compute</span> <span class="n">the</span> <span class="n">delta</span> <span class="n">between</span> <span class="n">the</span> <span class="n">address</span> <span class="n">I</span> <span class="n">am</span> <span class="n">compiled</span> <span class="n">to</span> <span class="n">run</span> <span class="n">at</span> <span class="n">and</span> <span class="n">the</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">address</span> <span class="n">I</span> <span class="n">am</span> <span class="n">actually</span> <span class="n">running</span> <span class="n">at</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">subq</span>  <span class="err">$</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Is</span> <span class="n">the</span> <span class="n">address</span> <span class="n">not</span> <span class="mi">2</span><span class="n">M</span> <span class="n">aligned</span><span class="o">?</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">andl</span>  <span class="err">$</span><span class="o">~</span><span class="n">PMD_PAGE_MASK</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">testl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">jnz</span> <span class="n">bad_address</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Is</span> <span class="n">the</span> <span class="n">address</span> <span class="n">too</span> <span class="n">large</span><span class="o">?</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">_text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">MAX_PHYSMEM_BITS</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">jnz</span> <span class="n">bad_address</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里的这段代码非常奇怪：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">leaq</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">subq</span>  <span class="err">$</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">text</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我想了好久，现在终于在Liangpig的指导下有了点眉目。（不确定的）解释如下：</p>

<p>首先<code>leaq  _text(%rip), %rbp</code>是一个相对寻址的指令，其并不是直接将<code>_text</code>的地址和当前<code>%rip</code>的值相加，而是<code>%rip</code>加上一个<code>_text</code>和它的相对地址，其实就是<code>$-7</code>（因为该地址的长度为7，而当前的<code>%rip</code>就是<code>_text</code>地址加上<code>7</code>），这个相对值是在link的时候计算出来的，可以参看<a href="http://stackoverflow.com/questions/9354941/retrieving-data-in-x86-64">这个问题</a>和<a href="http://stackoverflow.com/questions/3250277/how-to-use-rip-relative-addressing-in-a-64-bit-assembly-program">这个问题</a>。</p>

<p>这里另外需要注意的一点是，在当前这个时候，计算机还是通过实模式进行寻址的，所以内核的代码应该是被load到了一个低地址（而不是大于<code>0xffffffff8000000</code>的地址），因此，<code>%rbp</code>存储的也是一个低地址，表示的是内核的代码段被实际装载到内存到的地址，让我们假设是<code>0x3000000</code>。</p>

<p>那么<code>$_text - __START_KERNEL_map</code>是什么呢？我们来看下面的定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_START_KERNEL_map</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">AC</span><span class="p">(</span><span class="mh">0xffffffff80000000</span><span class="p">,</span> <span class="n">UL</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">__PHYSICAL_START</span>  <span class="n">ALIGN</span><span class="p">(</span><span class="n">CONFIG_PHYSICAL_START</span><span class="p">,</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                    <span class="n">CONFIG_PHYSICAL_ALIGN</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL</span>  <span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">__PHYSICAL_START</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">__START_KERNEL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="n">text</span> <span class="o">:</span> <span class="n">AT</span><span class="p">(</span><span class="n">ADDR</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span> <span class="o">-</span> <span class="n">LOAD_OFFSET</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_text</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>首先，<code>__START_KERNEL_map</code>是<code>0xffffffff80000000</code>，即内核代码和数据段在64位的虚拟地址空间中的最低地址段（<code>0xffffffff80000000</code>到<code>0xffffffffa0000000</code>这512MB的虚拟机之空间映射了内核段）。而<code>_text</code>表示的是<code>__START_KERNEL_map</code>加上了一段编译过程中指定的地址，在我机器内核的<code>.config</code>文件中为<code>0x1000000</code>。也就是说，如果<code>__START_KERNEL_map</code>映射的是物理地址为<code>0</code>的内存的话，那么在编译中我们期望的真正的物理地址就为<code>0x1000000</code>，也就是说，<code>$_text - __START_KERNEL_map</code>表示的是我们在编译过程中期望的内核段被装载到内存的起始地址，因此<code>subq  $_text - __START_KERNEL_map, %rbp</code>表示将当前内核段真实被装载到内存中的地址和编译过程中期望被装载到内存中的地址的差值赋值给<code>%rbx</code>，在我们的例子中即为<code>0x2000000</code>（<code>0x3000000</code> - <code>0x1000000</code>）。</p>

<p>之后我们就对这个真实被装载到内存中的地址做一些检查，包括是否2M对齐，以及有没有超过最大大小等等，这里就不详述了。</p>

<p>然后做的一件事就是调整初始化页表中的物理地址映射：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Fixup</span> <span class="n">the</span> <span class="n">physical</span> <span class="n">addresses</span> <span class="n">in</span> <span class="n">the</span> <span class="n">page</span> <span class="n">table</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">early_level4_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="n">L4_START_KERNEL</span><span class="o">*</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">level3_kernel_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="mi">510</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">level3_kernel_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="mi">511</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">level2_fixmap_pgt</span> <span class="o">+</span> <span class="p">(</span><span class="mi">506</span><span class="o">*</span><span class="mi">8</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这又是一段相对寻址，由于页表处于数据段，所以需要根据其和<code>%rip</code>中的相对地址来定位到页表，然后将页表中的表项加上之前计算的相对偏移量。当然这里只处理了<code>early_level4_pgt</code>、<code>level3_kernel_pgt</code>和<code>level2_fixmap_pgt</code>，而真正映射内核段的<code>level2_kernel_pgt</code>会在之后进行fixup。</p>

<p>之后又进入了一段诡异的代码，来建立<code>identity mapping for the switchover</code>，我也不懂这里的<code>switchover</code>是什么，我们先来看下这段代码做了什么吧：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Set</span> <span class="n">up</span> <span class="n">the</span> <span class="n">identity</span> <span class="n">mapping</span> <span class="k">for</span> <span class="n">the</span> <span class="n">switchover</span><span class="p">.</span>  <span class="n">These</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">entries</span> <span class="n">should</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">NOT</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">have</span> <span class="n">the</span> <span class="n">global</span> <span class="n">bit</span> <span class="n">set</span><span class="o">!</span>  <span class="n">This</span> <span class="n">also</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">creates</span> <span class="n">a</span> <span class="n">bunch</span> <span class="n">of</span> <span class="n">nonsense</span> <span class="n">entries</span> <span class="n">but</span> <span class="n">that</span> <span class="n">is</span> <span class="n">fine</span> <span class="o">--</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">it</span> <span class="n">avoids</span> <span class="n">problems</span> <span class="n">around</span> <span class="n">wraparound</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">_text</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">early_level4_pgt</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rbx</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PGDIR_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">leaq</span>  <span class="p">(</span><span class="mi">4096</span> <span class="o">+</span> <span class="n">_KERNPG_TABLE</span><span class="p">)(</span><span class="o">%</span><span class="n">rbx</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="err">$</span><span class="mi">4096</span><span class="p">,</span> <span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PUD_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">andl</span>  <span class="err">$</span><span class="p">(</span><span class="n">PTRS_PER_PUD</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">4096</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">incl</span>  <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">andl</span>  <span class="err">$</span><span class="p">(</span><span class="n">PTRS_PER_PUD</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="mi">4096</span><span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">addq</span>  <span class="err">$</span><span class="mi">8192</span><span class="p">,</span> <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PMD_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="err">$</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_KERNEL_LARGE_EXEC</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">PAGE_GLOBAL</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'>  <span class="n">shrq</span>  <span class="err">$</span><span class="n">PMD_SHIFT</span><span class="p">,</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'>  <span class="n">subq</span>  <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">%</span><span class="n">rcx</span>
</span><span class='line'>  <span class="n">incl</span>  <span class="o">%</span><span class="n">ecx</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">:</span>
</span><span class='line'>  <span class="n">andq</span>  <span class="err">$</span><span class="p">(</span><span class="n">PTRS_PER_PMD</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="p">(</span><span class="o">%</span><span class="n">rbx</span><span class="p">,</span><span class="o">%</span><span class="n">rdi</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">incq</span>  <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="err">$</span><span class="n">PMD_SIZE</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">decl</span>  <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">jnz</span> <span class="mi">1</span><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们可以稍微进行一个计算，首先<code>%rdi</code>保存了当前内核代码段的首地址，<code>%rbx</code>保存了<code>early_level4_pgt</code>的地址，<code>%rax</code>是内核代码首地址对于level4页表的index，在当前即为0。所以<code>leaq  (4096 + _KERNPG_TABLE)(%rbx), %rdx</code>表示的是将<code>early_level4_pgt</code>所在的地址加上一个页的地址，作为第3级页表页，再加上相应的权限位，保存在<code>%rdx</code>中，然后通过<code>movq  %rdx, 0(%rbx,%rax,8)</code>和<code>movq  %rdx, 8(%rbx,%rax,8)</code>指令把<code>%rdx</code>作为一个表项，存在<code>early_level4_pgt</code>的第0和第1项中。</p>

<p>然后将<code>%rdx</code>再加上一个页的大小，作为第2级页表页，找到内核代码段对于level3页表的index，然后将第2级页表页加上对应的权限作为一个页表项存在刚刚建立的level3页表的第0项和第1项。</p>

<p>然后将<code>%rbx</code>加上两个页的大小，即第2级页表的位置，找到从<code>_text</code>到<code>_end</code>所有内核代码段对于level2页表的索引，然后将对应的地址+权限作为页表项逐个填到这个第2级页表中。</p>

<p>我们可以在<code>arch/x86/kernel/head_64.S</code>文件中找到这几个新添加的页表页的定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">INITDATA</span>
</span><span class='line'><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_level4_pgt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">511</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">level3_kernel_pgt</span> <span class="o">-</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">START_KERNEL_map</span> <span class="o">+</span> <span class="n">_PAGE_TABLE</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NEXT_PAGE</span><span class="p">(</span><span class="n">early_dynamic_pgts</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">fill</span> <span class="mi">512</span><span class="o">*</span><span class="n">EARLY_DYNAMIC_PAGE_TABLES</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>即紧接着<code>early_level4_pgt</code>，被称为<code>early_dynamic_pgts</code>。这个就是所谓的<code>identity mapping for the switchover</code>，表示在之后的一小段页表转换过程中会被用到的identity mapping。因为在页表中虚拟地址从低地址到高地址转换的过程中不可避免的会通过低位的虚拟地址进行索引，所以需要预先做个identity mapping的准备。</p>

<p>至此，页表变成了这个样子。</p>

<p><img src="http://ytliu.info/images/2016-03-14-2.png" title="Linux early page table 2 in boot" alt="early page table 2" /></p>

<p><code>startup_64</code>最后一步就是fixup内核段真正的物理页对应的页表项了，代码如下所示：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Fixup</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">text</span><span class="o">+</span><span class="n">data</span> <span class="k">virtual</span> <span class="n">addresses</span><span class="p">.</span> <span class="n">Note</span> <span class="n">that</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">we</span> <span class="n">might</span> <span class="n">write</span> <span class="n">invalid</span> <span class="n">pmds</span><span class="p">,</span> <span class="n">when</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">is</span> <span class="n">relocated</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">cleanup_highmap</span><span class="p">()</span> <span class="n">fixes</span> <span class="n">this</span> <span class="n">up</span> <span class="n">along</span> <span class="n">with</span> <span class="n">the</span> <span class="n">mappings</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">beyond</span> <span class="n">_end</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="n">level2_kernel_pgt</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">leaq</span>  <span class="mi">4096</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">),</span> <span class="o">%</span><span class="n">r8</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">See</span> <span class="k">if</span> <span class="n">it</span> <span class="n">is</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">page</span> <span class="n">table</span> <span class="n">entry</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span>  <span class="n">testq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jz</span>  <span class="mf">2f</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="o">%</span><span class="n">rdi</span><span class="p">)</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">the</span> <span class="n">next</span> <span class="n">page</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span>  <span class="n">addq</span>  <span class="err">$</span><span class="mi">8</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">cmp</span> <span class="o">%</span><span class="n">r8</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">jne</span> <span class="mi">1</span><span class="n">b</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Fixup</span> <span class="n">phys_base</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="o">%</span><span class="n">rbp</span><span class="p">,</span> <span class="n">phys_base</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movq</span>  <span class="err">$</span><span class="p">(</span><span class="n">early_level4_pgt</span> <span class="o">-</span> <span class="n">__START_KERNEL_map</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">jmp</span> <span class="mf">1f</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这个过程的前半部分就是将<code>level2_kernel_pgt</code>中的表项进行一个个的检查，如果不是0（即为一个可能存在的页表项），则将其加上之前计算的真实地址和被期待地址的偏移量（<code>%rbp</code>）。</p>

<p>当这个fixup结束之后，将<code>%rbp</code>保存在<code>phys_base</code>这个地址中，然后再将<code>early_level4_pgt - __START_KERNEL_map</code>保存在<code>%rax</code>中。</p>

<p>接下来就进入<code>secondary_startup_64</code>。</p>

<h3>secondary_startup_64</h3>

<p>这部分代码的主要功能是一些模式的开启，以及相关数据结构的加载，我们同样逐段进行分析：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ENTRY</span><span class="p">(</span><span class="n">secondary_startup_64</span><span class="p">)</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Enable</span> <span class="n">PAE</span> <span class="n">mode</span> <span class="n">and</span> <span class="n">PGE</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="p">(</span><span class="n">X86_CR4_PAE</span> <span class="o">|</span> <span class="n">X86_CR4_PGE</span><span class="p">),</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rcx</span><span class="p">,</span> <span class="o">%</span><span class="n">cr4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">early</span> <span class="n">boot</span> <span class="n">stage</span> <span class="mi">4</span> <span class="n">level</span> <span class="n">pagetables</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">addq</span>  <span class="n">phys_base</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">cr3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里开启了PAE和PGE模式，并将其写到<code>%cr4</code>中，同时将初始页表的第四级页表地址写入了<code>%cr3</code>。至此，分页模式开启！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Ensure</span> <span class="n">I</span> <span class="n">am</span> <span class="n">executing</span> <span class="n">from</span> <span class="k">virtual</span> <span class="n">addresses</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="err">$</span><span class="mf">1f</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">jmp</span> <span class="o">*%</span><span class="n">rax</span>
</span><span class='line'><span class="mi">1</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Check</span> <span class="k">if</span> <span class="n">nx</span> <span class="n">is</span> <span class="n">implemented</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="mh">0x80000001</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">cpuid</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="o">%</span><span class="n">edx</span><span class="p">,</span><span class="o">%</span><span class="n">edi</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">EFER</span> <span class="p">(</span><span class="n">Extended</span> <span class="n">Feature</span> <span class="n">Enable</span> <span class="n">Register</span><span class="p">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="n">MSR_EFER</span><span class="p">,</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">rdmsr</span>
</span><span class='line'>  <span class="n">btsl</span>  <span class="err">$</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EFER_SCE</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Enable</span> <span class="n">System</span> <span class="n">Call</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">btl</span> <span class="err">$</span><span class="mi">20</span><span class="p">,</span><span class="o">%</span><span class="n">edi</span>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">No</span> <span class="n">Execute</span> <span class="n">supported</span><span class="o">?</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">jnc</span>     <span class="mf">1f</span>
</span><span class='line'>  <span class="n">btsl</span>  <span class="err">$</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EFER_NX</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">btsq</span>  <span class="err">$</span><span class="n">_PAGE_BIT_NX</span><span class="p">,</span><span class="n">early_pmd_flags</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span>  <span class="n">wrmsr</span>       <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Make</span> <span class="n">changes</span> <span class="n">effective</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">cr0</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CR0_STATE</span> <span class="p">(</span><span class="n">X86_CR0_PE</span> <span class="o">|</span> <span class="n">X86_CR0_MP</span> <span class="o">|</span> <span class="n">X86_CR0_ET</span> <span class="o">|</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="n">X86_CR0_NE</span> <span class="o">|</span> <span class="n">X86_CR0_WP</span> <span class="o">|</span> <span class="n">X86_CR0_AM</span> <span class="o">|</span> \
</span><span class='line'>   <span class="n">X86_CR0_PG</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movl</span>  <span class="err">$</span><span class="n">CR0_STATE</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Make</span> <span class="n">changes</span> <span class="n">effective</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">cr0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Setup</span> <span class="n">a</span> <span class="n">boot</span> <span class="n">time</span> <span class="n">stack</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span> <span class="n">stack_start</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span> <span class="o">%</span><span class="n">rsp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">zero</span> <span class="n">EFLAGS</span> <span class="n">after</span> <span class="n">setting</span> <span class="n">rsp</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="err">$</span><span class="mi">0</span>
</span><span class='line'>  <span class="n">popfq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面的代码进行了一系列的初始化，包括检查<code>nx</code>（non-execution）是否开启，创建EFER，创建cr0，以及设置一个启动时会用到的栈，并且将所有eflags清零。这里就不细讲了。</p>

<p>然后是加载早期的GDT：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">We</span> <span class="n">must</span> <span class="k">switch</span> <span class="n">to</span> <span class="n">a</span> <span class="n">new</span> <span class="n">descriptor</span> <span class="n">in</span> <span class="n">kernel</span> <span class="n">space</span> <span class="k">for</span> <span class="n">the</span> <span class="n">GDT</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">because</span> <span class="n">soon</span> <span class="n">the</span> <span class="n">kernel</span> <span class="n">won</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">have</span> <span class="n">access</span> <span class="n">anymore</span> <span class="n">to</span> <span class="n">the</span> <span class="n">userspace</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">addresses</span> <span class="n">where</span> <span class="n">we</span><span class="err">&#39;</span><span class="n">re</span> <span class="n">currently</span> <span class="n">running</span> <span class="n">on</span><span class="p">.</span> <span class="n">We</span> <span class="n">have</span> <span class="n">to</span> <span class="k">do</span> <span class="n">that</span> <span class="n">here</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">because</span> <span class="n">in</span> <span class="mi">32</span><span class="n">bit</span> <span class="n">we</span> <span class="n">couldn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">load</span> <span class="n">a</span> <span class="mi">64</span><span class="n">bit</span> <span class="n">linear</span> <span class="n">address</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">lgdt</span>  <span class="n">early_gdt_descr</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>初始化段寄存器：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">set</span> <span class="n">up</span> <span class="n">data</span> <span class="n">segments</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">xorl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">ds</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">ss</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">es</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">fs</span>
</span><span class='line'>  <span class="n">movl</span> <span class="o">%</span><span class="n">eax</span><span class="p">,</span><span class="o">%</span><span class="n">gs</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Set</span> <span class="n">up</span> <span class="o">%</span><span class="n">gs</span><span class="p">.</span>
</span><span class='line'>   <span class="o">*</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">The</span> <span class="n">base</span> <span class="n">of</span> <span class="o">%</span><span class="n">gs</span> <span class="n">always</span> <span class="n">points</span> <span class="n">to</span> <span class="n">the</span> <span class="n">bottom</span> <span class="n">of</span> <span class="n">the</span> <span class="n">irqstack</span>
</span><span class='line'>   <span class="o">*</span> <span class="k">union</span><span class="p">.</span>  <span class="n">If</span> <span class="n">the</span> <span class="n">stack</span> <span class="n">protector</span> <span class="n">canary</span> <span class="n">is</span> <span class="n">enabled</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">located</span> <span class="n">at</span> <span class="o">%</span><span class="n">gs</span><span class="o">:</span><span class="mf">40.</span>  <span class="n">Note</span> <span class="n">that</span><span class="p">,</span> <span class="n">on</span> <span class="n">SMP</span><span class="p">,</span> <span class="n">the</span> <span class="n">boot</span> <span class="n">cpu</span> <span class="n">uses</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">init</span> <span class="n">data</span> <span class="n">section</span> <span class="n">till</span> <span class="n">per</span> <span class="n">cpu</span> <span class="n">areas</span> <span class="n">are</span> <span class="n">set</span> <span class="n">up</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="err">$</span><span class="n">MSR_GS_BASE</span><span class="p">,</span><span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="n">initial_gs</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span>  <span class="n">initial_gs</span><span class="o">+</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">wrmsr</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里需要注意的是<code>%gs</code>的建立，它和per cpu变量相关，是一个比较关键的段寄存器。不过由于这个系列主要是和内存相关，所以这里就不详述了。</p>

<p>然后将参数传给<code>%rdi</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* rsi is pointer to real mode structure with interesting info.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt; pass it to C */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">movq</span>  <span class="o">%</span><span class="n">rsi</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最后就是一个通过far return的跳转：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Finally</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">run</span> <span class="n">C</span> <span class="n">code</span> <span class="n">and</span> <span class="n">to</span> <span class="n">be</span> <span class="n">on</span> <span class="n">real</span> <span class="n">kernel</span> <span class="n">address</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">Since</span> <span class="n">we</span> <span class="n">are</span> <span class="n">running</span> <span class="n">on</span> <span class="n">identity</span><span class="o">-</span><span class="n">mapped</span> <span class="n">space</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">jump</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">full</span> <span class="mi">64</span><span class="n">bit</span> <span class="n">address</span><span class="p">,</span> <span class="n">this</span> <span class="n">is</span> <span class="n">only</span> <span class="n">possible</span> <span class="n">as</span> <span class="n">indirect</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">jump</span><span class="p">.</span>  <span class="n">In</span> <span class="n">addition</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="n">ensure</span> <span class="o">%</span><span class="n">cs</span> <span class="n">is</span> <span class="n">set</span> <span class="n">so</span> <span class="n">we</span> <span class="n">make</span> <span class="n">this</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">a</span> <span class="n">far</span> <span class="k">return</span><span class="p">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="n">movq</span>  <span class="n">initial_code</span><span class="p">(</span><span class="o">%</span><span class="n">rip</span><span class="p">),</span><span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="err">$</span><span class="mi">0</span>    <span class="err">#</span> <span class="n">fake</span> <span class="k">return</span> <span class="n">address</span> <span class="n">to</span> <span class="n">stop</span> <span class="n">unwinder</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="err">$</span><span class="n">__KERNEL_CS</span>  <span class="err">#</span> <span class="n">set</span> <span class="n">correct</span> <span class="n">cs</span>
</span><span class='line'>  <span class="n">pushq</span> <span class="o">%</span><span class="n">rax</span>    <span class="err">#</span> <span class="n">target</span> <span class="n">address</span> <span class="n">in</span> <span class="n">negative</span> <span class="n">space</span>
</span><span class='line'>  <span class="n">lretq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>initial_code</code>定义为：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">GLOBAL</span><span class="p">(</span><span class="n">initial_code</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">quad</span> <span class="n">x86_64_start_kernel</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里要注意的是，在<code>pushq $__KERNEL_CS</code>这条指令之前的寻址还是通过identity-map的页表进行寻址的，而在该指令之后，cs被赋值成<code>__KERNEL_CS</code>，就变成采用正常的页表进行寻址了，到这个时候，虚拟地址就变成高位的地址了（<code>0xffffffff80000000</code>~<code>0xffffffffa0000000</code>）。</p>

<p>最后我们提一下这个<code>lretq</code>，所谓的long return。可以参照<a href="http://docs.oracle.com/cd/E19620-01/805-4693/instructionset-68/index.html">这里</a>：</p>

<blockquote><p>For an intersegment (far) return, the address on the stack is a long pointer. The offset is popped first, followed by the selector.</p></blockquote>

<p>所以在rax之前，需要把<code>__KERNEL_CS</code>的selector也放在栈上。</p>

<p>最后一个问题：gdt是在什么时候初始化的？这个我一直都没有找到，这里就先不管了。</p>

<p>因此，最后进入了<code>x86_64_start_kernel</code>函数，这是一个C语言写的函数，所以，会在下一篇博客中进行介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[史上最详细的kvm_mmu_page结构和用法解析]]></title>
    <link href="http://ytliu.github.io/blog/2014/11/24/shi-shang-zui-xiang-xi-de-kvm-mmu-pagejie-gou-he-yong-fa-jie-xi/"/>
    <updated>2014-11-24T13:15:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2014/11/24/shi-shang-zui-xiang-xi-de-kvm-mmu-pagejie-gou-he-yong-fa-jie-xi</id>
    <content type="html"><![CDATA[<p>这段时间在研究KVM内存虚拟化的代码，看的那叫一个痛苦。网上大部分能找到的资料，不管是中文的还是英文的，写的都非常含糊，很多关键的数据结构和代码都讲的闪烁其辞，有些就是简单的把KVM的文档翻译了一下，但是KVM的文档也让人（至少让我）看的挺费解的，只能着眼于代码，一直挣扎到如今，终于有那么一点开窍了。</p>

<p>于是乎，本着“利己又为人”的原则，我决定将这段时间自己所理解的东西倾情奉献出，特别是对kvm_mmu_page这个最为关键的数据结构，以及它在handle EPT violation时每个域的作用和意义。</p>

<p>需要说明的是，这篇博客并不是一个针对初学者理解“内存虚拟化”的教程，“内存虚拟化”涉及到的很多概念需要读者去翻阅其它资料来获取，以下内容均建立在读者已经了解了“内存虚拟化”的基本概念的基础上，比如对于什么是影子页表（Shadow page table），什么是EPT等，请自行google。以下内容大部分是我阅读目前KVM的文档和源码，以及在运行时生成log进行验证来确定的。</p>

<p>我会尽最大的努力让以下内容足够完整和准确，如果读者发现有什么不清楚或者觉得不正确的地方，望请告知。这篇博文也会实时并且持续更新。</p>

<!-- more -->


<p>现在开始进入“史上最详细的”系列：</p>

<p>我们知道在KVM最新的内存虚拟化技术中，采用的是两级页表映射tdp (two-dimentional paging)，客户虚拟机采用的是传统操作系统的页表，被称做guest page table (GPT)，记录的是客户机虚拟地址（GVA）到客户机物理地址（GPA）的映射；而KVM维护的是第二级页表extended page table (EPT，注：AMD的体系架构中其被称为NPT，nested page table，在这篇文章中统一采用Intel的称法EPT)，记录的是虚拟机物理地址（GPA）到宿主机物理地址（HPA）的映射。</p>

<p>在介绍主体内容之前，需要先统一下几个缩写（摘自KVM文档：linux/Documentation/virtual/kvm/mmu.txt）：</p>

<ul>
<li>pfn: host page frame number，宿主机中某个物理页的帧数</li>
<li>hpa: host physical address，宿主机的物理地址</li>
<li>hva: host virtual address，宿主机的虚拟地址</li>
<li>gfn: guest page frame number，虚拟机中某个物理页的帧数</li>
<li>gpa: guest physical address，虚拟机的物理地址</li>
<li>gva: guest virtual address，虚拟机的虚拟地址</li>
<li>pte: page table entry，指向下一级页表或者页的物理地址，以及相应的权限位</li>
<li>gpte: guest pte，指向GPT中下一级页表或者页的gpa，以及相应的权限位</li>
<li>spte: shadow pte，指向EPT中下一级页表或者页的hpa，以及相应的权限位</li>
<li>tdp: two dimentional paging，也就是我们所说的EPT机制</li>
</ul>


<p>以上唯一需要解释的是spte，在这里被叫做shadow pte，如果不了解的话，会很容易和以前的shadow paging机制搞混。</p>

<p>KVM在还没有EPT硬件支持的时候，采用的是影子页表（shadow page table）机制，为了和之前的代码兼容，在当前的实现中，EPT机制是在影子页表机制代码的基础上实现的，所以EPT里面的pte和之前一样被叫做shadow pte，这个会在之后进行详细的说明。</p>

<h2>两级页表寻址 (tdp)</h2>

<p>其实这个不是重点，就简单地贴张图吧：</p>

<p><img src="http://ytliu.info/images/2014-11-24-1.png" title="tdp" alt="tdp" /></p>

<p>在上图中，包括guest CR3在内，算上PML4E、PDPTE、PDE、PTE，总共有5个客户机物理地址（GPA），这些GPA都需要通过硬件再走一次EPT，得到下一个页表页相对应的宿主机物理地址。</p>

<p>接下来，也就是这篇博文主要的关注点，给定一个GPA，如何通过EPT计算出其相对应的HPA呢？换句话说，如果发生一个EPT violation，即在客户虚拟机中发现某个GPA没有映射到相对应的HPA，那么在KVM这一层会进行什么操作呢？</p>

<h2>EPT</h2>

<p>下图是EPT的总体结构：</p>

<p><img src="http://ytliu.info/images/2014-11-24-2.png" title="ept overview" alt="ept overview" /></p>

<p>和传统的页表一样，EPT的页表结构也是分为四层（PML4、PDPT、PD、PT），EPT Pointer (EPTP)指向PML4的首地址，在没有大页（huge page）的情况下（大页会在以后的博文中说明，这篇博文不考虑大页的情况），一个gpa通过四级页表的寻址，得到相应的pfn，然后加上gpa最后12位的offset，得到hpa，如下图所示：</p>

<p><img src="http://ytliu.info/images/2014-11-24-3.png" title="ept walk" alt="ept walk" /></p>

<h3>物理页与页表页</h3>

<p>在这个过程中，有两种不同类型的页结构：物理页（physical page）和页表页（MMU page）。物理页就是真正存放数据的页，而页表页，顾名思义，就是存放页表的页，而且存放的是EPT的页表。其中，第四级（level-4）页表，也就是EPTP指向的那个页表，是所有MMU pages的根（root），它只有一个页，包含512（4096/8）个页表项（PML4E），每个页表项指向一个第三级（level-3）的页表页（PDPT），类似的，每个PDPT页表页也是512个页表项指向下一级页表，直到最后一级（level-1）PT，PT中的每个页表项（PTE）指向的是一个物理页的页帧（pfn）异或上相对应的access bits。</p>

<p>物理页和页表页除了功能和里面存储的内容不同外，它们被创建的方式也是不同的：</p>

<ul>
<li>物理页可以通过内核提供的<code>__get_free_page</code>来创建，该函数最后会通过底层的<code>alloc_page</code>来返回一段指定大小的内存区域。</li>
<li>页表页则是从<code>mmu_page_cache</code>获得，该page cache是在KVM模块初始化vcpu的时候通过linux内核中的slab机制分配好作为之后MMU pages的cache使用的。</li>
</ul>


<p>在KVM的代码实现中，每个页表页（MMU page）对应一个数据结构kvm_mmu_page。这个数据结构是理解整个EPT机制的关键，接下来的篇幅就主要围绕这个<code>kvm_mmu_page</code>进行分析。</p>

<h3>ept violation处理流程</h3>

<p>在引入这个数据结构之前，我们先来整体了解下在发生ept violation之后KVM是如何进行处理的（也可参考<a href="http://blog.csdn.net/lux_veritas/article/details/9284635">这篇博文</a>)：</p>

<p><img src="http://ytliu.info/images/2014-11-24-4.png" title="ept violation handle" alt="ept violation handle" /></p>

<p><code>handle_ept_violation</code>最终会调用到<code>arch/x86/kvm/mmu.c</code>里面的<code>tdp_page_fault</code>。在该函数中，有两个大的步骤：</p>

<ul>
<li>gfn_to_pfn：在这个过程中，通过gfn->memslot->hva->pfn这一系列步骤得到最后的pfn，这个过程以后会专门用一篇博客来描述；</li>
<li>__direct_map：这个函数所做的事情就是把上一步中得到的pfn和gfn的映射关系反映在EPT中，该过程是这篇博文介绍的重点。</li>
</ul>


<p>顺便提一句，为什么这里叫<code>direct_map</code>呢，即这里的<code>direct</code>是什么意思呢？在我的理解中，这个<code>direct</code>和<code>shadow</code>是相对应的，<code>direct</code>是指在EPT的模式下进行映射，而<code>shadow</code>是在之前shadow paging的模式下进行映射，这主要反映在后面的<code>kvm_mmu_get_page</code>传参过程中（请参阅之后的介绍）。</p>

<p><code>__direct_map</code>的主要逻辑如下（可参阅<a href="http://blog.csdn.net/lux_veritas/article/details/9284635">这里</a>的解释）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">__direct_map</span><span class="p">(</span><span class="n">args</span><span class="p">...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">for_each_shadow_entry</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="p">(</span><span class="n">u64</span><span class="p">)</span><span class="n">gfn</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">iterator</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="n">level</span> <span class="o">==</span> <span class="n">level</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mmu_set_spte</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">iterator</span><span class="p">.</span><span class="n">sptep</span><span class="p">,</span> <span class="n">ACC_ALL</span><span class="p">,</span>
</span><span class='line'>         <span class="n">write</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">emulate</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">gfn</span><span class="p">,</span> <span class="n">pfn</span><span class="p">,</span>
</span><span class='line'>         <span class="n">prefault</span><span class="p">,</span> <span class="n">map_writable</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is_shadow_present_pte</span><span class="p">(</span><span class="o">*</span><span class="n">iterator</span><span class="p">.</span><span class="n">sptep</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">u64</span> <span class="n">base_addr</span> <span class="o">=</span> <span class="n">iterator</span><span class="p">.</span><span class="n">addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base_addr</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="n">PT64_LVL_ADDR_MASK</span><span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="n">level</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pseudo_gfn</span> <span class="o">=</span> <span class="n">base_addr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">PAGE_SHIFT</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sp</span> <span class="o">=</span> <span class="n">kvm_mmu_get_page</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">pseudo_gfn</span><span class="p">,</span> <span class="n">iterator</span><span class="p">.</span><span class="n">addr</span><span class="p">,</span>
</span><span class='line'>            <span class="n">iterator</span><span class="p">.</span><span class="n">level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="mi">1</span><span class="p">,</span> <span class="n">ACC_ALL</span><span class="p">,</span> <span class="n">iterator</span><span class="p">.</span><span class="n">sptep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">link_shadow_page</span><span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="n">sptep</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">emulate</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里的函数代码将映射的建立分成两种情况：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">iterator</span><span class="p">.</span><span class="n">level</span> <span class="o">==</span> <span class="n">level</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mmu_set_spte</span><span class="p">(...);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is_shadow_present_pte</span><span class="p">(</span><span class="o">*</span><span class="n">iterator</span><span class="p">.</span><span class="n">sptep</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">kvm_mmu_get_page</span><span class="p">(...);</span>
</span><span class='line'>  <span class="n">link_shadow_page</span><span class="p">(...);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>简单来说，<code>__direct_map</code>这个函数是根据传进来的gpa进行计算，从第4级（level-4）页表页开始，一级一级地填写相应页表项，这些都是在<code>for_each_shadow_entry(vcpu, (u64)gfn &lt;&lt; PAGE_SHIFT, iterator)</code>这个宏定义里面实现的，这里不展开。这两种情况是这样子的：</p>

<ul>
<li>第一种情况是指如果当前页表页的层数（<code>iterator.level</code>）是最后一层（<code>level</code>）的页表页，那么直接通过调用<code>mmu_set_spte</code>（之后会细讲）设置页表项。</li>
<li>第二种情况是指如果当前页表页<code>A</code>不是最后一层，而是中间某一层（leve-4, level-3, level-2)，而且该页表项之前并没有初始化（<code>!is_shadow_present_pte(*iterator.sptep)</code>），那么需要调用<code>kvm_mmu_get_page</code>得到或者新建一个页表页<code>B</code>，然后通过<code>link_shadow_page</code>将其link到页表页<code>A</code>相对应的页表项中。</li>
</ul>


<h3>kvm_mmu_get_page</h3>

<p>根据代码可能发生的前后关系，我们先来解释下第二种情况，即如何新建一个页表页，即之前所提到的kvm_mmu_page。</p>

<p>这是<code>kvm_mmu_get_page</code>的声明：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">kvm_mmu_page</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">kvm_mmu_get_page</span><span class="p">(</span><span class="k">struct</span> <span class="n">kvm_vcpu</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">gfn_t</span> <span class="n">gfn</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">gva_t</span> <span class="n">gaddr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">level</span><span class="p">,</span> <span class="kt">int</span> <span class="n">direct</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">access</span><span class="p">,</span> <span class="n">u64</span> <span class="o">*</span><span class="n">parent_pte</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>首先解释下传进来的参数都是什么意思：</p>

<ul>
<li>gaddr：产生该ept violation的gpa；</li>
<li>gfn：gaddr通过某些计算得到的gfn，计算的公式是<code>(gaddr &gt;&gt; 12) &amp; ~((1 &lt;&lt; (level * 9)) - 1)</code>，这个会在之后进行解释；</li>
<li>level：该页表页对应的level，可能取值为3，2，1；</li>
<li>direct：在EPT机制下，该值始终为1，如果是shadow paging机制，该值为0；</li>
<li>access：该页表页的访问权限；</li>
<li>parent_pte：上一级页表页中指向该级页表页的页表项的地址。</li>
</ul>


<p>下面举个例子来说明：</p>

<p>假设在<code>__direct_map</code>中，产生ept violation的gpa为0xfffff000，当前的level为3，这个时候，发现EPT中第3级的页表页对应的页表项为空，那么我们就需要创建一个第2级的页表页，然后将其物理地址填在第3级页表页对应的页表项中，那么传给<code>kvm_mmu_get_page</code>的参数很可能是这样子的：</p>

<ul>
<li>gaddr：0xfffff000；</li>
<li>gfn: 0xc0000 (通过<code>(0xfffff000 &gt;&gt; 12) &amp; ~((1 &lt;&lt; (3 - 1) * 9) - 1)</code>得到）；</li>
<li>level：2 （通过<code>3 - 1</code>得到）；</li>
<li>direct：1；</li>
<li>access：7（表示可读、可写、可执行）；</li>
<li>parent_pte：0xffff8800982f8018（这个是第3级页表页相应的页表项的宿主机虚拟地址hva）；</li>
</ul>


<h4>struct kvm_mmu_page</h4>

<p>接下来看看这个函数的返回值：<code>struct kvm_mmu_page</code>：</p>

<p><img src="http://ytliu.info/images/2014-11-24-5.png" title="kvm_mmu_page definition" alt="kvm_mmu_page definition" /></p>

<p>以上是它的定义，该函数定义在<code>arch/x86/include/asm/kvm_host.h</code>中。那么它们分别是什么意思呢？这里先有一个大概的解释（有几个域还不确定，之后会持续更新），等会儿我们会通过一个具体的例子来说明：</p>

<table>
<thead>
<tr>
<th align="left">kvm_mmu_page子域 </th>
<th align="left"> 解释</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">link </td>
<td align="left"> 将该页结构链接到kvm->arch.active_mmu_pages和invalid_list上，标注该页结构不同的状态</td>
</tr>
<tr>
<td align="left">hash_link </td>
<td align="left"> KVM中会为所有的mmu_page维护一个hash链表，用于快速找到对应的kvm_mmu_page实例，详见之后代码分析</td>
</tr>
<tr>
<td align="left">gfn </td>
<td align="left"> 通过kvm_mmu_get_page传进来的gfn，在EPT机制下，每个kvm_mmu_page对应一个gfn，shadow paging见gfns</td>
</tr>
<tr>
<td align="left">role </td>
<td align="left"> kvm_mmu_page_role结构，详见之后分析</td>
</tr>
<tr>
<td align="left">spt </td>
<td align="left"> 该kvm_mmu_page对应的页表页的宿主机虚拟地址hva</td>
</tr>
<tr>
<td align="left">gfns </td>
<td align="left"> 在shadow paging机制下，每个kvm_mmu_page对应多个gfn，存储在该数组中</td>
</tr>
<tr>
<td align="left">unsync </td>
<td align="left"> 用在最后一级页表页，用于判断该页的页表项是否与guest的翻译同步（即是否所有pte都和guest的tlb一致）</td>
</tr>
<tr>
<td align="left">root_rount </td>
<td align="left"> 用在第4级页表，标识有多少EPTP指向该级页表页</td>
</tr>
<tr>
<td align="left">unsync_children </td>
<td align="left"> 记录该页表页中有多少个spte是unsync状态的</td>
</tr>
<tr>
<td align="left">parent_ptes </td>
<td align="left"> 表示有哪些上一级页表页的页表项指向该页表页（之后会详细介绍）</td>
</tr>
<tr>
<td align="left">mmu_valid_gen </td>
<td align="left"> 该页的generation number，用于和<code>kvm-&gt;arch.mmu_valid_gen</code>进行比较，比它小表示该页是invalid的</td>
</tr>
<tr>
<td align="left">unsync_child_bitmap </td>
<td align="left"> 记录了unsync的sptes的bitmap，用于快速查找</td>
</tr>
<tr>
<td align="left">write_flooding_count </td>
<td align="left"> 在页表页写保护模式下，用于避免过多的页表项修改造成的模拟（emulation）</td>
</tr>
</tbody>
</table>


<p>其中，<code>role</code>指向了一个<code>union kvm_mmu_page_role</code>结构，解释如下：</p>

<table>
<thead>
<tr>
<th align="left">kvm_mmu_page_role子域 </th>
<th align="left"> 解释</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">level </td>
<td align="left"> 该页表页的层级</td>
</tr>
<tr>
<td align="left">cr4_pae </td>
<td align="left"> 记录了cr4.pae的值，如果是direct模式，该值为0</td>
</tr>
<tr>
<td align="left">quadrant </td>
<td align="left"> 暂时不清楚</td>
</tr>
<tr>
<td align="left">direct </td>
<td align="left"> 如果是EPT机制，则该值为1，否则为0</td>
</tr>
<tr>
<td align="left">access </td>
<td align="left"> 该页表页的访问权限，参见之后的说明</td>
</tr>
<tr>
<td align="left">invalid </td>
<td align="left"> 表示该页是否有效（暂时不确定）</td>
</tr>
<tr>
<td align="left">nxe </td>
<td align="left"> 记录了efer.nxe的值（暂时不清楚什么作用）</td>
</tr>
<tr>
<td align="left">cr0_wp </td>
<td align="left"> 记录了cr0.wp的值，表示该页是否写保护</td>
</tr>
<tr>
<td align="left">smep_andnot_wp </td>
<td align="left"> 记录了cr4.smep &amp;&amp; !cr0.wp的值（暂时不确定什么作用）</td>
</tr>
</tbody>
</table>


<h4>kvm_mmu_get_page源码分析</h4>

<p>在了解了大部分子域的意义之后，我们来看下<code>kvm_mmu_get_page</code>的代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">kvm_mmu_page</span> <span class="o">*</span><span class="nf">kvm_mmu_get_page</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">role</span> <span class="o">=</span> <span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">arch</span><span class="p">.</span><span class="n">mmu</span><span class="p">.</span><span class="n">base_role</span><span class="p">;</span>
</span><span class='line'>  <span class="n">role</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">level</span><span class="p">;</span>
</span><span class='line'>  <span class="n">role</span><span class="p">.</span><span class="n">direct</span> <span class="o">=</span> <span class="n">direct</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">role</span><span class="p">.</span><span class="n">direct</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">role</span><span class="p">.</span><span class="n">cr4_pae</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">role</span><span class="p">.</span><span class="n">access</span> <span class="o">=</span> <span class="n">access</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">for_each_gfn_sp</span><span class="p">(</span><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="n">gfn</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'><span class="n">mmu_page_add_parent_pte</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="n">parent_pte</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">return</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">sp</span> <span class="o">=</span> <span class="n">kvm_mmu_alloc_page</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">parent_pte</span><span class="p">,</span> <span class="n">direct</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sp</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">sp</span><span class="o">-&gt;</span><span class="n">gfn</span> <span class="o">=</span> <span class="n">gfn</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sp</span><span class="o">-&gt;</span><span class="n">role</span> <span class="o">=</span> <span class="n">role</span><span class="p">;</span>
</span><span class='line'>  <span class="n">hlist_add_head</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sp</span><span class="o">-&gt;</span><span class="n">hash_link</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vcpu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">kvm</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">arch</span><span class="p">.</span><span class="n">mmu_page_hash</span><span class="p">[</span><span class="n">kvm_page_table_hashfn</span><span class="p">(</span><span class="n">gfn</span><span class="p">)]);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">...</span>
</span><span class='line'>  <span class="n">sp</span><span class="o">-&gt;</span><span class="n">mmu_valid_gen</span> <span class="o">=</span> <span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">arch</span><span class="p">.</span><span class="n">mmu_valid_gen</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_shadow_page_table</span><span class="p">(</span><span class="n">sp</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>一开始会初始化<code>role</code>，在EPT机制下，<code>vcpu-&gt;arch.mmu.base_role</code>最开始是被初始化为0的：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">init_kvm_tdp_mmu</span><span class="p">(</span><span class="k">struct</span> <span class="n">kvm_vcpu</span> <span class="o">*</span><span class="n">vcpu</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'><span class="n">context</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">base_role</span><span class="p">.</span><span class="n">word</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>然后调用<code>for_each_gfn_sp</code>查找之前已经使用过的<code>kvm_mmu_page</code>，该宏根据gfn的值在<code>kvm_mmu_page</code>结构中的hash_link进行，具体可参阅以下代码：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">for_each_gfn_sp</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">kvm</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sp</span><span class="p">,</span> <span class="n">_gfn</span><span class="p">)</span>  <span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">hlist_for_each_entry</span><span class="p">(</span><span class="n">_sp</span><span class="p">,</span>   <span class="err">\</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">_kvm</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">arch</span><span class="p">.</span><span class="n">mmu_page_hash</span><span class="p">[</span><span class="n">kvm_page_table_hashfn</span><span class="p">(</span><span class="n">_gfn</span><span class="p">)],</span> <span class="n">hash_link</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">_sp</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">gfn</span> <span class="o">!=</span> <span class="p">(</span><span class="n">_gfn</span><span class="p">))</span> <span class="p">{}</span> <span class="k">else</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>如果找到了，调用<code>mmu_page_add_parent_pte</code>，设置parent_pte对应的reverse map（reverse map一章会在之后对其进行详细的说明）；</li>
<li>如果该gfn对应的页表页不存在，则调用<code>kvm_mmu_alloc_page</code>：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">kvm_mmu_page</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">kvm_mmu_alloc_page</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">kvm_mmu_page</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">sp</span> <span class="o">=</span> <span class="n">mmu_memory_cache_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">arch</span><span class="p">.</span><span class="n">mmu_page_header_cache</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sp</span><span class="o">-&gt;</span><span class="n">spt</span> <span class="o">=</span> <span class="n">mmu_memory_cache_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">arch</span><span class="p">.</span><span class="n">mmu_page_cache</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">list_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sp</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">arch</span><span class="p">.</span><span class="n">active_mmu_pages</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sp</span><span class="o">-&gt;</span><span class="n">parent_ptes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mmu_page_add_parent_pte</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="n">parent_pte</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>改函数调用<code>mmu_memory_cache_alloc</code>从之前分配好的mmu page的memory cache中得到一个<code>kvm_mmu_page</code>结构体实例，然后将其插入<code>kvm-&gt;arch.active_mmu_pages</code>中，同时调用<code>mmu_page_add_parent_pte</code>函数设置parent pte对应的reverse map。</li>
</ul>


<h4>一个例子</h4>

<p>讲到这里，我们来看一个例子：</p>

<p><img src="http://ytliu.info/images/2014-11-24-6.png" title="direct map" alt="direct map" /></p>

<p>在上图中，我们假设需要映射gpa（0xfffff000）到其相对应的hpa（0x42faf000）。</p>

<p>另外，对于每一个MMU page，我们都列出了其相对应的<code>kvm_mmu_page</code>对应的页结构中几个比较关键的域的值。</p>

<p>对于gpa为<code>0xfffff000</code>的地址，其gfn为<code>0xfffff</code>，我们将其用二进制表示出来，并按照EPT entry的格式进行分割：</p>

<p><img src="http://ytliu.info/images/2014-11-24-7.png" title="direct map ept entry" alt="direct map ept entry" /></p>

<p>比如，对于EPT pointer指向的第4级（level-4）页表页，它的<code>role.level</code>为4，它的<code>sp-&gt;spt</code>为该页表页的<code>hva</code>值<code>0xffff8800982f9000</code>。另外，对于最高层级的页表页来说，它的<code>sp-&gt;gfn</code>为0，表示gfn为0的地址可以通过寻址找到该页表页。而由于ept entry中第4段的index为0，所以改页表页的第1个页表项（PML4E）指向了下一层的页表页。</p>

<p>同样的，对于第3级（level-3）页表页，它的<code>role.level</code>为3，<code>sp-&gt;spt</code>为该页表页的<code>hva</code>值<code>0xffff8800982f8000</code>。由上图可知，在ept entry中，它的上一层（即第4段）的index值为0，所以其<code>sp-&gt;gfn</code>也是0，同样表示gfn为0的地址可以通过寻址找到该页表页。另外，在该层的页表页中，其<code>parent_ptes</code>填的是上一层的页表页中指向该页表页的页表项的地址，即第4级页表页的第一个页表项的地址<code>0xffff8800982f9000</code>，而在ept entry中，由于第3段的index为3，所以该页表页的第3个页表项（PDPTE）指向了下一层的页表页。</p>

<p>以此类推，到第2级（level-2）页表页，前面几项都和之前是类似的，而对于<code>sp-&gt;gfn</code>来说，由于它的上一层（第3层）的index值为3，那么通过计算公式<code>(gaddr &gt;&gt; 12) &amp; ~((1 &lt;&lt; (level * 9)) - 1)</code>可以得到以下的值：</p>

<p><img src="http://ytliu.info/images/2014-11-24-8.png" title="direct map ept entry l1" alt="direct map ept entry l1" /></p>

<p>将其转化为十六进制数，即可得到<code>0xc0000</code>，表示gfn为<code>0xc0000</code>的地址在寻址过程中会找到该页表页。而它的<code>parent_ptes</code>就指向了第3层页表页中第3个页表项的地址<code>0xffff8800982f8018</code>，ept entry中第2段的index <code>0xfff</code> 表示它最后一项页表项（PDE）指向了下一级的页表页。</p>

<p>类似的，可以算出第1级页表页的<code>sp-&gt;gfn</code>为<code>0xffe00</code>，<code>parent_ptes</code>为<code>0xffff880060db7ff8</code>，同时，它的最后一个页表项（PTE）指向了真正的hpa<code>0x42faf000</code>。</p>

<p><img src="http://ytliu.info/images/2014-11-24-9.png" title="direct map ept entry l1" alt="direct map ept entry l1" /></p>

<p>到此为止，gpa被最终映射为hpa，并放映在EPT中，于是下次客户虚拟机应用程序访问该gpa的时候就不会再发生ept violation了。</p>

<h3>reverse map</h3>

<p>似乎讲到这里就该结束了？</p>

<p>确实，基本上这篇博文的内容就要接近尾声了，只是还有那么一小点内容，关于reverse map。</p>

<p>如果你倒回去看会发现，我们还有两个很重要的函数没有展开：</p>

<ul>
<li>mmu_page_add_parent_pte</li>
<li>mmu_set_spte</li>
</ul>


<p>这两个函数是干什么的呢？其实它们都和reverse map有关。</p>

<p>首先，对于低层级（level-3 to level-1）的页表页结构kvm_mmu_page，我们需要设置上一级的相应的页表项地址，然后通过<code>mmu_page_add_parent_pte</code>设置其parent_pte的reverse map：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">mmu_page_add_parent_pte</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parent_pte</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">pte_list_add</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">parent_pte</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sp</span><span class="o">-&gt;</span><span class="n">parent_ptes</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另外一点，我说过，页分为两类，物理页和页表页，但是我之前没有说的一点是，页表页本身也被分为两类，高层级（level-4 to level-2）的页表页，和最后一级（level-1）的页表页。</p>

<p>对于高层级的页表页，我们只需要调用<code>link_shadow_page</code>，将页表项的值和相应的权限位直接设置上去就好了，但是对于最后一级的页表项，我们除了设置页表项对应的值之外，还需要做另一件事，<code>rmap_add</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">mmu_set_spte</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">set_spte</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">sptep</span><span class="p">,</span> <span class="n">pte_access</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">gfn</span><span class="p">,</span> <span class="n">pfn</span><span class="p">,</span> <span class="n">speculative</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nb">true</span><span class="p">,</span> <span class="n">host_writable</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">is_shadow_present_pte</span><span class="p">(</span><span class="o">*</span><span class="n">sptep</span><span class="p">))</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">was_rmapped</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rmap_count</span> <span class="o">=</span> <span class="n">rmap_add</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">sptep</span><span class="p">,</span> <span class="n">gfn</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">int</span> <span class="n">rmap_add</span><span class="p">(</span><span class="k">struct</span> <span class="n">kvm_vcpu</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">u64</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">spte</span><span class="p">,</span> <span class="n">gfn_t</span> <span class="n">gfn</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">sp</span> <span class="o">=</span> <span class="n">page_header</span><span class="p">(</span><span class="n">__pa</span><span class="p">(</span><span class="n">spte</span><span class="p">));</span>
</span><span class='line'>  <span class="n">kvm_mmu_page_set_gfn</span><span class="p">(</span><span class="n">sp</span><span class="p">,</span> <span class="n">spte</span> <span class="o">-</span> <span class="n">sp</span><span class="o">-&gt;</span><span class="n">spt</span><span class="p">,</span> <span class="n">gfn</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rmapp</span> <span class="o">=</span> <span class="n">gfn_to_rmap</span><span class="p">(</span><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm</span><span class="p">,</span> <span class="n">gfn</span><span class="p">,</span> <span class="n">sp</span><span class="o">-&gt;</span><span class="n">role</span><span class="p">.</span><span class="n">level</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">pte_list_add</span><span class="p">(</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">spte</span><span class="p">,</span> <span class="n">rmapp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到，不管是<code>mmu_page_add_parent_pte</code>，还是<code>mmu_set_spte</code>调用的<code>rmap_add</code>，最后都会调用到<code>pte_list_add</code>。</p>

<p>那么问题来了，这货是干嘛的呢？</p>

<p>翻译成中文的话，reverse map被称为反向映射，在上面提到的两个反向映射中，第一个叫parent_ptes，记录的是页表页和指向它的页表项对应的映射，另一个是每个gfn对应的反向映射rmap，记录的是该gfn对应的spte。</p>

<p>我们举rmap为例，给定一个gfn，我们怎么找到其对应的rmap呢？</p>

<ul>
<li>首先，我们通过<code>gfn_to_memslot</code>得到这个gfn对应的memory slot（这个机制会在以后的博文中提到）；</li>
<li>通过得到的slot和gfn，算出相应的index，然后从<code>slot-&gt;arch.rmap</code>数组中取出相应的rmap：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">__gfn_to_rmap</span><span class="p">(</span><span class="n">gfn_t</span> <span class="n">gfn</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">struct</span> <span class="n">kvm_memory_slot</span> <span class="o">*</span><span class="n">slot</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">idx</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">idx</span> <span class="o">=</span> <span class="n">gfn_to_index</span><span class="p">(</span><span class="n">gfn</span><span class="p">,</span> <span class="n">slot</span><span class="o">-&gt;</span><span class="n">base_gfn</span><span class="p">,</span> <span class="n">level</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">slot</span><span class="o">-&gt;</span><span class="n">arch</span><span class="p">.</span><span class="n">rmap</span><span class="p">[</span><span class="n">level</span> <span class="o">-</span> <span class="n">PT_PAGE_TABLE_LEVEL</span><span class="p">][</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有了gfn对应的rmap之后，我们再调用<code>pte_list_add</code>将这次映射得到的spte加到这个rmap中</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">pte_list_add</span><span class="p">(</span><span class="k">struct</span> <span class="n">kvm_vcpu</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">vcpu</span><span class="p">,</span> <span class="n">u64</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">spte</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">pte_list</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">pte_list_desc</span> <span class="o">*</span><span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!*</span><span class="n">pte_list</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rmap_printk</span><span class="p">(</span><span class="s">&quot;pte_list_add: %p %llx 0-&amp;gt;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">spte</span><span class="p">,</span> <span class="o">*</span><span class="n">spte</span><span class="p">);</span>
</span><span class='line'><span class="o">*</span><span class="n">pte_list</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">spte</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">pte_list</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rmap_printk</span><span class="p">(</span><span class="s">&quot;pte_list_add: %p %llx 1-&amp;gt;many</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">spte</span><span class="p">,</span> <span class="o">*</span><span class="n">spte</span><span class="p">);</span>
</span><span class='line'><span class="n">desc</span> <span class="o">=</span> <span class="n">mmu_alloc_pte_list_desc</span><span class="p">(</span><span class="n">vcpu</span><span class="p">);</span>
</span><span class='line'><span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sptes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">u64</span> <span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">pte_list</span><span class="p">;</span>
</span><span class='line'><span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sptes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">spte</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">pte_list</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">desc</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rmap_printk</span><span class="p">(</span><span class="s">&quot;pte_list_add: %p %llx many-&amp;gt;many</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">spte</span><span class="p">,</span> <span class="o">*</span><span class="n">spte</span><span class="p">);</span>
</span><span class='line'><span class="n">desc</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">pte_list_desc</span> <span class="o">*</span><span class="p">)(</span><span class="o">*</span><span class="n">pte_list</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">~</span><span class="mi">1ul</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sptes</span><span class="p">[</span><span class="n">PTE_LIST_EXT</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">more</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">desc</span> <span class="o">=</span> <span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">more</span><span class="p">;</span>
</span><span class='line'>  <span class="n">count</span> <span class="o">+=</span> <span class="n">PTE_LIST_EXT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sptes</span><span class="p">[</span><span class="n">PTE_LIST_EXT</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">more</span> <span class="o">=</span> <span class="n">mmu_alloc_pte_list_desc</span><span class="p">(</span><span class="n">vcpu</span><span class="p">);</span>
</span><span class='line'>  <span class="n">desc</span> <span class="o">=</span> <span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">more</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sptes</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="n">desc</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sptes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">spte</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>看到这里你可能还是一头雾水，rmap到底是什么，为什么加一个rmap的项要那么复杂？</p>

<p>好吧，其实我的理解是这样的：</p>

<ul>
<li>首先，rmap就是一个数组，这个数组的每个项都对应了这个gfn反向映射出的某个spte的地址；</li>
<li>其次，由于大部分情况下一个gfn对应的spte只有一个，也就是说，大部分情况下这个数组的大小是1；</li>
<li>但是，这个数组也可能很大，大到你也不知道应该把数组的大小设到多少合适；</li>
<li>所以，总结来说，rmap是一个不确定大小，但是大部分情况下大小为1的数组。</li>
</ul>


<p>那么，怎么做？</p>

<p>我想说，这是一个看上去很完美的设计！</p>

<p>由于spte的地址只可能是8的倍数（自己想为什么），所以其第一位肯定是0，那么我们就利用这个特点：</p>

<ul>
<li>我们用一个<code>unsigned long *</code>来表示一个rmap，即上文中的<code>pte_list</code>；</li>
<li>如果这个<code>pte_list</code>为空，则表示这个rmap之前没有创建过，那么将其赋值，即上文中<code>0-&gt;1</code>的情况；</li>
<li>如果这个<code>pte_list</code>不为空，但是其第一位是<code>0</code>，则表示这个rmap之前已经被设置了一个值，那么需要将这个<code>pte_list</code>的值改为某个<code>struct pte_list_desc</code>的地址，然后将第一位设成<code>1</code>，来表示该地址并不是单纯的一个spte的地址，而是指向某个<code>struct pte_list_desc</code>，这是上文中<code>1-&gt;many</code>的情况；</li>
<li>如果这个<code>pte_list</code>不为空，而且其第一位是<code>1</code>，那么通过访问由这个地址得到的<code>struct pte_list_desc</code>，得到更多的sptes，即上文中<code>many-&gt;many</code>的情况。</li>
</ul>


<p><code>struct pte_list_desc</code>结构定义如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>arch/x86/kvm/mmu.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">pte_list_desc</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">u64</span> <span class="o">*</span><span class="n">sptes</span><span class="p">[</span><span class="n">PTE_LIST_EXT</span><span class="p">];</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pte_list_desc</span> <span class="o">*</span><span class="n">more</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>它是一个单链表的节点，每个节点都存有3个spte的地址，以及下一个节点的位置。</p>

<p>好了，最后一个问题，rmap到底有什么用？</p>

<p>当然，信息总归是有用的，特别是这些和映射相关的信息。</p>

<p>举个例子吧，假如操作系统需要进行页面回收或换出，如果宿主机需要把某个客户机物理页换到disk，那么它就需要修改这个页的物理地址gpa对应的spte，将其设置成不存在。</p>

<p>那么这个该怎么做呢？</p>

<p>当然，你可以用软件走一遍ept页表，找到其对应的spte。但是，这样太慢了！这个时候你就会想，如果有一个gfn到spte的反向映射岂不方便很多！于是，reverse map就此派上用场。</p>

<p>这里最后说一点，如果说有这么一个需求：宿主机想要废除当前客户机所有的MMU页结构，那么如何做最快呢？</p>

<p>当然，你可以从EPTP开始遍历一遍所有的页表页，处理掉所有的MMU页面和对应的映射，但是这种方法效率很低。</p>

<p>如果你还记得之前<code>kvm_mmu_page</code>结构里面的<code>mmu_valid_gen</code>域的话，你就可以通过将kvm->arch.mmu_valid_gen加1，那么当前所有的MMU页结构都变成了invalid，而处理掉页结构的过程可以留给后面的过程（如内存不够时）再处理，这样就可以加快这个过程。</p>

<p>而当mmu_valid_gen值达到最大时，可以调用kvm_mmu_invalidate_zap_all_pages手动废弃掉所有的MMU页结构。</p>

<hr />

<p>完。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Kali Linux in Lenovo Yoga 3 Pro]]></title>
    <link href="http://ytliu.github.io/blog/2014/11/19/install-kali-linux-in-lenovo-yoga-3-pro/"/>
    <updated>2014-11-19T09:34:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2014/11/19/install-kali-linux-in-lenovo-yoga-3-pro</id>
    <content type="html"><![CDATA[<p>Recently the lab granted one laptop for each PhD candidate, since I already had a Macbook Air, I chose the <a href="http://shop.lenovo.com/us/en/laptops/lenovo/yoga-laptop-series/yoga-3-pro-laptop/">Lenovo Yoga 3 Pro Ultrabook</a>. Several days ago, it showed up:</p>

<p><img src="http://ytliu.info/images/2014-11-19-1.jpg" title="yoga 3 pro" alt="lenovo yoga 3 pro" /></p>

<p>This blog illustrates how I install Kali Linux in Yoga 3 Pro, and enable its otherwise disabled wifi.</p>

<!-- more -->


<p>If you don't know what Kali Linux is, please find it <a href="https://www.kali.org/">here</a>.</p>

<h4>build Kali Live USB</h4>

<p>I built it in Windows, first downloaded official Kali image from <a href="https://www.kali.org/downloads/">here</a>. Actually I downloaded it several months ago, when the version was 1.0.6, with 3.12 kernel. What's more, the latest 1.0.9 version image has some problems to be installed in my Yoga 3 pro ultrabook, so that I chose the old image.</p>

<p>After downloading the image, I used the <a href="http://rufus.akeo.ie/">rufus</a> to install it to the USB, as shown in the figure:</p>

<p><img src="http://ytliu.info/images/2014-11-19-2.png" title="rufus" alt="rufus" /></p>

<p>It is quite easy to build the USB installer, which is a matter of one click.</p>

<h4>Install Kali Linux</h4>

<p>Actually the Live USB can boot up alone without installing, as the "live" suggests, and we can even <a href="http://docs.kali.org/installation/kali-linux-live-usb-persistence">add persistence to the live USB</a> to make its storage persistent.</p>

<p>But the aim of this blog is to install Kali into the disk storage. Before installing OS, we need to enter BIOS to enable legacy mode: it comes with a small button on the side of the power button to enable the BIOS edit and boot sequence. When we press it, the computer powers up with the config menu. Then we have to edit the BOOT tab to modify UEFI mode to legacy mode:</p>

<p><img src="http://ytliu.info/images/2014-11-19-3.jpg" title="bios" alt="bios" /></p>

<p>After that, you should be greeted with the Kali Boot screen. Choose either graphical or text-mode install. The installation process is quite similar with normal debian installation process, I just omit it here.</p>

<p>It is noted that if you want to reboot into your Windows system, you have to enter BIOS and modify the BOOT to UEFI mode again. I think there must be some ways to solve such inconvenience. (Actually I've found a <a href="https://www.linkedin.com/pulse/article/20140424002809-79939846-windows-8-1-and-kali-linux-dual-boot-on-uefi-mode-machines">blog</a> telling how to make Windows 8.1 and Kali Linux dual boot on UEFI mode machines, and tried it successfully).</p>

<h4>Recompile the kernel</h4>

<p>In order to build some new kernel modules, I need to recompile the kernel and have the kernel source. However I found that the official Kali latest 3.14.5 kernel cannot work in my Yoga 3, I cannot figure out why, so I just used another 3.13.7 kernel version. And added following apt source-list to the <code>/etc/apt/sources.list</code>:</p>

<pre><code>deb ftp://ftp.sjtu.edu.cn/debian testing main contrib non-free
deb-src ftp://ftp.sjtu.edu.cn/debian testing main contrib non-free
</code></pre>

<h4>Handle WiFi problem</h4>

<p>The installed Kali Linux cannot recognize the WiFi card due to driver absence. It is not hard to handle this problem.</p>

<p>At first I need to know which network controller it uses:</p>

<pre><code>$ lspci -vvnn | grep -A 20 Network
</code></pre>

<p><img src="http://ytliu.info/images/2014-11-19-4.png" title="network controller" alt="newtork controller" /></p>

<p>It shows that the network controller is <code>Broadcom Corporation Device [14e4:43b1]</code>, and I found <a href="http://wireless.kernel.org/en/users/Drivers/b43">here</a> that both <code>b43</code> and <code>b43legacy</code> drivers do not support devices with <code>14e4:43b1</code> PCI-ID. But I searched in the web that <code>wl</code> driver works. So we can install <code>broadcom-sta-dkms</code>:</p>

<pre><code>$ aptitude install broadcom-sta-dkms
</code></pre>

<p>Then we can see that <code>wl</code> driver is inserted into the module list:</p>

<pre><code>$ lsmod | grep wl
wl        6294918 0
cfg80211  411101  1 wl
</code></pre>

<p>With the <code>wl</code> driver, the <code>wireless</code> option showed up, but with a "wireless is disabled" tip. Using <code>rfkill</code> command I find:</p>

<pre><code>$ rfkill list all
0: ideapad_wlan: Wireless LAN
    Soft blocked: yes
    Hard blocked: yes
1: ideapad_bluetooth: Bluetooth
    Soft blocked: no
    Hard blocked: yes
2: hci0: Bluetooth
    Soft blocked: no
    Hard blocked: no
3: phy1: Wireless LAN
    Soft blocked: yes
    Hard blocked: yes
</code></pre>

<p>even if I use <code>rfkill unblock all</code> command, I found the option for <code>ideapad_wlan hard blocked</code> is still <code>yes</code>.</p>

<p>To solve such problem, you can refer to <a href="http://billauer.co.il/blog/2014/08/linux-ubuntu-yoga-hardware-blocked-wireless-lan/">here</a>, or use my simple and rude approach:</p>

<pre><code>$ rmmod ideapad_laptop
</code></pre>

<p>and add <code>blacklist ideapad_laptop</code> to the <code>/etc/modprobe.d/blacklist.conf</code> file to disable its load in boot time.</p>

<p>After that I can finally use wifi.</p>

<hr />

<p>However till now, the touchpad does not work, and I can only use hardware mouse. Since I seldom use mouse in linux, so it is not a big problem for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Linux Kernel using GDB and QEMU]]></title>
    <link href="http://ytliu.github.io/blog/2014/10/22/debugging-linux-kernel-using-gdb-and-qemu/"/>
    <updated>2014-10-22T11:00:00+08:00</updated>
    <id>http://ytliu.github.io/blog/2014/10/22/debugging-linux-kernel-using-gdb-and-qemu</id>
    <content type="html"><![CDATA[<p>I should say it is really a shame that after more than 5 years of Linux development I still don't know how to debug linux kernel using GDB.</p>

<p>Yesterday I've seen how GodLiang do this, and learned it from him, and finally, 新技能Get:</p>

<blockquote><p>Debugging Linux Kernel using GDB and QEMU - learn from Liangpig</p></blockquote>

<!-- more -->


<p>Here I'll just skip about how to setup KVM and QEMU, I suppose you've already known that.</p>

<h3>Prepare virtual machine and its vmlinux</h3>

<p>At first, prepare a virtual machine, and more importantly, you should have the <code>vmlinux</code> of the VM's kernel.</p>

<h6>But how?</h6>

<p>The simplest way is downloading a new kernel from <a href="https://www.kernel.org/pub/linux/kernel/v3.x/">here</a>, compile to get the <code>vmlinux</code> and install the kernel using <code>make install</code>.</p>

<h6>But what if you want to keep the current kernel?</h6>

<p>Please use following instructions (for example my kernel is linux-3.2) :</p>

<pre><code>$ sudo aptitude install linux-headers-`uname -r`
$ sudo aptitude install linux-source-3.2
$ cd /usr/src
$ tar zxvf linux-source-3.2.tar.gz
$ cd linux-source-3.2
$ make localmodconfig
$ make menuconfig
$ make -j4; make modules_install; make install
$ mkinitramfs 3.2.57 -o /boot/initrd.img-3.2.57
</code></pre>

<p>After above 2 approaches, you can have <code>vmlinux</code> in the 1st level folder, copy that, as well as the whole source code to the host.</p>

<p><strong>Note: Above operations are all done inside virtual machine, while the following should be done in the host</strong></p>

<h3>Prepare GDB environment</h3>

<p>You may say it is quite simple since we only need to use <code>apt-get install gdb</code>.</p>

<p>That's almost right, but the GDB has a bug when it is remotely attached to QEMU on x86-64 arch, as shown in <a href="http://www.cygwin.com/ml/gdb-patches/2012-03/msg00116.html">here</a>.</p>

<p>Thus we need to do the patching staff illustrated in the above link.</p>

<p>My current GDB version is 7.6.2, so I download the same version, patch and compile it, and finally install it:</p>

<pre><code>$ wget http://ftp.gnu.org/gnu/gdb/gdb-7.6.2.tar.gz
$ tar zxvf gdb-7.6.2.tar.gz
$ cd gdb-7.6.2
// patch it as what is shown in http://www.cygwin.com/ml/gdb-patches/2012-03/msg00116.html
$ ./configure; make -j4; sudo make install
</code></pre>

<h3>Now to the point</h3>

<p>Now everything is ready, suppose the things we need are in following locations:</p>

<ul>
<li>Main directory: <code>/source/to/</code></li>
<li>VM image: <code>/source/to/vm.img</code></li>
<li>vmlinux: <code>/source/to/vmlinux</code></li>
<li>linux-source: <code>/source/to/linux-source/</code></li>
<li>GDB directory: <code>/source/to/gdb/</code></li>
</ul>


<h5>Prepare the bash script for qemu setup</h5>

<pre><code>$ cat /source/to/boot_gdb_kernel.sh
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/source/to/boot_gdb_kernel.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;qemu<span class="o">=</span>qemu-system-x86_64
</span><span class='line'><span class="nv">img</span><span class="o">=</span>/source/to/vm.img&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="k">${</span><span class="nv">qemu</span><span class="k">}</span> --enable-kvm -smp 1 -m 1024 -drive <span class="nv">file</span><span class="o">=</span><span class="k">${</span><span class="nv">img</span><span class="k">}</span> -netdev <span class="s2">&quot;user,id=user.0,hostfwd=tcp:0.0.0.0:2222-:22&quot;</span> -device e1000,netdev<span class="o">=</span>user.0 -gdb tcp::1234 -S <span class="nv">$@</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As shown in the script, it uses <code>-gdb tcp::1234 -S</code> to open GDB support in QEMU.</p>

<p>After we execute the script, it will open the virtual machine, but stuck in the black screen, that is because we use the <code>-S</code> option, which instruct QEMU to stop until we do something.</p>

<h5>Prepare GDB configuration file</h5>

<p>What we need to do next is executing the GDB in the <code>gdb</code> directory, which contains the following configuration file:</p>

<pre><code>$ cat /source/to/gdb/.gdbinit
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/source/to/gdb/.gdbinit </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>file /source/to/vmlinux
</span><span class='line'>directory /source/to/linux-source
</span><span class='line'>target remote :1234
</span><span class='line'>hbreak start_kernel
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and we also need to add following line to <code>~/.gdbinit</code> file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.gdbinit </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>add-auto-load-safe-path /source/to/gdb/.gdbinit
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Begin to debug</h5>

<p>when we execute <code>gdb</code> command in this exact directory, it will read the content in .gdbinit file, and attach to the remote <code>1234</code> port, and attach to the qemu process:</p>

<pre><code>$ pwd
/source/to/gdb
$ gdb
GNU gdb (GDB) 7.6.2
Copyright (C) 2013 Free Software Foundation, Inc.
.....
0x0000000000000000 in irq_stack_union ()
Hardware assisted breakpoint 1 at 0xffffffff816aa787: file init/main.c, line 469.
(gdb)
</code></pre>

<p>Here we need to enter <code>c</code> to continue the execution, after that, it will stop at the <code>start_kernel</code> function which we hbreak in the <code>/source/to/gdb/.gdbinit</code> file:</p>

<pre><code>......
(gdb) c
Continuing.
Breakpoint 1, start_kernel () at init/main.c:469
469 {
(gdb)
</code></pre>

<p>Again we enter <code>c</code> to continue, finally the linux kernel setup. Then we can use gdb to breakpoint any function or address we want to stop, to debug the linux kernel.</p>

<hr />

<p>Thanks to Liangpig and hope to learn more from him.</p>
]]></content>
  </entry>
  
</feed>
